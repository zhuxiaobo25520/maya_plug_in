global proc gtClusterDeformToolEditWin(){


if(`window -ex gtClusterDeformToolEditWin`) deleteUI -window gtClusterDeformToolEditWin;
window -wh 420 200 -t "编辑簇变形工具" gtClusterDeformToolEditWin;
scrollLayout gtmainBSL;


columnLayout -adj 1 -w 380 gtBSColumlayout;
separator -style single  sep1;


rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;


textFieldGrp  -cw2 100 130 -l "变形模型" -tx "请载入变形模型" -ed 0 gtTextBSLCluster3b;
button -l "载入变形模型" -c "gtBSLoadClusterMeshb" gtButBSC3;


setParent..;
floatSliderGrp -l "影响半径" -v 0.5 -s 0.001 -f 1 gtClusterRadius;


rowColumnLayout -nc 4 -cw 1 100  -cw 2 140 -cw 3 140;
text -l "";
checkBox -l "嘴巴模式" gtClusterMouth;
button -l "编辑簇权重" -c "gtClusterToolEditProcLCA;" but3ab;


setParent..;
separator -style single  sep2;


showWindow  gtClusterDeformToolEditWin;
}


//////////////////////////////
global proc gtBSLoadClusterMeshb(){
string $sel[]=`ls -sl`;
string $obj="";
for($i=0;$i<size($sel);$i++){
    $obj+=(" "+$sel[$i]);
}
textFieldGrp -e -tx ($obj) gtTextBSLCluster3b;
}
//////////////////////////////////
global proc gtClusterToolEditProcLCA (){
    
string $sel[]=`ls -sl`;
string $mesh=`textFieldGrp -q -tx gtTextBSLCluster3b`;


int $mouth=`checkBox -q -v gtClusterMouth`;
float $dismt=`floatSliderGrp -q -v gtClusterRadius`;
float $mind=$dismt*0.2;


for($ii=0;$ii<size($sel);$ii++){    
string $clustA=$sel[$ii];
int $vexAll[]=`polyEvaluate -v $mesh`;


string $clusA[]=`listConnections -s 0 -d 1 ($clustA+".worldMatrix[0]")`;
string $cluster=$clusA[0];
$tempStringA=`listConnections ($clusA[0]+".message")`;


    string$cluster_temp="";
   
   for ($j=0;$j<size($tempStringA);$j++)
         {
          string$type=`nodeType $tempStringA[$j]`;
          if($type=="objectSet")
             {
                 $cluster_temp=$tempStringA[$j];
             }
         }
//print $cluster;
string $clusterSet=$cluster_temp;
select `sets -q ($clusterSet)`;
$dvtxs=`ls -sl -fl`;
	string $geometry=$mesh;
		
	int $ex=`objExists 	closestSampler`;
	if($ex==1)delete closestSampler;
	
createNode -n closestSampler closestPointOnMesh;
$tempString=`listRelatives -ni -s $geometry`;
connectAttr -f ($tempString[0]+".outMesh") closestSampler.inMesh;
connectAttr -f ($geometry+".worldMatrix[0]") closestSampler.inputMatrix;


spaceLocator -p 0 0 0 -n ($clustA+"loc");
select -r ($clustA);
select -add  ($clustA+"loc");
delete `pointConstraint`;
float $posAA[]=`xform -q -ws -t ($clustA+"loc")`;
delete ($clustA+"loc");
int $closestOppositeVtxNr;


float $mag;
select -r ($mesh+".vtx[0:999999]");


if($mouth==0){
string $vtxs[]=`ls -sl -fl`;	
select -cl;
	for($cc=0;$cc<size($vtxs);$cc++){
	    float $posB[]=`xform -q -ws -t $vtxs[$cc]`;
	 $mag=mag (<<($posAA[0]-$posB[0]),($posAA[1]-$posB[1]),($posAA[2]-$posB[2])>>);
        if($mag<($dismt+$dismt*0.1)) select -add $vtxs[$cc];
	}


	string $vex[]=`ls -sl -fl`;
		if(size($vex)>0)
		sets -add ($clusterSet) `ls -sl`;
		
}else{
    	string $vex[]=`ls -sl -fl`;
		if(size($vex)>0)
		sets -add ($clusterSet) `ls -sl`;
        
//select -r $vtxs;


	setAttr -type float3 closestSampler.inPosition ($posAA[0]) $posAA[1] $posAA[2];
	$closestOppositeVtxNr=`getAttr closestSampler.result.closestVertexIndex`;
float $posA[]=`xform -q -ws -t ($geometry+".vtx["+$closestOppositeVtxNr+"]")`;
	
select -r ($geometry+".vtx["+$closestOppositeVtxNr+"]");
GrowPolygonSelectionRegion;
select -d ($geometry+".vtx["+$closestOppositeVtxNr+"]");


string $tempVext[]=`ls -sl -fl`;	


float $tempDis=0;
float $tempDisA=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis){$tempDis=$mag;select -r  $tempVext[$cc];}
        if($mag<$tempDisA){$tempDisA=$mag;}
	}	
    //print ($tempDis);
    //print ($tempDisA);
    
string $tempVex[]=`ls -sl -fl`;	
select -r ($tempVex[0]);
float $posA[]=`xform -q -ws -t ($tempVex[0])`;
	
GrowPolygonSelectionRegion;
select -d ($tempVex[0]);


string $tempVext[]=`ls -sl -fl`;		
float $tempDis1=0;
float $tempDisA1=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis1){$tempDis1=$mag;select -r  $tempVext[$cc];}
        if($mag<$tempDisA1){$tempDisA1=$mag;}
	}	
	//print ($tempDis1);
    //print ($tempDisA1);
    
string $tempVex[]=`ls -sl -fl`;	
select -r ($tempVex[0]);
float $posA[]=`xform -q -ws -t ($tempVex[0])`;
	
GrowPolygonSelectionRegion;
select -d ($tempVex[0]);


string $tempVext[]=`ls -sl -fl`;		
float $tempDis2=0;
float $tempDisA2=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis2){$tempDis2=$mag;}
        if($mag<$tempDisA2){$tempDisA2=$mag;select -r  $tempVext[$cc];}
	}	
	//print ($tempDis2);
    //print ($tempDisA2);
    string $tempVex[]=`ls -sl -fl`;	
select -r ($tempVex[0]);
float $posA[]=`xform -q -ws -t ($tempVex[0])`;
	
GrowPolygonSelectionRegion;
select -d ($tempVex[0]);


string $tempVext[]=`ls -sl -fl`;		
float $tempDis3=0;
float $tempDisA3=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis3){$tempDis3=$mag;select -r  $tempVext[$cc];}
        if($mag<$tempDisA3){$tempDisA3=$mag;}
	}	
    
int $loop=0;
    $loop=($dismt+$dismt*0.1)/(($tempDis+$tempDisA+$tempDis1+$tempDisA1+$tempDis2+$tempDisA2+$tempDis3+$tempDisA3)/8.0)+1;
select -r ($geometry+".vtx["+$closestOppositeVtxNr+"]");
	for($cc=0;$cc<$loop;$cc++){
GrowPolygonSelectionRegion;
    }
    
}
    delete closestSampler;


$cVext=`ls -sl -fl`;


global string $gMainProgressBar;
//print ($posAA);
progressBar -e -st ("编辑簇权重："+$sel[$ii]) -bp -ii 1 -min 0 -max `size($cVext)` $gMainProgressBar;
for ($i=0;$i<size($cVext);$i++)
	{
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    float $posB[]=`xform -q -ws -t $cVext[$i]`;
	$mag=mag (<<($posAA[0]-$posB[0]),($posAA[1]-$posB[1]),($posAA[2]-$posB[2])>>);


	float $weightV=1-(smoothstep($mind,$dismt,$mag));	
	$tempFloat[0]=$weightV;
		
	percent -v $tempFloat[0] $cluster $cVext[$i];
	}
	progressBar -e -ep $gMainProgressBar;


select -r ($mesh+".vtx[0:999999]");
select -d $cVext;
$cVext=`ls -sl -fl`;
if(size($cVext))
sets -rm ($clusterSet) $cVext;
    }
select -r ($sel);
}