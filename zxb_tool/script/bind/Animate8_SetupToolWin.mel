//老船绑定工具箱
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc Animate8_SetupToolWin(){
if(`window -ex gtLCSetupToolWin`) deleteUI -window gtLCSetupToolWin;
if(`windowPref -ex gtLCSetupToolWin`) windowPref -r gtLCSetupToolWin;
window -wh 320 450 -t "水手工具箱-老船动画绑定工具"  gtLCSetupToolWin;
columnLayout -adj 1 -w 300 gtBSColumlayout;

text -l "-------------- 版本号：2020.03.24 --------------" -h 25;
rowColumnLayout -nc 4 -cw 1 7 -cw 2 60 -cw 3 180 -cw 4 60;
text -l "";
button -l "关 于" -bgc 0.3 0.2 0.1 -c "Animate8Win;" ;
button -l "访 问 老 船 @ 动 画 吧" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/tag/all\"";
button -l "版 本" -bgc 0.3 0.2 0.1  -c "Animate8VersionWin;" ;
setParent..;
separator -style single  sep1a;

paneLayout -configuration "horizontal2" -paneSize 1 100 83;	
		tabLayout;
		columnLayout -adjustableColumn true "关节权重绑定工具";
		
scrollLayout gtmainBSL;
rowColumnLayout -nc 3 -cw 1  144 -cw 2 2 -cw 3 144;
button -l "FK控制器绑定工具" -c "gtFKConCreateWin;" ;
text -l "";
button -l "IK控制器绑定工具" -c "gtIKConCreateWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "FK单关节绑定工具" -c "gtFKIKConCreateWin;" ;
text -l "";

button -l "簇权重绘制工具" -c "gtClusterWeightPaintWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "替换曲线形态绑定工具" -c "gtReplaceConShpWin;" ;
text -l "";
button -l "簇权重编辑工具" -c "gtClusterDeformToolEditWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "曲线颜色编辑工具" -c "gtcurveColorWin;" ;
text -l "";
button -l "IKFK切换绑定工具" -c "gtIkJointSetupWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "曲线形态缩放绑定工具" -c "gtConScaleWin;" ;
text -l "";
button -l "批量拷贝权重绑定工具" -c "gtCopySkinWeightsWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "关节显示模式绑定工具" -c "gtJointDrawingWin;" ;
text -l "";
button -l "智能选择蒙皮关节工具" -c "gtSelectSkinJointWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "曲线关节绑定工具" -c "gtcurveBoneWin;" ;
text -l "";
button -l "单段IK骨骼拉伸工具" -c "gtsingleBoneIKConWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "样条IK骨骼拉伸工具" -c "gtSimpleSplineIksetupWin;" ;
text -l "";
button -l "IKFK无缝切换绑定工具" -c "gtIkfkAutoSwitchProcWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "ADV绑定工具" -c "ttgRigADVToolsProcWin;" ;
text -l "";
button -l "表情控制框绑定工具" -c "gtfaceSetupWinA;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "批量镜像关节绑定工具" -c "gtMirrorJointToolWin;" ;
text -l "";
button -l "次级扭曲关节绑定工具" -c "gtSecJointsetupWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "样条IK骨骼拉伸绑定工具" -c "gtSplineIksetupWin;" ;
text -l "";
button -l "绘制关节绑定工具" -c "gtDrawJointsWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "删除名字空间工具" -c "gtRemoveNameSpacesWin;" ;
text -l "";
button -l "" -c ";" ;
setParent..;
setParent..;
setParent..;
////////////////
	columnLayout -adjustableColumn true "动画绑定工具";
	scrollLayout gtmainBSL;

rowColumnLayout -nc 3 -cw 1  144 -cw 2 2 -cw 3 144;
button -l "履带链条绑定工具" -c "gtMakeViechleChainWin;" ;
text -l "";
button -l "随机表达式动画工具" -c "gtBoxNoiseWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "混合变形模型镜像工具" -c "gtcgTKabSymMesh;" ;
text -l "";
button -l "批量添加属性绑定工具" -c "gtAddMultiAttrWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "蒙皮修型绑定工具" -c "gtcgTkShapeBuilder;" ;
text -l "";
button -l "替换添加多属性连接工具" -c "gtReplaceConnectOneToAllWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "汽车载具绑定工具" -c "gtVehicleSetUpWin;" ;
text -l "";
button -l "批量连接属性绑定工具" -c "gtConnectOneAttrToAllWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "动画曲线拷贝及镜像工具" -c "gtMirrorAnimCurveProcWin;" ;
text -l "";
button -l "批量属性编辑工具" -c "gtPLAttributeWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "位移延迟表达式工具" -c "gtTrsDelayExpressionWin;" ;
text -l "";
button -l "弹簧生成器绑定工具" -c "gtSpringCreateWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "缩放延迟表达式工具" -c "gtSclDelayExpressionWin;" ;
text -l "";
button -l "批量隐藏显示物体工具" -c "gtShowHideObjWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "毛囊附着表面绑定工具" -c "gtPlaceToModelFollicleWin;" ;
text -l "";
button -l "旋转整合绑定工具" -c "gtRotMasterWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "变换属性编辑工具" -c "gtAttrChannelBoxWin;" ;
text -l "";
button -l "随机摆放物体动画工具" -c "gtRandWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "缩放整合绑定工具" -c "gtSclMasterWin;" ;
text -l "";
button -l "软修改绑定工具" -c "gtSoftDeformToolWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "线变形权重绘制" -c "gtWireWeightPaintWin;" ;
text -l "";
button -l "锁定解锁节点绑定工具" -c "gtLockAndUnlockObjWin;" ;
setParent..;
setParent..;
setParent..;
columnLayout -adjustableColumn true "其它动画工具";
scrollLayout gtmainBSL;

rowColumnLayout -nc 3 -cw 1  144 -cw 2 2 -cw 3 144;
button -l "实体多边形剪切工具" -c "gtCrackMe;" ;
text -l "";
button -l "动力学生长拖尾动画工具" -c "gtGrowTopWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "材质替换工具" -c "gtMaterialReplaceWin;" ;
text -l "";
button -l "粒子轨迹生成曲线工具" -c "gtMakeParticleCurveWin" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "输出模型序列工具" -c "gtOutputSequenceModelWin;" ;
text -l "";
button -l "时间包裹动画工具" -c "gtFrameWarpWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "粒子龙卷风动画工具" -c "gtLJFwin;" ;
text -l "";
button -l "前台渲染工具-老船修改版" -c "gtlxFrontBatchRender;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "动画模型顶点烘焙工具" -c "gtbakepolygonAnimWin;" ;
text -l "";
button -l "简单粒子爆炸动画工具" -c "gtExplosivesWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "灯光创建工具" -c "gtSkyLightWin;" ;
text -l "";
button -l "法线贴图烘焙工具" -c "gtNormalTextureWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "测试渲染动画工具" -c "gtSmartMaterialC;" ;
text -l "";
button -l "物体发射粒子动画工具" -c "gtObjectEmitWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "蒙皮模型UV传递工具" -c "gtUVtransforWin;" ;
text -l "";
button -l "ADV表情控制器替换工具" -c "gtAdvReplaceConProcWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "多边形检查工具" -c "gtMeshCheckWin;" ;
text -l "";
button -l "分段骨骼拉伸工具" -c "gtPartStrechIksetupWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "粒子替换烘焙工具" -c "gtParticleInstanceBakeWin;" ;
text -l "";
button -l "粒子浮雕工具" -c "gtTextureParticleWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "模型动画烘焙工具" -c "gtBakeToBlendShapeWin;" ;
text -l "";
button -l "像素盒子动画工具" -c "gtfakeBrickProcWin;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "粒子灯光工具" -c "gtLiziLightsWin;" ;
text -l "";
button -l "属性移动工具" -c "gtMoveUpDnAttrsProcWin;" ;
setParent..;
setParent..;
setParent..;
showWindow  gtLCSetupToolWin;
}
/////////////////////////////

//////////////////////////////////
global proc Animate8VersionWin(){
if(`window -ex Animate8VersionWin`) deleteUI -window Animate8VersionWin;
if(`windowPref -ex Animate8VersionWin`) windowPref -r Animate8VersionWin;
window -wh 400 270 -t "老船动画吧"  Animate8VersionWin;
columnLayout -adj 1 -w 300 gtBSColumlayout;
button -l "老 船 工 具 箱 下 载" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1511\"";
separator -style single;
text -l "------------------- 老 船 工 具 箱 版 本 说 明 -------------------" -h 30;
scrollLayout -w 400 -h 170;

frameLayout -l "老船工具箱当前版本号：2019-1-1" -collapsable 1 -collapse 0 -w 380;
columnLayout -adj 1  ;
text -l "" -h 10;
text -l "   1、新增绑定工具：\n      蒙皮模型UV传递工具、adv工具集：\n      包括adv瞪眼幅度工具、adv嘴角簇层级工具、\n      adv眼睛次级驱动组工具、adv测试版文件生成工具。" -al "left";
text -l "" -h 10;
text -l "   2、原有工具更新：\n      蒙皮修型绑定工具：新增加了目标模型生成工具。" -al "left" ;
text -l "" -h 10;

setParent..;
setParent..;

frameLayout -l "老船工具箱当前版本号：2017-6-25" -collapsable 1 -collapse 1 -w 380;
columnLayout -adj 1  ;
text -l "" -h 10;
text -l "   1、新增绑定工具：\n      软修改绑定工具、线变形权重绘制工具、\n      节点锁定-解锁绑定工具、关节绘制工具、\n      测试渲染动画工具、物体发射粒子动画工具。" -al "left";
text -l "" -h 10;
text -l "   2、原有工具更新：\n      履带链条绑定工具：新增加了履带配套齿轮绑定工具、\n      常规齿轮绑定工具、履带链条单关节创建工具。\n      蒙皮修型绑定工具：新增加了过渡形态修型功能、\n      精确定位目标索引序号功能，创建混合变形节点功能。" -al "left" ;
text -l "" -h 10;

setParent..;
setParent..;

frameLayout -l "老船工具箱当前版本号：2017-3-25" -collapsable 1 -collapse 1 -w 380;
columnLayout -adj 1  ;
text -l "" -h 10;
text -l "   1、新增绑定工具：\n      动画模型顶点烘焙工具、简单粒子爆炸工具、\n      灯光创建工具、法线贴图烘焙工具、\n      缩放整合绑定工具。" -al "left";
text -l "" -h 10;
text -l "   2、原有工具更新：\n      无" -al "left" ;
text -l "" -h 10;

setParent..;
setParent..;

frameLayout -l "老船工具箱当前版本号：2016-12-01" -collapsable 1 -collapse 1 -w 380;
columnLayout -adj 1  ;
text -l "" -h 10;
text -l "   1、新增绑定工具：\n      样条IK骨骼拉伸绑定工具、次级扭曲关节绑定工具、\n      变换属性编辑工具、随机摆放物体动画工具。" -al "left";
text -l "" -h 10;
text -l "   2、修正工具BUG：\n      无" -al "left" ;
text -l "" -h 10;

setParent..;
setParent..;

frameLayout -l "老船工具箱当前版本号：2016-11-01" -collapsable 1 -collapse 1 -w 380;
columnLayout -adj 1  ;
text -l "" -h 10;

text -l "   1、新增绑定工具：\n      表情控制框绑定工具、批量镜像关节绑定工具、\n      缩放延迟表达式工具、批量隐藏显示物体工具、\n      毛囊附着表面绑定工具、旋转整合工具。" -al "left";
text -l "" -h 10;
text -l "   2、修正工具BUG：\n      蒙皮修型工具：增加镜像控制器指定功能，修正修型镜像问题；\n      IKFK无缝切换工具：修正参考绑定文件切换属性不触发的问题。" -al "left" ;
text -l "" -h 10;

setParent..;
setParent..;

setParent..;
separator -style single;
rowColumnLayout -nc 7 -cw 1 98 -cw 2 3 -cw 3 98 -cw 4 2 -cw 5 98 -cw 6 3 -cw 7 98;
button -l "老船角色" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/category/resource/rigging\"";
text -l "";
button -l "老船资讯" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/category/study/video\"";
text -l "";
button -l "老船微博" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://weibo.com/animate8\"";
text -l "";
button -l "老船课堂" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://animate8.ke.qq.com\"";

setParent..;


separator -style single  sep1a;

showWindow  Animate8VersionWin;		
}
////////////////////////////////
global proc Animate8Win(){
if(`window -ex Animate8Win`) deleteUI -window Animate8Win;
if(`windowPref -ex Animate8Win`) windowPref -r Animate8Win;

window -wh 400 250 -t "老船动画吧"  Animate8Win;

columnLayout -adj 1 -w 300 gtBSColumlayout;
button -l "老 船 绑 定 DEMO" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/category/work/demo\"";

separator -style single;
text -l "" -h 15;
text -l "观看老船最新绑定DEMO，请点击上方按钮↑↑↑↑↑" -h 30 ;
text -l "专业承接MAYA角色绑定项目，欢迎咨询洽谈。" -h 30 ;
text -l "咨询QQ: 626186827" -h 30 ;
text -l "老船官方交流群: 130930540" -h 30 ;
text -l "访问老船动画吧官网、官微，获取更多老船资讯↓↓↓↓↓" -h 30 ;
text -l "" -h 15;
separator -style single;
rowColumnLayout -nc 7 -cw 1 98 -cw 2 3 -cw 3 98 -cw 4 2 -cw 5 98 -cw 6 3 -cw 7 98;
button -l "老船角色" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/category/resource/rigging\"";
text -l "";
button -l "老船资讯" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/category/study/video\"";
text -l "";
button -l "老船微博" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://weibo.com/animate8\"";
text -l "";
button -l "老船课堂" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://animate8.ke.qq.com\"";

setParent..;
separator -style single  sep1a;

showWindow  Animate8Win;		
}
////////////////////////////////
global proc gtCrackMe()
{
           string $window = "crackMeWindow";
	if (`window -q -ex $window`) deleteUI $window;

	window -w 350 -h 325 -title "老船角色绑定-☆-实体多边形剪切工具！" $window;
 columnLayout -adjustableColumn true ;
    text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/854\"";
         text -align "left" "步骤一:";
         text -align "left" "选择实体多边形物体，创建剪切平面物体";
          $strNumSplitsField = `intFieldGrp
                -width 300
		-columnWidth2 105 30
		-columnAttach2 "both" "both"
		-columnOffset2 3 0
		-columnAlign2 "right" "left"
		-label "剪切平面物体段数:"
		-numberOfFields 1
		-value1 25
		-enable1 1
		numOfDivs`;
          

         button -label "创建剪切平面物体" -c createPlane;
         
         text -align "left" "剪切平面物体的名称不是：carvingPlane,时\n点击重命名按钮";

        button -label "重命名剪切平面物体"  -c carvePlaneRename;

         text -align "left" "步骤二:";
         text -align "left" "选择实体多边形物体，进行剪切";
         checkBox -l "删除剪切平面" -v 0 gtCutPlane;

         button -label "剪切选择物体" -c crackMeCode;

                separator -h 10;

         columnLayout -adjustableColumn true;
         text -align "left" -label "当前选择物体将被剪切";
			textField -editable false currentObjectToCrackField;

                             setParent..;
                             setParent..;
                             setParent..;
showWindow $window;
}
/////////////////////////////////////////////////////////////////////////////////////////
global proc carvePlaneRename(){

   string $selected[] = `ls -sl`;
   rename $selected[0] carvingPlane; 

}
/////////////////////////////////////////////////////////////////////////////////////////
global proc crackMeCode()
{
 //query polygonal object and plane
 string $select[] = `ls -sl`;
 string $plane = "carvingPlane";
    int $cutPlane=`checkBox -q -v gtCutPlane`;

 if ($select[0] == "")
 {
   warning "请选择多边形物体";
 }
 else
 {

  //duplicate for booleans

  select -r $select[0];
  string $duplicateObject[] = `duplicate -rr`;
if($cutPlane==0){
      select -r $plane;
      duplicate -rr;
      rename ($plane+"temp");
}
  select -r $plane;
  string $duplicatePlane[] = `duplicate -rr`;

  //inverse the normals on the second plane
  polyNormal -normalMode 3 -ch 1 $duplicatePlane[0];

  //boolean the object
  string $boolean1[] = `polyBoolOp -op 3 -ch 1 -useThresholds 1 $select[0] $plane`;
  string $boolean2[] = `polyBoolOp -op 3 -ch 1 -useThresholds 1 $duplicateObject[0] $duplicatePlane[0]`;
  
  //delete history and center pivot on new objects
    select -r $boolean1[0];
    delete -ch;
    CenterPivot;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
    
    select -r $boolean2[0];
    delete -ch;
    CenterPivot;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
    if($cutPlane==0){
      select -r ($plane+"temp");
      rename $plane;
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////////
global proc createPlane()
{
   string $select[] =`ls -sl`;
   if ($select[0] == "")
   {
     warning "请选择多边形物体";
   }else
   {
   //query the object selected for menu
        string $currentBaseMesh = `textField -q -text currentObjectToCrackField`;
        string $currentSelXform[] = `ls -sl`;
	string $currentSelShape[] = `listRelatives -shapes $currentSelXform[0]`;
	
	if ($currentSelXform[1] != "")
	{
		warning "请选择多边形物体";
	} else
		{
			if (`objectType $currentSelShape[0]` != "mesh")
			{
				warning "请选择多边形物体，不支持NURBS曲面和细分物体";
			} else
				{
					textField -edit -tx $currentSelXform[0] currentObjectToCrackField;
					print ($currentSelXform[0] + " was loaded as the base mesh.\n");
				}
		}

    //create plane at selected object
    string $getType[] = `listRelatives -path -s $select[0]`;

    if (!`objectType -isType "mesh" $getType[0]`)
    {
      warning "请选择多边形物体，不支持NURBS曲面和细分物体";
    }
    else
    {
          //get int from text field for plane
        int $divisionsFromTextField = `intFieldGrp -q -value1 numOfDivs`;
//        int $sizeFromTextField = `intFieldGrp -q -value1 planeSize`;
        float $bbmin[]=`getAttr ($select[0]+".boundingBoxMin")`;
        float $bbmax[]=`getAttr ($select[0]+".boundingBoxMax")`;
        float $lxx=$bbmax[0]-$bbmin[0];
        float $lyy=$bbmax[1]-$bbmin[1];
        float $lzz=$bbmax[2]-$bbmin[2];
        float $sizeFromTextField;
        if($lxx>=$lyy){
            $sizeFromTextField=$lxx;
        }else{
             $sizeFromTextField=$lyy;
        }
        if($sizeFromTextField<=$lzz)$sizeFromTextField=$lzz;
        $sizeFromTextField=$sizeFromTextField*1.5;
    
        string $plane[] = `polyPlane -w $sizeFromTextField -h $sizeFromTextField -sx $divisionsFromTextField -sy $divisionsFromTextField -ax 0 1 0 -cuv 1 -ch 1 -n carvingPlane`;

        float $worldSpace[] = `xform -q -ws -rp $select[0]`;
        setAttr ($plane[0] + ".translateX") $worldSpace[0];
        setAttr ($plane[0] + ".translateY") $worldSpace[1];
        setAttr ($plane[0] + ".translateZ") $worldSpace[2];

        select -r $plane[0];
        delete -ch;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        select -cl;
        select -r $plane[0];
    }
  }
}
/////////////////////////////////////////////////////////////
//路径生长动力学动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////

global proc gtGrowTopWin(){
if(`window -ex gtGrowTopWin`==1){ deleteUI -window gtGrowTopWin;}
window -wh 400 500 -title "老船角色绑定-☆-路径生长动力学动画工具！！" gtGrowTopWin;
columnLayout -adj 1 gtMaintColumnLay;
text -l "点击下方按钮↓↓↓↓↓" texta1;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/931\"";
text -l "生长动画+路径动画+动力学解算动画\n--------------请注意本程序需要手动选择所有路径曲线------------" text1;

separator -st  single sep1;
button -l "点击按钮打开生成曲线窗口"  -c "gtMakeParticleCurveWin" butCurve;
separator -st  single sep2;

textFieldButtonGrp -cw3 80 200 65 -l (" 名        字：") -text "name" -bl "载      入" -bc "gtloadName;" gtTextField;
textFieldButtonGrp -cw3 80 200 65 -l (" 路径动画物体:") -text "动画物体" -bl   "载    入" -bc "gtloadNamea;" gtTextFielda;
textFieldButtonGrp -cw3 80 200 65 -l (" 生长界面曲线：") -text "挤压界面" -bl   "载    入" -bc "gtloadNameb" gtTextFieldb;

formLayout -h 300 gtform;
intFieldGrp -l "开始/结束中心帧" -nf 2 -v1 10 -v2 120 gtIntFa;
intFieldGrp -l "开始/结束随机范围帧" -nf 2 -v1 10 -v2 10 gtIntFb;
floatFieldGrp -l "随即缩放" -nf 2 -v1 1 -v2 1 gtIntFc;
button -l "整体缩放" -c "gtGrowScaleAll;" but2;
button -l "选择缩放" -c "gtGrowScaleSelected;" but3;
checkBox -l "     飘     动" -v 0 chbF;

//setParent..;
//columnLayout -adj 1 gtSoftCol;
floatFieldGrp -l "扰乱场强度随机范围" -nf 2 -v1 3 -v2 5 gtIntsFa;
floatFieldGrp -l "扰乱场相位表达式随机" -nf 2 -v1 0.5 -v2 1 gtIntsFb;
floatFieldGrp -l "扰乱场相频率随机" -nf 2 -v1 0.5 -v2 1.5 gtIntsFc;

button -l "应用" -c "gtGrowTop;" but1;

formLayout -e
-af gtIntFa left 3 -af gtIntFa top 5  -af gtIntFa right 3
-af gtIntFb left 3 -af gtIntFb right 3 -ac gtIntFb top 5 gtIntFa 
-af gtIntFc left 3 -af gtIntFc right 3 -ac gtIntFc top 5 gtIntFb 
-af but2 left 3 -ap but2 right 0 50 -ac but2 top 5 gtIntFc
-ac but3 left 3 but2 -af but3 right 3 -ac but3 top 5 gtIntFc

-af chbF left 144 -af chbF right 3 -ac chbF top 5  but2 
-af gtIntsFa left 3 -af gtIntsFa right 3 -ac gtIntsFa top 5 chbF  
-af gtIntsFb left 3 -af gtIntsFb right 3 -ac gtIntsFb top 5 gtIntsFa 
-af gtIntsFc left 3 -af gtIntsFc right 3 -ac gtIntsFc top 5 gtIntsFb
-af but1 left 3 -af but1 right 3 -ac but1 top 5 gtIntsFc  gtform;
setParent..;
showWindow gtGrowTopWin;
}
///////////////////////////////////////
global proc gtloadNamea(){
string $sel[]=`ls -sl`;
textFieldButtonGrp -e -tx $sel[0] gtTextFielda;
}

global proc gtloadNameb(){
string $sel[]=`ls -sl`;
textFieldButtonGrp -e -tx $sel[0] gtTextFieldb;}

global proc gtloadName(){
string $sel[]=`ls -sl`;

string $num[];
int $n=`tokenize $sel[0] "_" $num`;
string $nn=$num[0];
textFieldButtonGrp -e -tx $nn gtTextField;
}

/////////////////////////////////////////
global proc gtGrowScaleSelected(){
    
string $sel[]=`ls -sl`;
string $name=`textFieldButtonGrp -q -tx gtTextField`;
  $name=($name+"_");

float $sclMin=`floatFieldGrp -q -v1 gtIntFc`;
float $sclMax=`floatFieldGrp -q -v2 gtIntFc`;

 for($i=0;$i<size($sel);$i++){
     float $scl=rand($sclMin,$sclMax);
     select -r ($sel[$i]);
     scale $scl $scl $scl;
     }    
}
/////////////////////
global proc gtGrowScaleAll(){
string $name=`textFieldButtonGrp -q -tx gtTextField`;
  $name=($name+"_");
float $sclMin=`floatFieldGrp -q -v1 gtIntFc`;
float $sclMax=`floatFieldGrp -q -v2 gtIntFc`;


 select -r ($name+"motionPOjbGrp"); 
 string $proG[]=`ls -sl`;
 string $profile[]=`listRelatives -c -fullPath  $proG[0]`;
 
   select -r ($name+"profileGrp"); 
 string $objG[]=`ls -sl`;
 string $objGrp[]=`listRelatives -c -fullPath  $objG[0]`;
 
 
 for($i=0;$i<size($profile);$i++){
     float $scl=rand($sclMin,$sclMax);
     select -r ($profile[$i]);
     scale $scl $scl $scl;
     select -r ($objGrp[$i]);
     scale $scl $scl $scl;     
     }    
}

///////////////////////////////////////////////////

global proc gtGrowTop(){

string $name=`textFieldButtonGrp -q -tx gtTextField`;
$name=($name+"_");

string $pathObj=`textFieldButtonGrp -q -tx gtTextFielda`;
string $pathProfile=`textFieldButtonGrp -q -tx gtTextFieldb`;

int $start=`intFieldGrp -q -v1 gtIntFa`;
int $end=`intFieldGrp -q -v2 gtIntFa`;
float $sclMin=`floatFieldGrp -q -v1 gtIntFc`;
float $sclMax=`floatFieldGrp -q -v2 gtIntFc`;

int $startR=`intFieldGrp -q -v1 gtIntFb`;
int $endR=`intFieldGrp -q -v2 gtIntFb`;

int $pd=`checkBox -q -v chbF`;

string $sel[]=`ls -sl`;
string $type="";
int $size=size($sel);

for($i=0;$i<$size;$i++){
string $shape[]=`listRelatives -s ($sel[$i])`;
int $ss=size($shape);
if($ss==1)$type=`nodeType ($shape[0])`;
if($size==0||$type!="nurbsCurve")error "选择的物体必须全部是曲线";
}
group -em -n ($name+"motionPOjbGrp"); 
group -em -n ($name+"motionCurveGrp"); 
group -em -n ($name+"extrudeOjbGrp"); 
group -em -n ($name+"profileGrp"); 

select -r ($name+"motionPOjbGrp"); 
select -add ($name+"motionCurveGrp"); 
select -add ($name+"extrudeOjbGrp"); 
select -add ($name+"profileGrp");
select -add $pathObj;
select -add $pathProfile;
group  -n ($name+"Grp"); 

addAttr -ln "tailLength"  -at double -min 1 -dv 48  -k 1 ($name+"Grp");

addAttr -ln "grow_edit"  -at bool   -dv 0  -k 1 ($name+"Grp");
addAttr -ln "grow_startCenter"  -at double  -min 0 -max 10000 -dv $start  -k 1 ($name+"Grp");
addAttr -ln "grow_startRange"  -at double  -min 0 -max 10000 -dv $startR  -k 1 ($name+"Grp");

addAttr -ln "grow_endCenter"  -at double  -min 0 -max 10000 -dv $end  -k 1 ($name+"Grp");
addAttr -ln "grow_endRange"  -at double  -min 0 -max 20000 -dv $endR  -k 1 ($name+"Grp");

addAttr -ln "scale_frofile"  -at double  -min 0 -max 2000 -dv 1  -k 1 ($name+"Grp");
addAttr -ln "field_ball"  -at double  -min 0 -max 2000 -dv 1  -k 1 ($name+"Grp");


for($i=0;$i<$size;$i++){
int $ss=rand(($start-$startR),($start+$startR));
int $ee=rand(($end-$endR),($end+$endR));

select -r ($sel[$i]+".cv[0:10000]") ;
string $vt[]=`ls -sl`;
string $num[];
int $n=`tokenize $vt[0] ":" $num`;
string $nn=$num[1];
string $nu[];
int $n=`tokenize $nn "]" $nu`;
string $nnn=$nu[0];
int $sss=$nnn;
if($sss>3){
rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($sss-2)   -d 3 -tol 0.01 ($sel[$i]);

select -r ($sel[$i]);
select -add ($name+"motionCurveGrp"); 
parent;

float $scl=rand($sclMin,$sclMax);
select -r $pathObj;
duplicate -rr -n ($name+"po"+$i);
select -r ($name+"po"+$i);
makeIdentity -apply true -t 1 -r 0 -s 0 -n 0;
select -add ($name+"motionPOjbGrp"); 
parent;

setAttr ($name+"po"+$i+".sx") $scl;
setAttr ($name+"po"+$i+".sy") $scl;
setAttr ($name+"po"+$i+".sz") $scl;

select -r ($name+"po"+$i);
select -add ($sel[$i]);
string $pathA=`pathAnimation -fractionMode true -follow true -followAxis x -  upAxis y 
-worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false 
-inverseFront false -bank false -startTimeU ($ss) -endTimeU ($ee)`;
select -r $pathA;
rename ($name+"_motionP"+$i);
string $anmi[]=`listConnections -s 1 -d 0 ($name+"_motionP"+$i+".uValue")`;
select -r ($anmi[0]);
rename ($name+"_motionPath"+$i);

select -r ($pathProfile);
duplicate -rr -n ($sel[$i]+"profile");
select -r ($sel[$i]+"profile");
makeIdentity -apply true -t 1 -r 0 -s 0 -n 0;
select -add ($name+"profileGrp");
parent;
setAttr ($sel[$i]+"profile.sx") $scl;
setAttr ($sel[$i]+"profile.sy") $scl;
setAttr ($sel[$i]+"profile.sz") $scl;

string $extrude[]=`extrude -ch true -rn true -po 0 -et 2 -ucp 1 -fpt 1 -upn 1   -rotation 0 
-scale 1 -rsp 1 ($sel[$i]+"profile") ($sel[$i])`;

select -r $extrude[0];
rename ($name+"_extrudeSurf"+$i);
select -r ($name+"_extrudeSurf"+$i);
select -add ($name+"extrudeOjbGrp"); 
parent;

select -r $extrude[1];
rename ($name+"_extrude"+$i);
string $subCurve[]=`listConnections -s 1 -d 0 ($name+"_extrude"+$i+".path")`;
select -r ($subCurve[0]);
rename ($name+"_suvCurve"+$i);

select -r ($name+"_motionP"+$i);

selectKey -r -k -index 0 ($name+"_motionPath"+$i);
keyframe -animation keys -absolute -valueChange 0.0001 ;

connectAttr -f ($name+"_motionP"+$i+".uValue") ($name+"_suvCurve"+$i  +".maxValue");

string $expgrow="";
        $expgrow+="float $state=`getAttr ";
        $expgrow+=($name+"Grp");
        $expgrow+=".grow_edit`;\n";
         $expgrow+="if(frame==1&&$state==1){\n";
        $expgrow+="float $s=`getAttr ";
        $expgrow+=($name+"Grp");
        $expgrow+=".grow_startCenter`;\n";
        $expgrow+="float $sr=`getAttr ";
        $expgrow+=($name+"Grp");
        $expgrow+=".grow_startRange`;\n";
        $expgrow+="float $e=`getAttr ";
        $expgrow+=($name+"Grp");
        $expgrow+=".grow_endCenter`;\n";
        $expgrow+="float $er=`getAttr ";
        $expgrow+=($name+"Grp");
        $expgrow+=".grow_endRange`;\n";
        $expgrow+="int $ss=rand(($s-$sr),($s+$sr));\n";
        $expgrow+="int $ee=rand(($e-$er),($e+$er));\n";
        $expgrow+="selectKey -r -k -index 0 ";
        $expgrow+=($name+"_motionPath"+$i);
        $expgrow+=";\nkeyframe -animation keys -absolute -timeChange $ss ;\n";
        $expgrow+="selectKey -r -k -index 1 ";
        $expgrow+=($name+"_motionPath"+$i);
        $expgrow+=";\nkeyframe -animation keys -absolute -timeChange $ee ;}";
               
expression  -s $expgrow -o "" -ae 1 -uc all  -n ($name+"expgrow"+$i);
string $expgrow="";
    $expgrow+="float $delay="+$name+"Grp.tailLength;\n";
    $expgrow+="float $t=`currentTime -q `;\n";
    $expgrow+="float $v=`getAttr -t ($t-$delay) "+$name+"_suvCurve"+$i+".maxValue`;\n";
    $expgrow+=$name+"_suvCurve"+$i+".minValue=$v;\n";
expression  -s $expgrow -o "" -ae 1 -uc all  -n ($name+"expgrowTail"+$i);
}
else{
delete ($sel[$i]);
    }
}

if($pd==1){
group -em -n ($name+"softBodyCurveGrp"); 
group -em -n ($name+"softBodyFieldGrp"); 
group -em -n ($name+"softBodySpringGrp"); 
group -em -n ($name+"softBodyLocGrp"); 
select -r ($name+"softBodyCurveGrp");
select -add ($name+"softBodyFieldGrp"); 
select -add ($name+"softBodySpringGrp"); 
select -add ($name+"softBodyLocGrp"); 
select -add ($name+"Grp"); 
parent;

float $pdMin=`floatFieldGrp -q -v1 gtIntsFa`;
float $pdMax=`floatFieldGrp -q -v2 gtIntsFa`;
float $xwMin=`floatFieldGrp -q -v1 gtIntsFb`;
float $xwMax=`floatFieldGrp -q -v2 gtIntsFb`;
float $plMin=`floatFieldGrp -q -v1 gtIntsFc`;
float $plMax=`floatFieldGrp -q -v2 gtIntsFc`;

addAttr -ln "part_conserve"  -at double  -min 0 -max 1 -dv 0.98  -k 1 ($name+"Grp");
addAttr -ln "part_goalPP"  -at double  -min 0 -max 1 -dv 0  -k 1 ($name+"Grp");

addAttr -ln "field_magnitudeMin"  -at double  -min 0 -max 100 -dv $pdMin  -k 1 ($name+"Grp");
addAttr -ln "field_magnitudeMax"  -at double  -min 0 -max 200 -dv $pdMax  -k 1 ($name+"Grp");

addAttr -ln "field_phaseMin"  -at double  -min 0 -max 200 -dv $xwMin  -k 1 ($name+"Grp");
addAttr -ln "field_phaseMax"  -at double  -min 0 -max 200 -dv $xwMax  -k 1 ($name+"Grp");

addAttr -ln "field_frequenceMin"  -at double  -min 0 -max 10 -dv $plMin  -k 1 ($name+"Grp");
addAttr -ln "field_frequenceMax"  -at double  -min 0 -max 20 -dv $plMax  -k 1 ($name+"Grp");

setAttr ($name+"softBodyLocGrp.visibility") 0;
setAttr -lock true ($name+"softBodyLocGrp.v");

int $s=size($sel);

for($i=0;$i<$s;$i++){

select -r ($sel[$i]);
dynCreateSoft 1 0 1 1 0;
select -r ($sel[$i]);
pickWalk -d down;
pickWalk -d left;
string $softP[]=`ls -sl`;

spaceLocator -p 0 0 0 -n ($sel[$i]+"loc");
select -r ($name+"po"+$i);
select -add ($sel[$i]+"loc");
pointConstraint;

string $exp="";
	$exp+="float $goalP=`getAttr ";
	$exp+=($name+"Grp");
	$exp+=".part_goalPP`;\n";
	$exp+="float $p[]=`getAttr ";
	$exp+=($sel[$i]+"loc");
	$exp+=".translate`;\n";
	$exp+="float $dis=mag(worldPosition-<<$p[0],$p[1],$p[2]>>);\n";
	$exp+="if($dis<1)goalPP=$goalP;\n";
select -r $softP[0];
dynExpression -s ($exp) -rad ($softP[0]);

select -r $softP[0];
turbulence -pos 0 0 0 -m 1 -att 0 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($sel[$i]+"tbl");
connectDynamic -f ($sel[$i]+"tbl")  ($softP[0]);

string $expF="";
	$expF+="float $conserve=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".part_conserve`;\n";
	$expF+="float $fmMin=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".field_magnitudeMin`;\n";
	$expF+="float $fmMax=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".field_magnitudeMax`;\n";

	$expF+="float $fpMin=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".field_phaseMin`;\n";
	$expF+="float $fpMax=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".field_phaseMax`;\n";

	$expF+="float $ffMin=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".field_frequenceMin`;\n";
	$expF+="float $ffMax=`getAttr ";
	$expF+=($name+"Grp");
	$expF+=".field_frequenceMax`;\n";
	$expF+="float $fm=rand($fmMin,$fmMax);\n";
	$expF+="float $fp=rand($fpMin,$fpMax);\n";
	$expF+="float $ff=rand($ffMin,$ffMax);\n";

	$expF+=($sel[$i]+"tbl");
	$expF+=".phaseX=time*$fp;\n";
			
	$expF+=($softP[0]);
	$expF+=".conserve=$conserve;\n";
	
	$expF+=($sel[$i]+"tbl");
	$expF+=".frequency=$ff;\n";
	
	$expF+=($sel[$i]+"tbl");
	$expF+=".magnitude=$fm;\n";

select -r ($sel[$i]+"tbl");
expression -s ($expF)  -o ($sel[$i]+"tbl") -ae 1 -uc all -n ($sel[$i]+"expF") ;
select -r $softP[0];
spring -noDuplicate false -wireframe true -wl 2 -useRestLengthPS true -s 200 -d 0.5 -sfw 1 -efw 1 -n ($sel[$i]+"spring");

select -r $sel[$i];
select -add ($name+"softBodyCurveGrp");
parent;

select -r ($sel[$i]+"spring");
select -add ($name+"softBodySpringGrp"); 
parent;

select -r ($sel[$i]+"tbl");
select -add ($name+"softBodyFieldGrp"); 
parent;

select -r ($sel[$i]+"loc");
select -add ($name+"softBodyLocGrp"); 
parent;
        }
    }
}
////////////////////////////////////////////////////////////////////////////
global proc gtMakeParticleCurveWin(){
if(`window -ex gtMakeParticleCurveWin`==1){ deleteUI -window   gtMakeParticleCurveWin;}
window -wh 650 600 -title "使用粒子生成曲线" gtMakeParticleCurveWin;
columnLayout -adj 1 gtMaintColumnLay;
text -l "" texta;
text -l "使用粒子生成曲线\n--------------请注意本程序需要将已经有的表达式复制到下面对于文本框中------------" text1;
separator -st  single sep1;
text -l "需要将已有的-创建时-表达式复制到下面的文本框中" gttextF1;
scrollField -h 60 -w 100 -text ""gtsfield1 ;

text -l "需要将已有的-运行时之后-表达式复制到下面的文本框中，运行时之前-表达式不需要考虑：" gttextF2;
scrollField -h 60 -w 100 -text ""gtsfield2 ;

intFieldGrp -l "开始/结束帧" -nf 2 -v1 1 -v2 120 gtIntrangeFa;

separator -st  single sep2;
button -l "生成曲线" -c "gtMakeParticleCurve" but1;
showWindow gtMakeParticleCurveWin;

}

///////////////////////////////
global proc gtMakeParticleCurve(){
string $creation=`scrollField -q -tx gtsfield1`;
string $runtime=`scrollField -q -tx gtsfield2`;

int $start=`intFieldGrp -q -v1  gtIntrangeFa`;
int $end=`intFieldGrp -q -v2  gtIntrangeFa`;

string $sel[]=`ls -sl`;
string $creationE=$creation;

$creationE+="\nint $id=particleId;\n";
$creationE+="vector $pos=position;\n";
$creationE+="curve -d 3 -p ($pos.x) ($pos.y) ($pos.z) -n (\"";
$creationE+=($sel[0]);
$creationE+="_gtCurve\"+$id);\n";

string $runtimeE=$runtime;

$runtimeE+="int $id=particleId;\n";
$runtimeE+="vector $pos=position;\n";
$runtimeE+="curve -a  -p ($pos.x) ($pos.y) ($pos.z) (\"";
$runtimeE+=($sel[0]);
$runtimeE+="_gtCurve\"+$id);\n";
dynExpression -s ($creationE) -c ($sel[0]);
dynExpression -s  ($runtimeE) -rad ($sel[0]);

for($i=$start;$i<($end+1);$i++){
currentTime -e $i;
}
dynExpression -s ($creation) -c ($sel[0]);
dynExpression -s  ($runtime) -rad ($sel[0]);
}
/////////////////////////////////////////////////////////////
//材质替换工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
//此脚本程序是简易版，后续老船角色绑定工作室会继续完善其为升级版。
//敬请关注老船动画吧
//////////////

global proc gtMaterialReplaceWin(){
   if(`window -ex gtMaterialReplaceWin`) deleteUI -window gtMaterialReplaceWin;
    window -wh 600 200 -t "老船角色绑定-☆-不同材质类型批量替换工具！！" gtMaterialReplaceWin;
    columnLayout -adj 1 mainColumnattrma;
    text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/940\"";

    formLayout  gtCOTAFma;
   
    textFieldGrp -l "载入准备好的材质球名称：" -text "可以手动输入材质球名字" gtLoadMaterialObj;
    button  -l "载入材质球节点" -c "ttgLaodMatreialObjNamProc" but2;
    checkBox -l "删除原始材质球" -v 0 gtMaterialOld;
    button  -l "替换指定材质" -c "gtMaterialRemap" but2a;
    formLayout -e    
    -af gtLoadMaterialObj left 5 -af gtLoadMaterialObj top 10 -ap gtLoadMaterialObj right 2 70
    -ac but2 left 5 gtLoadMaterialObj -af but2 top 10 -af but2 right 10 
    -af gtMaterialOld left 5 -ac gtMaterialOld top 5 but2 -ap gtMaterialOld right 10 50
    -ac but2a left 5 gtMaterialOld -ac but2a top 5 but2  -af but2a right 10    
    
    gtCOTAFma;     
    showWindow gtMaterialReplaceWin;   
}
////////////////////
global proc ttgLaodMatreialObjNamProc(){

string $sel[]=`ls -sl`;
string $teststring=$sel[0];
$gtCname=$teststring;
textFieldGrp  -e -text $gtCname gtLoadMaterialObj;
}
////////////////////
global proc gtMaterialRemap(){
string $sel[] = `ls -sl`;
int $n = size($sel);
string $map[];
string $aiShader[];
    string $material=`textFieldGrp -q -tx gtLoadMaterialObj`;
    int $oldM=`checkBox -q -v gtMaterialOld`;

int $ex=`objExists ($material)`;
if($ex==0)error "指定的材质不存在，请从新载入材质节点名称";
for( $i=0; $i<$n; $i++ ){    

        select -r $material ;duplicate -rr;$aiShader = `ls -sl`;
    
        int $ex=`objExists ($aiShader[0]+".color")`;
        int $oldex=`objExists ($sel[$i]+".color")`;
        if($ex==1&&$oldex==1){
        string $map[]=  `listConnections -source 1 -destination 0 ($sel[$i]+".color")`;
        int $ex=`objExists ($map[0])`;
        if($ex==1){
        connectAttr -force ($map[0]+".outColor") ($aiShader[0]+".color");
        }else{
        float $color[]=`getAttr ($sel[$i]+".color")`;
        setAttr ($aiShader[0]+".color") ($color[0]) ($color[1]) ($color[2]);
            }
        }
        //////////////////////////
        int $ex=`objExists ($aiShader[0]+".transparency")`;
        int $oldex=`objExists ($sel[$i]+".transparency")`;
        if($ex==1&&$oldex==1){
        string $map[]=  `listConnections -source 1 -destination 0 ($sel[$i]+".transparency")`;
        int $ex=`objExists ($map[0])`;
        if($ex==1){
        connectAttr -force ($map[0]+".outColor") ($aiShader[0]+".transparency");
        }else{
        float $color[]=`getAttr ($sel[$i]+".transparency")`;
        setAttr ($aiShader[0]+".transparency") ($color[0]) ($color[1]) ($color[2]);
            }
        }
         //////////////////////////
        int $ex=`objExists ($aiShader[0]+".ambientColor")`;
        int $oldex=`objExists ($sel[$i]+".ambientColor")`;
        if($ex==1&&$oldex==1){
        string $map[]=  `listConnections -source 1 -destination 0 ($sel[$i]+".ambientColor")`;
        int $ex=`objExists ($map[0])`;
        if($ex==1){
        connectAttr -force ($map[0]+".outColor") ($aiShader[0]+".ambientColor");
        }else{
        float $color[]=`getAttr ($sel[$i]+".ambientColor")`;
        setAttr ($aiShader[0]+".ambientColor") ($color[0]) ($color[1]) ($color[2]);
            }
        }
         //////////////////////////
        int $ex=`objExists ($aiShader[0]+".incandescence")`;
        int $oldex=`objExists ($sel[$i]+".incandescence")`;
        if($ex==1&&$oldex==1){
        string $map[]=  `listConnections -source 1 -destination 0 ($sel[$i]+".incandescence")`;
        int $ex=`objExists ($map[0])`;
        if($ex==1){
        connectAttr -force ($map[0]+".outColor") ($aiShader[0]+".incandescence");
        }else{
        float $color[]=`getAttr ($sel[$i]+".incandescence")`;
        setAttr ($aiShader[0]+".incandescence") ($color[0]) ($color[1]) ($color[2]);
            }
        }
         //////////////////////////
        int $ex=`objExists ($aiShader[0]+".normalCamera")`;
        int $oldex=`objExists ($sel[$i]+".normalCamera")`;
        if($ex==1&&$oldex==1){
        string $map[]=  `listConnections -source 1 -destination 0 ($sel[$i]+".normalCamera")`;
        int $ex=`objExists ($map[0])`;
        if($ex==1){
        connectAttr -force ($map[0]+".outNormal") ($aiShader[0]+".normalCamera");
            }
        }                
        hyperShade -objects $sel[$i];
        hyperShade -assign $aiShader[0];
        if($oldM==1)delete $sel[$i];
        print $i;print "  ";print $map[0];print "  ";print $aiShader[0];print "\n";
    }
}
/////////////////////////////
//粒子轨迹生成曲线动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
global proc gtMakeParticleCurveWin(){
if(`window -ex gtMakeParticleCurveWin`==1){ deleteUI -window   gtMakeParticleCurveWin;}
window -wh 650 600 -title "老船角色绑定-☆-粒子轨迹曲线生成工具！" gtMakeParticleCurveWin;
columnLayout -adj 1 gtMaintColumnLay;
 text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/998\"";

text -l "使用粒子生成曲线\n--------------请注意本程序需要将已经有的表达式复制到下面对于文本框中------------" text1;
separator -st  single sep1;
text -l "需要将已有的-创建时-表达式复制到下面的文本框中" gttextF1;
scrollField -h 60 -w 100 -text ""gtsfield1 ;

text -l "需要将已有的-运行时之后-表达式复制到下面的文本框中:\n运行时之前-表达式不需要考虑：" gttextF2;
scrollField -h 60 -w 100 -text ""gtsfield2 ;

intFieldGrp -l "开始/结束帧" -nf 2 -v1 1 -v2 120 gtIntrangeFa;

separator -st  single sep2;
button -l "生成曲线" -c "gtMakeParticleCurve" but1;
showWindow gtMakeParticleCurveWin;
}

///////////////////////////////
global proc gtMakeParticleCurve(){
string $creation=`scrollField -q -tx gtsfield1`;
string $runtime=`scrollField -q -tx gtsfield2`;

int $start=`intFieldGrp -q -v1  gtIntrangeFa`;
int $end=`intFieldGrp -q -v2  gtIntrangeFa`;

string $sel[]=`ls -sl`;
string $creationE=$creation;

$creationE+="\nint $id=particleId;\n";
$creationE+="vector $pos=position;\n";
$creationE+="curve -d 3 -p ($pos.x) ($pos.y) ($pos.z) -n (\"";
$creationE+=($sel[0]);
$creationE+="_gtCurve\"+$id);\n";

string $runtimeE=$runtime;

$runtimeE+="int $id=particleId;\n";
$runtimeE+="vector $pos=position;\n";
$runtimeE+="curve -a  -p ($pos.x) ($pos.y) ($pos.z) (\"";
$runtimeE+=($sel[0]);
$runtimeE+="_gtCurve\"+$id);\n";
dynExpression -s ($creationE) -c ($sel[0]);
dynExpression -s  ($runtimeE) -rad ($sel[0]);

for($i=$start;$i<($end+1);$i++){
currentTime -e $i;
}
dynExpression -s ($creation) -c ($sel[0]);
dynExpression -s  ($runtime) -rad ($sel[0]);
}
/////////////////////////////////////////////////////////////
//随机表达式动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
/////mainProc
global proc gtBoxNoise(){
float  $min=`floatSliderGrp -q -v gtFloatSMin`;
float  $max=`floatSliderGrp -q -v gtFloatSMax`;
int $t=`checkBox -q -v checkBt`;
int $s=`checkBox -q -v checkBs`;
int $r=`checkBox -q -v checkBr`;
int $x=`checkBox -q -v checkBx`;
int $y=`checkBox -q -v checkBy`;
int $z=`checkBox -q -v checkBz`;

string $sel[]=`ls -sl`;
string $con=$sel[0];
string $name=$con;

if($t==1){
   int $state=`objExists ($con+".trsFrequcy")`;
if($state==0){
select -r ($con);
addAttr -ln "trsFrequcy" -at double -k 1 -dv 1;
addAttr -ln "trsAmplitude" -at double -k 1 -dv 1;}

    if($x==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".tx")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".tx 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".trsFrequcy\"`;\n";
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".trsAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".tx";
	$exp+="=noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+=";\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBx"+$i);
	    }	
	}

    if($y==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".ty")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".ty 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".trsFrequcy\"`;\n";
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".trsAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".ty";
	$exp+="=noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+=";\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBy"+$i);
	    }	
	}
	
    if($z==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".tz")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".tz 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".trsFrequcy\"`;\n";
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".trsAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".tz";
	$exp+="=noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+=";\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBz"+$i);
	        }	
	    }
    }
   ///////////////////
   if($s==1){
   int $state=`objExists ($con+".sclFrequcy")`;
if($state==0){
select -r ($con);
addAttr -ln "scl" -at double -k 1 -dv 1;
addAttr -ln "sclFrequcy" -at double -k 1 -dv 1;
addAttr -ln "sclAmplitude" -at double -k 1 -dv 1;}

    if($x==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".sx")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".sx 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".sclFrequcy\"`;\n";
	
	$exp+="float $a_s=`getAttr \"";
	$exp+=($name);
	$exp+=".scl\"`;\n";
	
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".sclAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".sx";
	$exp+="=(noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+="+$a_a)*$a_s;\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBsx"+$i);
	    }	
	}

    if($y==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".sy")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".sy 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".sclFrequcy\"`;\n";
		$exp+="float $a_s=`getAttr \"";
	$exp+=($name);
	$exp+=".scl\"`;\n";
	
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".sclAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".sy";
	$exp+="=(noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+="+$a_a)*$a_s;\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBsy"+$i);
	    }	
	}
	
    if($z==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".sz")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".sz 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".sclFrequcy\"`;\n";
		$exp+="float $a_s=`getAttr \"";
	$exp+=($name);
	$exp+=".scl\"`;\n";
	
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".sclAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".sz";
	$exp+="=(noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+="+$a_a)*$a_s;\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBsz"+$i);
	        }	
	    }
    }
    ///////////////
    if($r==1){
   int $state=`objExists ($con+".rotFrequcy")`;
if($state==0){
select -r ($con);
addAttr -ln "rotFrequcy" -at double -k 1 -dv 1;
addAttr -ln "rotAmplitude" -at double -k 1 -dv 1;}

    if($x==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".rx")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".rx 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".rotFrequcy\"`;\n";
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".rotAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".rx";
	$exp+="=noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+=";\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBrx"+$i);
	    }	
	}

    if($y==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".ry")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".ry 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".rotFrequcy\"`;\n";
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".rotAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".ry";
	$exp+="=noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+=";\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBry"+$i);
	    }	
	}
	
    if($z==1){
global string $gtShowText="";
for($i=0;$i<size($sel);$i++){
string $input[]=`listConnections -s 1 -d 0 ($sel[$i]+".rz")`;
if(size($input[0])){
$gtShowText+=("\n  ***"+$sel[$i]+".rz 已经被别人控制!");
print ($gtShowText);
continue;
}

float $radA=rand($min,$max);
float $radF=rand($min,$max);

string $exp="";
	$exp+="float $a_f=`getAttr \"";
	$exp+=($name);
	$exp+=".rotFrequcy\"`;\n";
	$exp+="float $a_a=`getAttr \"";
	$exp+=($name);
	$exp+=".rotAmplitude\"`;\n";
	$exp+=($sel[$i]);
	$exp+=".rz";
	$exp+="=noise(time*$a_f*";
	$exp+=$radF;
	$exp+=")*$a_a*";
	$exp+=$radA;
	$exp+=";\n";
expression -s $exp -ae 1 -uc all -n ($name+"expBrz"+$i);
	        }	
	    }
    }     
}
/////windowProc
global proc gtBoxNoiseWin(){
if(`window -ex gtBoxNWin`) deleteUI -window gtBoxNWin;
window -wh 200 200 -t "老船角色绑定-☆-随机表达式动画工具！！！" gtBoxNWin;
formLayout gtFormNoise;
columnLayout -adj 1 gtColN;
text -l "点击下方按钮↓↓↓↓↓" texta1;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/950\"";

	rowColumnLayout -nc 4 -cw 1 50 -cw 2 100 -cw 3 100 -cw 4 100;
text -l "";
checkBox -l "移动随机"  -v 0 checkBt;
checkBox -l "缩放随机" -v 0 checkBs;
checkBox -l "旋转随机" -v 0 checkBr;
    setParent..;
	rowColumnLayout -nc 4 -cw 1 50 -cw 2 100 -cw 3 100 -cw 4 100;
text -l "";

checkBox -l "X" -v 0 checkBx;
checkBox -l "Y" -v 0 checkBy;
checkBox -l "Z" -v 0 checkBz;
    setParent..;
floatSliderGrp -min 0 -max 10  -v 0 -f 1 -l "最小：" gtFloatSMin;
floatSliderGrp -min 0 -max 20  -v 0.5 -f 1 -l "最大：" gtFloatSMax;
separator -style "double";

button -l " 应  用" -w 120  -c "gtBoxNoise" but2;

formLayout -e
-af gtColN left 5
-af gtColN right 5
-af gtColN top 5 gtFormNoise;
showWindow gtBoxNWin;
}
////////////////////////////////
//关节FK控制器绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
////
global proc gtFKConCreateWin(){
if(`window -ex gtFKConCreateWin`) deleteUI  -window gtFKConCreateWin;
window -wh 400 300 -title "老船角色绑定-☆-FK控制器创建工具！！！！！！" gtFKConCreateWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1056\"";
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtfkikConradius;
	separator -style double;
    radioButtonGrp -en 1  -l "创建方式：" -nrb  2 -la2 "选择的关节" "所有子关节"   -cw3 120 120 120  -select 1 gtfkConTypeBox;
	separator -style double;	
    button -l "为选择的关节创建FK控制器" -c  "gtCreateConFkConA";
showWindow gtFKConCreateWin;
}

////////////
global proc gtCreateConFkConA(){
    
int $fkcon=`radioButtonGrp -q -sl gtfkConTypeBox`;
if($fkcon==1)gtFKconForSelectBn;
if($fkcon==2)gtCreateConFkCon;

}
///////////
global proc gtFKconForSelectBn(){
 global float $gttall;
$gttall=`floatSliderGrp -q -v gtfkikConradius`;

string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
    
string $tokem[];
int $tonum=`tokenize ($sel[$i]) "_" $tokem`;
string $side=$tokem[1];
    
  circle -ch 0 -o on -nr 1 0 0 -r ($gttall) -n ($sel[$i]+"Con") ;
  group -n ($sel[$i]+"ConGrp") ;
  group -n ($sel[$i]+"ConGrpA") ;

  select -r ($sel[$i]);
  select -add ($sel[$i]+"ConGrpA");
  delete `parentConstraint`;
   select -r ($sel[$i]+"Con") ;
  select -add ($sel[$i]);
  parentConstraint;
  setAttr -lock true ($sel[$i]+"Con.tx");
  setAttr -lock true ($sel[$i]+"Con.ty");
setAttr -lock true ($sel[$i]+"Con.tz");
setAttr -lock true ($sel[$i]+"Con.sx");
setAttr -lock true ($sel[$i]+"Con.sy");
setAttr -lock true ($sel[$i]+"Con.sz");

 string $shape[]=`listRelatives -s ($sel[$i]+"Con")`;
    setAttr ($shape[0]+".overrideEnabled") 1;
  if($side=="l"){
    setAttr ($shape[0]+".overrideColor") 22;   
  }else if($side=="r"){
    setAttr ($shape[0]+".overrideColor") 13;   
  }else{
        setAttr ($shape[0]+".overrideColor") 6;     
      }  
    }
}
///////////////
global proc gtCreateConFkCon(){
    
 global float $gttall;
$gttall=`floatSliderGrp -q -v gtfkikConradius`;
    
    
string $bn[]=`ls -sl`;
int $bnnum=size($bn);

for($jj=0;$jj<$bnnum;$jj++){
    select -r ($bn[$jj]);
	string $sels[] = `ls -sl`;
	
	int $size=size($sels);	
	/////////////////////////////
	string $baseJoint = $sels[0];
	
	string $endJoint;
	
	string $childs[]=`listRelatives -c -ad $sels[0]`;
	int $num=size($childs);
	$endJoint=$childs[0];
	//////////////////////////////////////	
	string $typs=`nodeType  $baseJoint`;
	string $type=`nodeType  $endJoint`;
	if($typs!="joint")error "需要选择两个关节";
	if($type!="joint")error "需要选择两个关节";

	select -r  $baseJoint;
	
for($a=($num-1);$a>0;$a--){
    
    select -add ($childs[$a]);
}

string $sel[]=`ls -sl`;

string $tokem[];
int $tonum=`tokenize ($sel[0]) "_" $tokem`;
string $side=$tokem[1];

for($i=0;$i<size($sel);$i++){
  circle -ch 0 -o on -nr 1 0 0 -r ($gttall) -n ($sel[$i]+"Con") ;
  select -r ($sel[$i]+"Con");
  group -n ($sel[$i]+"ConGrp");
  group -n ($sel[$i]+"ConGrpA");
  select -r ($sel[$i]);
  select -add ($sel[$i]+"ConGrpA");
  delete `parentConstraint`;
  
  select -r ($sel[$i]+"Con");
  select -add ($sel[$i]);
  parentConstraint;
  //scaleConstraint; 
  setAttr -lock true ($sel[$i]+"Con.tx");
  setAttr -lock true ($sel[$i]+"Con.ty");
  setAttr -lock true ($sel[$i]+"Con.tz");
  setAttr -lock true ($sel[$i]+"Con.sx");
  setAttr -lock true ($sel[$i]+"Con.sy");
  setAttr -lock true ($sel[$i]+"Con.sz");
  setAttr -lock true ($sel[$i]+"Con.v");
  string $shape[]=`listRelatives -s ($sel[$i]+"Con")`;
    setAttr ($shape[0]+".overrideEnabled") 1;
  if($side=="l"){
    setAttr ($shape[0]+".overrideColor") 22;   
  }else if($side=="r"){
    setAttr ($shape[0]+".overrideColor") 13;   
  }else{
        setAttr ($shape[0]+".overrideColor") 6;     
  }  
}

for($i=0;$i<(size($sel)-1);$i++){
    $j=$i+1;
    select -r ($sel[$j]+"ConGrpA");
    select -add ($sel[$i]+"Con");
    parent;
}

int $size=size($sel);
/////////////////////
addAttr -ln "rotx"  -at double -k 1 ($sel[$size-1]+"Con");
addAttr -ln "roty"  -at double -k 1 ($sel[$size-1]+"Con");
addAttr -ln "rotz"  -at double -k 1 ($sel[$size-1]+"Con");
addAttr -ln "showCon"  -at bool -k 1 ($sel[$size-1]+"Con");

for($i=0;$i<size($sel);$i++){
    connectAttr -f ($sel[$size-1]+"Con.rotx") ($sel[$i]+"ConGrp.rotateX");
    connectAttr -f ($sel[$size-1]+"Con.roty") ($sel[$i]+"ConGrp.rotateY");
    connectAttr -f ($sel[$size-1]+"Con.rotz") ($sel[$i]+"ConGrp.rotateZ");    
}

for($i=0;$i<(size($sel)-1);$i++){
    string $shap[]=`listRelatives -s ($sel[$i]+"Con")`;

    connectAttr -f ($sel[$size-1]+"Con.showCon") ($shap[0]+".v");
        }
    }
}
////////////
//IK控制器绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////

global proc gtIKConCreateWin(){
if(`window -ex gtIKConCreateWin`) deleteUI  -window gtIKConCreateWin;
window -wh 400 300 -title "老船角色绑定-☆-IK控制器创建工具！！！！！！" gtIKConCreateWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1059\"";
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtfkikConradius;	
	separator -style double;
	radioButtonGrp -en 1  -l "创建方式：" -nrb  2 -la2 "父子约束" "父子关系"   -cw3 120 120 120  -select 1 gtikConTypeBox;
	separator -style double;
	button  -l "为选择的物体创建Ik控制器" -c "gtikConProc" gtIntsecoundBnBut;

showWindow gtIKConCreateWin;

}
////////////////
global proc  gtikConProc(){
int $ikcon=`radioButtonGrp -q -sl gtikConTypeBox`;    
float $scale=`floatSliderGrp -q -v gtfkikConradius`;
string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
    
string $tokem[];
int $tonum=`tokenize ($sel[$i]) "_" $tokem`;
string $side=$tokem[1];
    
curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($sel[$i]+"Con");
group -n ($sel[$i]+"ConGrp");
group -n ($sel[$i]+"ConGrpA");
scale -r ($scale) ($scale) ($scale);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

  string $shape[]=`listRelatives -s ($sel[$i]+"Con")`;
    setAttr ($shape[0]+".overrideEnabled") 1;
  if($side=="l"){
    setAttr ($shape[0]+".overrideColor") 22;   
  }else if($side=="r"){
    setAttr ($shape[0]+".overrideColor") 13;   
  }else{
        setAttr ($shape[0]+".overrideColor") 6;     
  }

select -r ($sel[$i]);
select -add ($sel[$i]+"ConGrpA");
delete `pointConstraint`;
if($ikcon==1){
select -r ($sel[$i]+"Con");
select -add ($sel[$i]);
parentConstraint -mo;
}
if($ikcon==2){
    select -r ($sel[$i]);
select -add ($sel[$i]+"Con");
parent;
}
select -r ($sel[$i]+"Con");
}
}
///////////////////
//FK单关节控制器绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtFKIKConCreateWin(){

if(`window -ex gtFKIKConCreateWin`) deleteUI  -window gtFKIKConCreateWin;
window -wh 400 200 -title "老船角色绑定-☆-假样条IKFK控制器创建工具！！！！！！" gtFKIKConCreateWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1087\"";
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtfkikConradius;
	
	separator -style double;
   
    text -l "创建FK绑定，并创建蒙皮单关节" textgta;
	button  -l "为选择的关节链创建单关节IKFK混合控制器" -c "gtIkFkConProc" ;
    separator -style double;	

showWindow gtFKIKConCreateWin;

}
////////////
global proc gtIkFkConProc(){
    
 global float $gttall;
$gttall=`floatSliderGrp -q -v gtfkikConradius`;
      
string $bn[]=`ls -sl`;
int $bnnum=size($bn);

for($jj=0;$jj<$bnnum;$jj++){
    select -r ($bn[$jj]);
	string $sels[] = `ls -sl`;
	
	int $size=size($sels);	
	string $baseJoint = $sels[0];
	
	string $endJoint;
	
	string $childs[]=`listRelatives -c -ad $sels[0]`;
	int $num=size($childs);
	$endJoint=$childs[0];
	//////////////////////////////////////	
	string $typs=`nodeType  $baseJoint`;
	string $type=`nodeType  $endJoint`;
	if($typs!="joint")error "需要选择两个关节";
	if($type!="joint")error "需要选择两个关节";
select -r $childs[1];
select -add $endJoint;
delete `orientConstraint`;
select -r $endJoint;
makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;

	select -r  $baseJoint;	
for($a=($num-1);$a>=0;$a--){
    
    select -add ($childs[$a]);
}
string $sel[]=`ls -sl`;
string $tokem[];
int $tonum=`tokenize ($sel[0]) "_" $tokem`;
string $side=$tokem[1];
float $p[]=`joint -q -p ($sel[0])`;
int $bnnum=size($sel);
int $d=2;
if($bnnum<2)$d=1;
curve -d ($d) -p ($p[0]) ($p[1]) ($p[2]) -n ($sel[0]+"rotCurve");
for($i=1;$i<size($sel);$i++){
    float $p[]=`joint -q -p ($sel[$i])`;
curve -a  -p ($p[0]) ($p[1]) ($p[2]) ($sel[0]+"rotCurve");
}

select -r  ($sel[0]+"rotCurve");
group -n ($sel[0]+"rotCurveGrp");
setAttr ($sel[0]+"rotCurveGrp.visibility") 0;
setAttr -lock true ($sel[0]+"rotCurveGrp.v");

for($i=0;$i<size($sel);$i++){
  circle -ch 0 -o on -nr 1 0 0 -r ($gttall) -n ($sel[$i]+"Con") ;
  select -r ($sel[$i]+"Con");
  group -n ($sel[$i]+"ConGrp");
  group -n ($sel[$i]+"ConGrpA");
  select -r ($sel[$i]);
  select -add ($sel[$i]+"ConGrpA");
  delete `parentConstraint`;
  
  select -r ($sel[$i]+"Con");
  select -add ($sel[$i]);
  parentConstraint;
  //scaleConstraint; 
  setAttr ($sel[$i]+".radius") 0.01;
  select -r ($sel[$i]);
joint -p 0 0 0 -n ($sel[$i]+"BJTA");
  select -r ($sel[$i]);
select -add ($sel[$i]+"BJTA");
delete`parentConstraint`;
select -r ($sel[$i]+"BJTA");
makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;

select -r ($sel[$i]+"Con");
select -add ($sel[$i]+"BJTA");
connectAttr -f ($sel[$i]+"Con.scale") ($sel[$i]+"BJTA.scale");

select -r ($sel[0]+"rotCurve.cv["+$i+"]");
newCluster " -envelope 1";
rename ($sel[$i]+"cluster");
select -r ($sel[$i]+"cluster");
select -add ($sel[$i]+"Con");
parent;
setAttr ($sel[$i]+"cluster.visibility") 0;
setAttr -lock true ($sel[$i]+"cluster.v");
select -r ($sel[0]+"rotCurve");
select -add ($sel[$i]+"BJTA");
tangentConstraint -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject ($sel[$i]+"Con");

  setAttr -lock true ($sel[$i]+"Con.sx");
  setAttr -lock true ($sel[$i]+"Con.sy");
  setAttr -lock true ($sel[$i]+"Con.sz");
  setAttr -lock true ($sel[$i]+"Con.v");
  string $shape[]=`listRelatives -s ($sel[$i]+"Con")`;
    setAttr ($shape[0]+".overrideEnabled") 1;
  if($side=="l"){
    setAttr ($shape[0]+".overrideColor") 22;   
  }else if($side=="r"){
    setAttr ($shape[0]+".overrideColor") 13;   
  }else{
        setAttr ($shape[0]+".overrideColor") 6;     
  }  
}
for($i=0;$i<(size($sel)-1);$i++){
    $j=$i+1;
    select -r ($sel[$j]+"ConGrpA");
    select -add ($sel[$i]+"Con");
    parent;
}
int $size=size($sel);

addAttr -ln "rotx"  -at double -k 1 ($sel[$size-1]+"Con");
addAttr -ln "roty"  -at double -k 1 ($sel[$size-1]+"Con");
addAttr -ln "rotz"  -at double -k 1 ($sel[$size-1]+"Con");
addAttr -ln "showCon"  -at bool -k 1 ($sel[$size-1]+"Con");

for($i=0;$i<size($sel);$i++){
    connectAttr -f ($sel[$size-1]+"Con.rotx") ($sel[$i]+"ConGrp.rotateX");
    connectAttr -f ($sel[$size-1]+"Con.roty") ($sel[$i]+"ConGrp.rotateY");
    connectAttr -f ($sel[$size-1]+"Con.rotz") ($sel[$i]+"ConGrp.rotateZ");    
}

for($i=0;$i<(size($sel)-1);$i++){
    string $shap[]=`listRelatives -s ($sel[$i]+"Con")`;

    connectAttr -f ($sel[$size-1]+"Con.showCon") ($shap[0]+".v");
        }
    }
}
/////////////////
//MAYA簇权重绘制工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtClusterWeightPaintWin(){

if(`window -ex gtClusterWeightPaintWin`) deleteUI -window gtClusterWeightPaintWin;
window -wh 420 200 -t "老船角色绑定-☆-MAYA簇权重绘制工具" gtClusterWeightPaintWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1095\"";
separator -style single  sep1;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "变形模型" -tx "请载入变形模型" -ed 0 gtTextBSLCluster3;
button -l "载入变形模型" -c "gtBSLoadClusterMesh" gtButBSC3;

setParent..;
separator -style single  sep3;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "选择变形簇";

button -l "绘制簇变形权重" -c "gtClusterWeightPaintProc;" but3ab;

setParent..;
separator -style single  sep2;

showWindow  gtClusterWeightPaintWin;
}
///////////////////////
global proc gtBSLoadClusterMesh(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个模型";
textFieldGrp -e -tx ($sel[0]) gtTextBSLCluster3;
}
////////////////////
global proc gtClusterWeightPaintProc (){
    string $sel[]=`ls -sl`;
    string $mesh=`textFieldGrp -q -text  gtTextBSLCluster3`;
    
    string $clusA[]=`listConnections -s 0 -d 1 ($sel[0]+".worldMatrix[0]")`;   
    select -cl;
    string  $clusterSets[]=`listConnections ($clusA[0]+".message")`;

    string $currentMembers[]=`sets -q ($clusterSets[0])`;

		select ($mesh+".vtx[0:999999]");
		select -d $currentMembers;
		string $vex[]=`ls -sl`;
		if(size($vex)>0){
		sets -add ($clusterSets[0]) `ls -sl`;
		percent -v 0 $clusA[0] `ls -sl`;
		}
    artAttrToolScript 4 "cluster";
eval ("artSetToolAndSelectAttr( \"artAttrCtx\", \"cluster."+$clusA[0]+".weights\")");
select $mesh;
evalEcho ("artSetToolAndSelectAttr( \"artAttrCtx\", \"cluster."+$clusA[0]+".weights\")");
}
///////////////////////////////////////////
//MAYA链条履带自动滚动绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtMakeViechleChainWin(){

if(`window -ex gtMakeViechleChainWin`) deleteUI -window gtMakeViechleChainWin;
window -wh 420 300 -t "老船角色绑定-☆-MAYA链条履带自动滚动绑定工具!!!"  gtMakeViechleChainWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1119\"";
separator -style single  sep1a;

columnLayout -adj 1 gtBSColumlayoutA;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

text -l "按顺序选择链节物体" ;
button -l "创建链条闭合曲线" -c "gtMakeChainProcB" gtButBSBa1;
setParent..;
separator -style single  sep1Ba;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "链条曲线：" -tx "载入链条曲线" -ed 0 gtTextChainCurve;
button -l "载入链条曲线" -c "gtMakeChainLoadCurve" gtButBSB1;
setParent..;
floatSliderGrp -l "链节间距" -f 1 -min -100  -max 100 -step 0.001 -v 0 gtMakeChainDisF;
rowColumnLayout -nc 2 -cw 1 190 -cw 2 190;
button -l "创建履带配套齿轮绑定" -c "gtVehicleGearRollProcA;" but3a;
button -l "创建链条履带" -c "gtMakeChainProc;" but3b;
setParent..;
separator -style single  sep1a;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "存储链节名称：" -tx "" -ed 0 gtTextChainMesh;
button -l "载入链节物体" -c "gtMakeChainLoadMesh;" but3B;
setParent..;
rowColumnLayout -nc 3 -cw 1 100 -cw 2 140 -cw 3 140;
text -l "";
checkBox -l "使用约束" -v 0  gtMakeChainP;
button -l "完成链条履带绑定" -c "gtMakeChainProcA;" but3B;
setParent..;
separator -style single ;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "选择链节物体-坐标在自身中心" ;
button -l "创建履带绑定单关节" -c "gtMakebindBnProc" ;
setParent..;

frameLayout -cl 1 -cll 1 -l "创建常规齿轮绑定" -lv 1  gtframeGearA;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "主动齿轮模型：" -tx "" -ed 0 gtTextGearMesh;
button -l "载入主动齿轮模型" -c "gtMakeChainLoadGearM;";
textFieldGrp  -cw2 100 130 -l "主动控制物体：" -tx "" -ed 0 gtTextGearBnCon;
button -l "载入主动控制物体" -c "gtMakeChainLoadGearBn;";

setParent..;
radioButtonGrp -en 1  -l "轴向:" -nrb  3 -la3 "rx" "ry" "rz" -cw4 95  90 90 90  -select 1 gtGearAxisRad;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "选择全部需要制作齿轮滚动的模型";
button -l "创建齿轮滚动绑定" -c "gtVehicleGearRollProcB;";
setParent..;

showWindow  gtMakeViechleChainWin;
}
///////////////////
global proc gtMakeChainLoadGearM(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个齿轮模型";
textFieldGrp -e -tx ($sel[0]) gtTextGearMesh;
}
////////////////////////
global proc gtMakeChainLoadGearBn(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个齿轮控制物体";
textFieldGrp -e -tx ($sel[0]) gtTextGearBnCon;
}
///////////////////////////////
global proc gtMakeChainLoadCurve(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个曲线";
textFieldGrp -e -tx ($sel[0]) gtTextChainCurve;
}
///////////////////////////
global proc gtMakeChainLoadMesh(){
string $sel[]=`ls -sl`;
int $size=size($sel);
string $nam="";
for($i=0;$i<size($sel);$i++){
     $nam+=($sel[$i]+" ");
    }
textFieldGrp -e -tx $nam gtTextChainMesh;
}

/////////////////////////////////
global proc gtMakeChainProc (){
    string $curve=`textFieldGrp -q -tx gtTextChainCurve`;
    float $distance=`floatSliderGrp -q -v gtMakeChainDisF`;
	string $selection[] = `ls -sl`;
    int $size=size($selection);
    int $fit=1;
    if($size>1)$fit=0;
	
	string $cInfo;
	float $curveLength;

	string $pathCurve =$curve;
	$cInfo = `arclen -ch 1 $pathCurve`;
	$curveLength = `getAttr ($cInfo+".arcLength")`;
	
	float $objLength = 0;

		$xF = `xform -q -boundingBox $selection[0]`;
		$objLength += $xF[2] - $xF[5];	
	$objLength = abs($objLength)+$distance; 
	
	select -r $curve;
	duplicate -rr -n ($curve+"aim");
	scale 1.2 1.2 1.2;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

	if (!`attributeExists "roll" ($curve+"aim")`){
	    select -r ($curve+"aim");
		addAttr -at "float" -ln "roll" -keyable true ($curve+"aim");
        addAttr -ln "autoRoll"  -at bool  -dv 1 -k 1;
        addAttr -ln "reverse"  -at bool  -dv 0 -k 1;

        addAttr -ln "prePosx"  -at double;
        addAttr -ln "prePosy"  -at double;
        addAttr -ln "prePosz"  -at double;
        addAttr -ln "dis"  -at double;
        addAttr -ln "length"  -at double -dv $curveLength;
        addAttr -ln "centerPos"  -at double -dv 1000000;
        addAttr -ln "disRoll"  -at double;
        connectAttr -f ($cInfo+".arcLength") ($curve+"aim.length");       
 
        setAttr -l true ($curve+"aim.length");
	}

  select -cl;
  group -empty -n ($curve+"newPos");
  select -cl;
  group -empty -n ($curve+"prePos"); 
  
  select -cl;
  group -empty -n ($curve+"prePosA"); 
  select -r ($curve+"prePos");
  select -add ($curve+"prePosA");
  delete`pointConstraint`;
  
  select -r ($curve+"prePosA"); 
  select -add ($curve+"prePos");
  parent;
  
  select -r ($curve+"newPos");
  select -add ($curve+"prePos"); 
  group -n ($curve+"prePosGrp"); 
  select -r ($curve+"prePosGrp"); 
  group -n  ($curve+"NotMoveGrp");  

  select -r ($curve+"aim");
  select -add ($curve+"newPos");
  pointConstraint;
  select -r ($curve+"aim");
  select -add ($curve+"prePos");
  delete`pointConstraint`;
  
  select -r ($curve+"aim");
  select -add ($curve+"prePos");
  orientConstraint -mo;
  
  select -r ($curve+"prePosA");
  makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
  select -r ($curve+"newPos"); 
  select -add ($curve+"prePosA");
  pointConstraint;
   
  string $expString="float $centerP="+$curve+"aim.centerPos;\n";
         $expString+="float $roll="+$curve+"aim.roll/100.0;\n";
         $expString+=$curve+"aim.disRoll =$roll+$centerP+"+$curve+"aim.dis/"+$curve+"aim.length\n";	    
	    expression -s $expString -n ($curve+"DisExp");
  
  
   string $exp="";
    $exp+="float $roll=";
    $exp+=$curve+"aim.roll;\n";
    $exp+="float $autoRoll=";    
    $exp+=$curve+"aim.autoRoll;\n";
    $exp+="float $prePosx=";     
    $exp+=$curve+"aim.prePosx;\n";
    $exp+="float $prePosy=";        
    $exp+=$curve+"aim.prePosy;\n";
    $exp+="float $prePosz=";        
    $exp+=$curve+"aim.prePosz;\n\n";
    $exp+="float $reverse=";        
    $exp+=$curve+"aim.reverse;\n\n"; 
   // $exp+="float $scl=";        
   // $exp+=$curve+"aim.sz;\n\n";     
    $exp+="int $dirA=1;\n";
    $exp+="if($reverse==1)\n";
    $exp+="$dirA=-1;\n";
      
    $exp+=$curve+"prePos.tx=$prePosx;\n";
    $exp+=$curve+"prePos.ty=$prePosy;\n";
    $exp+=$curve+"prePos.tz=$prePosz;\n";
    
    $exp+="float $nowPosx=";
    $exp+=$curve+"newPos.tx;\n";
    $exp+="float $nowPosy=";
    $exp+=$curve+"newPos.ty;\n";    
    $exp+="float $nowPosz=";
    $exp+=$curve+"newPos.tz;\n\n";    
                            
    $exp+="float $disP=mag(<<$nowPosx,$nowPosy,$nowPosz>>-<<$prePosx,$prePosy,$prePosz>>);\n";
    $exp+="float $curDis="+$curve+"aim.dis;\n\n";
    
    $exp+="float $dirPreZ=";
    $exp+=($curve+"prePosA")+".translateZ;\n";
    $exp+="int $dir=0;\n";
    $exp+="if($dirPreZ<0)\n";
    $exp+="$dir=-1;\n";
    $exp+="else if($dirPreZ>0)\n";
    $exp+="$dir=1;\n";
    $exp+=$curve+"aim.dis=$disP*$dir*$dirA*$autoRoll+$curDis;\n";
   
    $exp+=$curve+"aim.prePosx=$nowPosx;\n";
    $exp+=$curve+"aim.prePosy=$nowPosy;\n";
    $exp+=$curve+"aim.prePosz=$nowPosz;\n";
  
expression -s ($exp)  -o ($curve) -ae 1 -uc all -n ($curve+"exp");  

	string $shap[]=`listRelatives -s ($curve+"aim")`;
    setAttr ($shap[0]+".overrideEnabled") 1;
    setAttr ($shap[0]+".overrideColor") 22;
	
	//print($objLength);
	int $maxCount;
	if ($fit){
		$maxCount = $curveLength / $objLength;
	}else{
		$maxCount = $size;
	}
	//print ( $maxCount);
	$cPieces = `group -empty -name ($curve+"chainPieces")`;
	$cLoc = `group -empty -name ($curve+"chainLocGrp")`;
	setAttr ($cLoc+".visibility") 0;
    setAttr -lock true ($cLoc+".v");
    select -r ($cLoc);
    select -add $cPieces;
    parent;
    $cMesh = `group -empty -name ($curve+"chainMeshGrp")`;
    select -r ($cMesh);
    select -add $cPieces;
    parent;
    
    if($fit==1){
    setAttr ($curve+".visibility") 0;
    setAttr -lock true ($curve+".visibility");
	int $i;
	for ($i=0;$i<$maxCount; $i++){
		
		string $curPoly[] = `duplicate $selection[0]`;
		spaceLocator -p 0 0 0 -n ($curPoly[0]+"loc"+$i);
		parent $curPoly  $cMesh;
		parent  ($curPoly[0]+"loc"+$i) $cLoc;
		
		select -r ($curPoly[0]+"loc"+$i) ($curve+"aim");
		$LocPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false`;
				
		string $input[]=`listConnections -s 1 -d 0 ($LocPath+".uValue")`;
		select -r $input[0];
		delete; 

		select -r $curPoly $curve;
		$mPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "object" -worldUpObject ($curPoly[0]+"loc"+$i) -inverseUp false -inverseFront false -bank false`;
			
		string $input[]=`listConnections -s 1 -d 0 ($mPath+".uValue")`;
		select -r $input[0];
		delete; 
		
    	select -r ($curve+"aim");
	    select -add ($curPoly[0]);
	    scaleConstraint;
	    ////////////////////////////
   		float $offSet = ($i+0.000) / $maxCount;
   		
		string $expString="float $centerP="+$curve+"aim.centerPos;\n";
               $expString+="float $roll="+$curve+"aim.roll/100.0;\n";
               $expString+=$mPath+".uValue = ("+$offSet+"+$roll+$centerP+"+$curve+"aim.dis/"+$curve+"aim.length)%1\n";
	    
	    expression -s $expString -n ($cMesh+"Exp");
		connectAttr -f  ($mPath+".uValue")  ($LocPath+".uValue");		
    	}	
	select $cPieces;
	}
	
	if($fit==0){	    
    select -r  $selection;
    
    string $sel[]=`ls -sl`;

for($i=0;$i<size($sel);$i++){
		spaceLocator -p 0 0 0 -n ($sel[$i]+"loc");
		parent  ($sel[$i]+"loc") $cLoc;
		
		select -r ($sel[$i]+"loc") ($curve+"aim");
		$LocPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false`;
		
		string $input[]=`listConnections -s 1 -d 0 ($LocPath+".uValue")`;
		select -r $input[0];
		delete; 
		spaceLocator -p 0 0 0 -n ($sel[$i]+"parentLoc");
        addAttr -ln "offsetA"  -at double -k 1 -dv 0 ($sel[$i]+"parentLoc");
        parent  ($sel[$i]+"parentLoc") $cMesh;

		select -r ($sel[$i]+"parentLoc") $curve;
		$mPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "object" -worldUpObject ($sel[$i]+"loc") -inverseUp false -inverseFront false -bank false`;
		
		string $input[]=`listConnections -s 1 -d 0 ($mPath+".uValue")`;
		select -r $input[0];
		delete; 	
		
		select -r ($curve+"aim");
	    select -add ($sel[$i]+"parentLoc");
	    scaleConstraint;
	    	
		float $offSet = ($i+0.000) / $maxCount;
				string $expString="float $centerP="+$curve+"aim.centerPos;\n";
               $expString+="float $roll="+$curve+"aim.roll/100.0;\n";
               $expString+=$mPath+".uValue = ("+$sel[$i]+"parentLoc.offsetA/100.0+"+$offSet+"+$roll+$centerP+"+$curve+"aim.dis/"+$curve+"aim.length)%1\n";
               
		expression -s $expString -n ($cMesh+"Exp");
		connectAttr -f  ($mPath+".uValue")  ($LocPath+".uValue");	
	}
	float $posA[]=`xform -q -ws -t -a ($sel[0]+"parentLoc")`;
	float $posB[]=`xform -q -ws -t -a ($sel[1]+"parentLoc")`;
	float $disScl=mag(<<$posA[0],$posA[1],$posA[2]>>-<<$posB[0],$posB[1],$posB[2]>>);
	for($i=0;$i<size($sel);$i++){
	    string $shap[]=`listRelatives -s ($sel[$i]+"parentLoc")`;
	    setAttr ($shap[0]+".localScaleY") ($disScl*0.75);
	    setAttr ($shap[0]+".localScaleX") ($disScl*0.75);
	    setAttr ($shap[0]+".localScaleZ") ($disScl*0.75);
	    }
	    select -r  $selection;
	    gtMakeChainLoadMesh;
    }
    
    select -r $curve;
	select -add ($curve+"aim");
	parent;
	cycleCheck -e off;
	int $ex=`objExists ("gtCheckEScriptJobA")`;
	if($ex==0){
	scriptNode  -beforeScript  "//请不要删除此脚本节点\ncycleCheck -e off;" -n ("gtCheckEScriptJobA");
    setAttr ("gtCheckEScriptJobA.scriptType") 1;
    }
    select -r ($curve+"aim");
}
//////////////////////////////
global proc gtMakeChainProcA (){
    int $ps=`checkBox -q -v gtMakeChainP`;
    string $curve=`textFieldGrp -q -tx gtTextChainCurve`;
    string $con=`textFieldGrp -q -tx gtTextChainMesh`;
    setAttr ($curve+".visibility") 0;
    setAttr -lock true ($curve+".visibility");

    string $sel[]=`ls -sl`;
    string $conB[];
    if(size($con)>0){
       string $ttm[];
       int $t=`tokenize ($con) " " $ttm`;
       for($j=0;$j<$t;$j++){
          $conB[$j]=$ttm[$j]; 
       }
       select -r ($conB);
    }
    
    string $conA[]=`ls -sl`; 
    int $size=size($conA);
    if($size==0)error "请选择全部链节物体";
    string $sel[]=`ls -sl`;
    //select -r $conA;
    string $loc[]=`listRelatives -c  ($curve+"chainMeshGrp")`;
    
    for($i=0;$i<size($loc);$i++){
        float $d=1100;
        float $posA[]=`xform -q -ws -t -a $loc[$i]`;  
            string $shap[]=`listRelatives -s $loc[$i]`;
	    setAttr ($shap[0]+".v") 0;
        setAttr -l true  ($shap[0]+".v");
          string $conp[];
            for($j=0;$j<size($loc);$j++){
                spaceLocator -p 0 0 0 -n ($conA[$j]+"tempLoc");
                select -r $conA[$j];
                select -add ($conA[$j]+"tempLoc");
                delete`pointConstraint`;
                float $posB[]=`xform -q -ws -t -a ($conA[$j]+"tempLoc")`;
                delete ($conA[$j]+"tempLoc");
                float $dist=mag(<<$posA[0],$posA[1],$posA[2]>>-<<$posB[0],$posB[1],$posB[2]>>);
                if($dist<$d){$d=$dist;$conp[0]=$conA[$j];}
            }
        if($ps==0){
            delete`pointConstraint $loc[$i] ($conp[0])` ;
            
            select -r ($conp[0]);
            select -add $loc[$i];
            parent;
        }else{
            delete`pointConstraint $loc[$i] ($conp[0])` ;
            select -r $loc[$i]; 
            select -add ($conp[0]);
            parentConstraint -mo;
            scaleConstraint;          
        }
    }  
    select ($sel);     
}
/////////////////////////////////
global proc gtMakeChainProcB (){
    string $meshes[]=`ls -sl`;
  int $ex=`objExists ($meshes[0]+"PathCurve")`;
  if($ex==1)error ("路径曲线："+($meshes[0]+"PathCurve")+"已经存在，请将该曲线名称修改为其它名称，或者删除");
    string $curv="curve -d 3 ";
    for($i=0;$i<size($meshes);$i++){
         spaceLocator -p 0 0 0 -n ($meshes[$i]+"tempLoc");
                delete`pointConstraint $meshes[$i] ($meshes[$i]+"tempLoc")`;
                float $posB[]=`xform -q -ws -t -a ($meshes[$i]+"tempLoc")`;
                delete ($meshes[$i]+"tempLoc");
          $curv+="-p "+$posB[0]+" "+$posB[1]+" "+$posB[2]+" ";    
        }
    
    $curv+=" -n "+$meshes[0]+"temp";
    eval ($curv);
    rename ($meshes[0]+"PathCurve");
    closeCurve -ch 0 -ps 1 -rpo 1 -bb 0.5 -bki 0 -p 0.1 ($meshes[0]+"PathCurve");
    rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s (size($meshes)) -d 3 -tol 0.01 ($meshes[0]+"PathCurve");
    string $shap[]=`listRelatives -s ($meshes[0]+"PathCurve")`;
    rename ($shap[0]) ($meshes[0]+"PathCurveShape");
    textFieldGrp -e -tx ($meshes[0]+"PathCurve") gtTextChainCurve;
    select -r ($meshes[0]+"PathCurve");
    CenterPivot;
    }   
///////////////    
global proc gtVehicleGearRollProcA(){
string $curve=`textFieldGrp -q -tx gtTextChainCurve`;
//string $con=("w_con");
string $sel[]=`ls -sl`;

for($i=0;$i<size($sel);$i++){
select -r ($sel[$i]);
CenterPivot;
}
int $ex=`objExists ($curve+".disRoll")`;
if($ex==0)error "轮胎/履带曲线没有距离及长度属性";

int $rootBn=`objExists ($curve+"gearRollRootBn")`;
if($rootBn==0){
    select -cl;
    joint -p 0 0 0 -n ($curve+"gearRollRootBn");
    group -n ($curve+"gearRollRootBnGrp");
    select -r $curve;
    select -add ($curve+"gearRollRootBnGrp");
    parentConstraint -mo;
    scaleConstraint;
    select $sel;
    select -add ($curve+"gearRollRootBn");
    delete `pointConstraint`;       
}

for($i=0;$i<size($sel);$i++){
select -r ($sel[$i]);
int $ex=`objExists ($sel[$i]+".reverse")`;
if($ex==0){
addAttr -ln "reverse"  -at bool -k 1 -dv 1;
}

CenterPivot;
float $bbmin[]=`getAttr ($sel[$i]+".boundingBoxMin")`;
float $bbmax[]=`getAttr ($sel[$i]+".boundingBoxMax")`;
float $ydis=($bbmax[1]-$bbmin[1]);
float $circle=3.14*$ydis;
select -cl ;
joint -p 0 0 0 -n  ($sel[$i]+"RollBn");
select -r ($sel[$i]);
select -add ($sel[$i]+"RollBn");
delete `pointConstraint`;
select -r ($sel[$i]+"RollBn");
select -add ($curve+"gearRollRootBn");
parent;

string $expString ="";  
        $expString+="float $reverse=";        
        $expString+=$sel[$i]+".reverse;\n"; 
        $expString+="int $dirA=1;\n";
        $expString+="if($reverse==1)\n";
        $expString+="$dirA=-1;\n"; 
                                     
		$expString +=($sel[$i]+"RollBn.rx =(");
		$expString +=($curve+".disRoll*(");
		$expString +=($curve+".length/"+$circle); 
		//if($ex==1)$expString +=($conAll+".sy*");              
	    $expString +=("))*-360*$dirA;\n");  		                		          
		expression -s $expString  -ae 1 -uc all -n ($sel[$i]+"_rollExp");
		select -r ($sel[$i]);
        select -add ($sel[$i]+"RollBn");
		SmoothBindSkin;
    }
select -r ($curve);
}
///////////////////////////////////
global proc gtVehicleGearRollProcB(){
    string $gearM=`textFieldGrp -q -tx gtTextGearMesh`;
    string $gearBn=`textFieldGrp -q -tx gtTextGearBnCon`;
    int $Axis=`radioButtonGrp -q  -select  gtGearAxisRad`;
    
    string $rotA="rx";
    if($Axis==2)$rotA="ry";
    if($Axis==3)$rotA="rz";    
    //string $con=("w_con");
string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
select -r ($sel[$i]);
CenterPivot;
}
////////////////
int $rootBn=`objExists ($gearM+"gearRollRootBn")`;
if($rootBn==0){
    select -cl;
    joint -p 0 0 0 -n ($gearM+"gearRollRootBn");
    group -n ($gearM+"gearRollRootBnGrp");

    select $sel;
    select -add ($gearM+"gearRollRootBn");
    delete `pointConstraint`;       
}
/////////////
float $bbmin[]=`getAttr ($gearM+".boundingBoxMin")`;
float $bbmax[]=`getAttr ($gearM+".boundingBoxMax")`;

float $ydis=($bbmax[1]-$bbmin[1]);
if($Axis==2)$ydis=($bbmax[0]-$bbmin[0]);

float $gearCircle=3.14*$ydis;

for($i=0;$i<size($sel);$i++){
select -r ($sel[$i]);
int $ex=`objExists ($sel[$i]+".reverse")`;
if($ex==0){
addAttr -ln "reverse"  -at bool -k 1 -dv 1;
}

CenterPivot;
float $bbmin[]=`getAttr ($sel[$i]+".boundingBoxMin")`;
float $bbmax[]=`getAttr ($sel[$i]+".boundingBoxMax")`;
float $ydis=($bbmax[1]-$bbmin[1]);
if($Axis==2)$ydis=($bbmax[0]-$bbmin[0]);

float $circle=3.14*$ydis;
select -cl ;
joint -p 0 0 0 -n  ($sel[$i]+"RollBn");
select -r ($sel[$i]);
select -add ($sel[$i]+"RollBn");
delete `pointConstraint`;
select -r ($sel[$i]+"RollBn");
select -add ($gearM+"gearRollRootBn");
parent;
string $expString ="";     
        $expString+="float $reverse=";        
        $expString+=$sel[$i]+".reverse;\n"; 
        $expString+="int $dirA=1;\n";
        $expString+="if($reverse==1)\n";
        $expString+="$dirA=-1;\n";                          
		$expString +=($sel[$i]+"RollBn."+$rotA+" =(");
		$expString +=($gearBn+"."+$rotA+"*(");
		$expString +=($gearCircle+"/"+$circle); 
		//if($ex==1)$expString +=($conAll+".sy*");              
	    $expString +=("))*$dirA;\n"); 		                		          
		expression -s $expString  -ae 1 -uc all -n ($sel[$i]+"_rollExp");
		select -r ($sel[$i]);
        select -add ($sel[$i]+"RollBn");
		SmoothBindSkin;
    }
select -r ($sel);
}
///////////////////
global proc gtMakebindBnProc(){
    string $sel[]=`ls -sl`;
    int $ex=`objExists ($sel[0]+"BindSBnGrp")`;
    if($ex==0){
        select -cl;
        joint -p 0 0 0 -n ($sel[0]+"RootSBn") ;
        select -r ($sel);
        select -add ($sel[0]+"RootSBn") ;
        pointConstraint;
        scaleConstraint;
        select -r ($sel[0]+"RootSBn") ;
        group -n ($sel[0]+"BindSBnGrp");
    }    
    for($i=0;$i<size($sel);$i++){
      select -cl ;
      int $ex=`objExists ($sel[$i]+"BindSBn")`;
      if($ex==0){      
      joint -p 0 0 0 -n ($sel[$i]+"BindSBn") ;
      select -r ($sel[$i]);
      select -add ($sel[$i]+"BindSBn") ;
      parentConstraint;
      scaleConstraint;
      select -r ($sel[$i]+"BindSBn") ;
      select -add ($sel[0]+"RootSBn") ;
      parent; 
      }else{
          print ($sel[$i]+"BindSBn：已经存在");
      }
    }
}
///////////////////////////////////    
//替换曲线控制器形态绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtReplaceConShpWin(){

if(`window -ex gtReplaceConShpWin`) deleteUI  -window gtReplaceConShpWin;
window -wh 400 200 -title "老船角色绑定-☆-替换控制器行节点绑定工具！！！！！！" gtReplaceConShpWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1126\"";
		
	separator -style double;
textFieldButtonGrp -cw3 80 200 65 -l (" 目标曲线:") -text "需要载入目标曲线" -bl   "载    入" -bc "gtloadcurveConName;" gtTextFieldconshp;
	separator -style double;
button -l "替换曲线控制器形态" -c "ttgCharactorReplaceConShape" butH;
	separator -style double;
showWindow gtReplaceConShpWin;

}
/////////////////////////////
global proc gtloadcurveConName(){
string $sel[]=`ls -sl`;
textFieldButtonGrp -e -tx $sel[0] gtTextFieldconshp;
}
/////////////////////////

global proc ttgCharactorReplaceConShape(){
string $sel[]=`ls -sl`;
string $curve=`textFieldButtonGrp -q -tx gtTextFieldconshp`;

for($i=0;$i<size($sel);$i++){
string $aimobj=$curve;
    select -r ($aimobj);
      duplicate -rr;
      rename ($sel[$i]+"temp");
     for($ii=0;$ii<12;$ii++){
   string $childs[]=`listRelatives -c ($sel[$i]+"temp")`; 
   int $size=size($childs);
   if($size>1){
       select -r ($sel[$i]+"temp");
       pickWalk -d down;
       pickWalk -d left;
       string $s[]=`ls -sl`;
       string $transform=`objectType ($s[0])`;
       if($transform!="nurbsCurve"){ delete ;}
       } 
 }
 
     for($ii=0;$ii<12;$ii++){
   string $childs[]=`listRelatives -c -fullPath ($sel[$i]+"temp")`; 
   int $size=size($childs);
   if($size>1){
       select -r ($sel[$i]+"temp");
       pickWalk -d down;
       string $s[]=`ls -sl`;
       string $transform=`objectType ($s[0])`;
       if($transform!="nurbsCurve"){ delete ;}
       } 
 }
       string $childs[]=`listRelatives -c -fullPath ($sel[$i]+"temp")`; 
       select -r ($childs[0]);
       rename ($sel[$i]+"tempShape");
       
setAttr -lock 0 ($sel[$i]+"temp.tx");
setAttr -lock 0 ($sel[$i]+"temp.ty");
setAttr -lock 0 ($sel[$i]+"temp.tz");
setAttr -lock 0 ($sel[$i]+"temp.rx");
setAttr -lock 0 ($sel[$i]+"temp.ry");
setAttr -lock 0 ($sel[$i]+"temp.rz");  
setAttr -lock 0 ($sel[$i]+"temp.sx");
setAttr -lock 0 ($sel[$i]+"temp.sy");
setAttr -lock 0 ($sel[$i]+"temp.sz");     
 select -r     ($sel[$i]+"temp");
 string $shape[]=`listRelatives -s ($sel[$i]+"temp")`;


  string $pcon[]=`listRelatives -p ($sel[$i]+"temp")`;
  int $pnum=size($pcon);
  if($pnum>0){
        select -r ($sel[$i]+"temp");
         parent -world;
  }
      select -cl;
      group -empty -n ($sel[$i]+"tempGrp");
      xform -os -piv 0 0 0;
      select -r ($sel[$i]+"tempGrp");
      select -add ($sel[$i]+"temp");
      delete`pointConstraint`;
   string $oldshape[]=`listRelatives -s ($sel[$i])`;
   
for($ii=0;$ii<size($shape);$ii++){
string $inputv[]=`listConnections -s 1 -d 0 -p 1  -scn 1 ($oldshape[$ii]+".v")`;
string $inputlodv[]=`listConnections -s 1 -d 0 -p 1  -scn 1 ($oldshape[$ii]+".lodVisibility")`;
    if(size($inputv)>0){
     connectAttr -f ($inputv[0])  ($shape[$ii]+".v");
 }
  if(size($inputlodv)>0){
     connectAttr -f ($inputlodv[0])   ($shape[$ii]+".lodVisibility");
 }
}
select -r ($oldshape);
string $shapename[]=`ls -sl`;
delete;   
    string $shape[]=`listRelatives -s ($sel[$i]+"temp")`;
    for($ii=0;$ii<size($shape);$ii++){
      select -r ($shape[$ii]);
      select -add ($sel[$i]);
      parent -r -s;
}
     select -r ($sel[$i]+"tempGrp");
     select -add ($sel[$i]+"temp");
     delete;
     string $shape[]=`listRelatives -s ($sel[$i])`;
     for($ii=0;$ii<size($shape);$ii++){
        select -r ($shape[$ii]);
        rename ($sel[$i]+"shape"+$ii);
        }
    }
}
//////////////////////
//MAYA簇权重编辑绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtClusterDeformToolEditWin(){

if(`window -ex gtClusterDeformToolEditWin`) deleteUI -window gtClusterDeformToolEditWin;
window -wh 420 200 -t "老船角色绑定-☆-MAYA簇权重编辑绑定工具" gtClusterDeformToolEditWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1150\"";
separator -style single  sep1;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "变形模型" -tx "请载入变形模型" -ed 0 gtTextBSLCluster3b;
button -l "载入变形模型" -c "gtBSLoadClusterMeshb" gtButBSC3;

setParent..;
floatSliderGrp -l "影响半径" -v 0.5 -s 0.001 -f 1 gtClusterRadius;

rowColumnLayout -nc 4 -cw 1 100  -cw 2 140 -cw 3 140;
text -l "";
checkBox -l "嘴巴模式" gtClusterMouth;
button -l "编辑簇权重" -c "gtClusterToolEditProcLCA;" but3ab;

setParent..;
separator -style single  sep2;

showWindow  gtClusterDeformToolEditWin;
}

//////////////////////////////
global proc gtBSLoadClusterMeshb(){
string $sel[]=`ls -sl`;
string $obj="";
for($i=0;$i<size($sel);$i++){
    $obj+=(" "+$sel[$i]);
}
textFieldGrp -e -tx ($obj) gtTextBSLCluster3b;
}
//////////////////////////////////
global proc gtClusterToolEditProcLCA (){
    
string $sel[]=`ls -sl`;
string $mesh=`textFieldGrp -q -tx gtTextBSLCluster3b`;

int $mouth=`checkBox -q -v gtClusterMouth`;
float $dismt=`floatSliderGrp -q -v gtClusterRadius`;
float $mind=$dismt*0.2;

for($ii=0;$ii<size($sel);$ii++){    
string $clustA=$sel[$ii];
int $vexAll[]=`polyEvaluate -v $mesh`;

string $clusA[]=`listConnections -s 0 -d 1 ($clustA+".worldMatrix[0]")`;
string $cluster=$clusA[0];
$tempStringA=`listConnections ($clusA[0]+".message")`;
string $clusterSet=$tempStringA[0];
select `sets -q ($clusterSet)`;
$dvtxs=`ls -sl -fl`;
	string $geometry=$mesh;
		
	int $ex=`objExists 	closestSampler`;
	if($ex==1)delete closestSampler;
	
createNode -n closestSampler closestPointOnMesh;
$tempString=`listRelatives -ni -s $geometry`;
connectAttr -f ($tempString[0]+".outMesh") closestSampler.inMesh;
connectAttr -f ($geometry+".worldMatrix[0]") closestSampler.inputMatrix;

spaceLocator -p 0 0 0 -n ($clustA+"loc");
select -r ($clustA);
select -add  ($clustA+"loc");
delete `pointConstraint`;
float $posAA[]=`xform -q -ws -t ($clustA+"loc")`;
delete ($clustA+"loc");
int $closestOppositeVtxNr;

float $mag;
select -r ($mesh+".vtx[0:999999]");

if($mouth==0){
string $vtxs[]=`ls -sl -fl`;	
select -cl;
	for($cc=0;$cc<size($vtxs);$cc++){
	    float $posB[]=`xform -q -ws -t $vtxs[$cc]`;
	 $mag=mag (<<($posAA[0]-$posB[0]),($posAA[1]-$posB[1]),($posAA[2]-$posB[2])>>);
        if($mag<($dismt+$dismt*0.1)) select -add $vtxs[$cc];
	}

	string $vex[]=`ls -sl -fl`;
		if(size($vex)>0)
		sets -add ($clusterSet) `ls -sl`;
		
}else{
    	string $vex[]=`ls -sl -fl`;
		if(size($vex)>0)
		sets -add ($clusterSet) `ls -sl`;
        
//select -r $vtxs;

	setAttr -type float3 closestSampler.inPosition ($posAA[0]) $posAA[1] $posAA[2];
	$closestOppositeVtxNr=`getAttr closestSampler.result.closestVertexIndex`;
float $posA[]=`xform -q -ws -t ($geometry+".vtx["+$closestOppositeVtxNr+"]")`;
	
select -r ($geometry+".vtx["+$closestOppositeVtxNr+"]");
GrowPolygonSelectionRegion;
select -d ($geometry+".vtx["+$closestOppositeVtxNr+"]");

string $tempVext[]=`ls -sl -fl`;	

float $tempDis=0;
float $tempDisA=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis){$tempDis=$mag;select -r  $tempVext[$cc];}
        if($mag<$tempDisA){$tempDisA=$mag;}
	}	
    //print ($tempDis);
    //print ($tempDisA);
    
string $tempVex[]=`ls -sl -fl`;	
select -r ($tempVex[0]);
float $posA[]=`xform -q -ws -t ($tempVex[0])`;
	
GrowPolygonSelectionRegion;
select -d ($tempVex[0]);

string $tempVext[]=`ls -sl -fl`;		
float $tempDis1=0;
float $tempDisA1=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis1){$tempDis1=$mag;select -r  $tempVext[$cc];}
        if($mag<$tempDisA1){$tempDisA1=$mag;}
	}	
	//print ($tempDis1);
    //print ($tempDisA1);
    
string $tempVex[]=`ls -sl -fl`;	
select -r ($tempVex[0]);
float $posA[]=`xform -q -ws -t ($tempVex[0])`;
	
GrowPolygonSelectionRegion;
select -d ($tempVex[0]);

string $tempVext[]=`ls -sl -fl`;		
float $tempDis2=0;
float $tempDisA2=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis2){$tempDis2=$mag;}
        if($mag<$tempDisA2){$tempDisA2=$mag;select -r  $tempVext[$cc];}
	}	
	//print ($tempDis2);
    //print ($tempDisA2);
    string $tempVex[]=`ls -sl -fl`;	
select -r ($tempVex[0]);
float $posA[]=`xform -q -ws -t ($tempVex[0])`;
	
GrowPolygonSelectionRegion;
select -d ($tempVex[0]);

string $tempVext[]=`ls -sl -fl`;		
float $tempDis3=0;
float $tempDisA3=100;
for($cc=0;$cc<size($tempVext);$cc++){
	    float $posB[]=`xform -q -ws -t $tempVext[$cc]`;
	 $mag=mag (<<($posA[0]-$posB[0]),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>);
        if($mag>$tempDis3){$tempDis3=$mag;select -r  $tempVext[$cc];}
        if($mag<$tempDisA3){$tempDisA3=$mag;}
	}	
    
int $loop=0;
    $loop=($dismt+$dismt*0.1)/(($tempDis+$tempDisA+$tempDis1+$tempDisA1+$tempDis2+$tempDisA2+$tempDis3+$tempDisA3)/8.0)+1;
select -r ($geometry+".vtx["+$closestOppositeVtxNr+"]");
	for($cc=0;$cc<$loop;$cc++){
GrowPolygonSelectionRegion;
    }
    
}
    delete closestSampler;

$cVext=`ls -sl -fl`;

global string $gMainProgressBar;
//print ($posAA);
progressBar -e -st ("编辑簇权重："+$sel[$ii]) -bp -ii 1 -min 0 -max `size($cVext)` $gMainProgressBar;
for ($i=0;$i<size($cVext);$i++)
	{
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    float $posB[]=`xform -q -ws -t $cVext[$i]`;
	$mag=mag (<<($posAA[0]-$posB[0]),($posAA[1]-$posB[1]),($posAA[2]-$posB[2])>>);

	float $weightV=1-(smoothstep($mind,$dismt,$mag));	
	$tempFloat[0]=$weightV;
		
	percent -v $tempFloat[0] $cluster $cVext[$i];
	}
	progressBar -e -ep $gMainProgressBar;

select -r ($mesh+".vtx[0:999999]");
select -d $cVext;
$cVext=`ls -sl -fl`;
if(size($cVext))
sets -rm ($clusterSet) $cVext;
    }
select -r ($sel);
}
////////////////////////////////////////////
//曲线控制器颜色编辑绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtcurveColorWin(){

if(`window -ex gtcurveColorWin`) deleteUI  -window gtcurveColorWin;
window -wh 400 150 -title "老船角色绑定-☆-曲线颜色编辑器！" gtcurveColorWin;

frameLayout -l "老船绑定工具-批量编辑曲线颜色" 
    -collapsable off
    -collapse off;
columnLayout -adj 1 gtmainFmColorColumn;
text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1159\"";
text -l "选择曲线，点击色块，编辑曲线颜色";
    gridLayout -numberOfRows 4 -numberOfColumns 8 -cellWidthHeight 30 20 -p gtmainFmColorColumn sss;
    iconTextButton -bgc .627 .627 .627 -command "gtupdateColorSlider 0";
    iconTextButton -bgc .467 .467 .467 -command "gtupdateColorSlider 1";
    iconTextButton -bgc .000 .000 .000 -command "gtupdateColorSlider 2";
    iconTextButton -bgc .247 .247 .247 -command "gtupdateColorSlider 3";
    iconTextButton -bgc .498 .498 .498 -command "gtupdateColorSlider 4";
    iconTextButton -bgc 0.608 0 0.157 -command "gtupdateColorSlider 5";
    iconTextButton -bgc 0 0.016 0.373 -command "gtupdateColorSlider 6";
    iconTextButton -bgc 0 0 1 -command "gtupdateColorSlider 7";
    iconTextButton -bgc 0 0.275 0.094 -command "gtupdateColorSlider 8";
    iconTextButton -bgc 0.145 0 0.263 -command "gtupdateColorSlider 9";
    iconTextButton -bgc 0.78 0 0.78 -command "gtupdateColorSlider 10";
    iconTextButton -bgc 0.537 0.278 0.2 -command "gtupdateColorSlider 11";
    iconTextButton -bgc 0.243 0.133 0.122 -command "gtupdateColorSlider 12";
    iconTextButton -bgc 0.6 0.145 0 -command "gtupdateColorSlider 13";
    iconTextButton -bgc 1 0 0 -command "gtupdateColorSlider 14";
    iconTextButton -bgc 0 1 0  -command "gtupdateColorSlider 15";
    iconTextButton -bgc 0 0.255 0.6 -command "gtupdateColorSlider 16";
    iconTextButton -bgc 1 1 1 -command "gtupdateColorSlider 17";
    iconTextButton -bgc 1 1 0 -command "gtupdateColorSlider 18";
    iconTextButton -bgc 0.388 0.863 1 -command "gtupdateColorSlider 19";
    iconTextButton -bgc 0.263 1 0.635 -command "gtupdateColorSlider 20";
    iconTextButton -bgc 1 0.686 0.686 -command "gtupdateColorSlider 21";
    iconTextButton -bgc 0.89 0.675 0.475 -command "gtupdateColorSlider 22";
    iconTextButton -bgc 1 1 0.384 -command "gtupdateColorSlider 23";
    iconTextButton -bgc 0 0.6 0.325 -command "gtupdateColorSlider 24";
    iconTextButton -bgc 0.627 0.412 0.188 -command "gtupdateColorSlider 25";
    iconTextButton -bgc 0.62 0.627 0.188 -command "gtupdateColorSlider 26";
    iconTextButton -bgc 0.408 0.627 0.188 -command "gtupdateColorSlider 27";
    iconTextButton -bgc 0.188 0.627 0.365 -command "gtupdateColorSlider 28";
    iconTextButton -bgc 0.188 0.627 0.627 -command "gtupdateColorSlider 29";
    iconTextButton -bgc 0.188 0.404 0.627 -command "gtupdateColorSlider 30";
    iconTextButton -bgc 0.435 0.188 0.627 -command "gtupdateColorSlider 31";
    setParent..;
colorIndexSliderGrp -min 0 -max 31 -value 0 -cw2 70 163  gtconColor;

showWindow gtcurveColorWin;
}

////////////////////////////////////
global proc gtupdateColorSlider(int $color){
colorIndexSliderGrp  -e -value $color gtconColor;
string $objs[] = `ls -sl`; 
if (`size($objs)`!=0)
    {
    for($i=0;$i<size($objs);$i++)
        {
        string $shape[]= `listRelatives -f -s $objs[$i]`;
        int $color = `colorIndexSliderGrp -q -v gtconColor`;
        if($color > 0)
            {
                
          for($j=0;$j<size($shape);$j++){
            setAttr ($shape[$j] + ".overrideEnabled") 1; 
            setAttr ($shape[$j] + ".overrideColor") ($color - 1);
            }
            }  
        }
    }
}
////////////////////
//IK关节绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtIkJointSetupWin(){

if(`window -ex gtIkJointSetupWin`) deleteUI  -window gtIkJointSetupWin;
window -wh 400 200  -title "老船角色绑定-☆-IKFK切换绑定工具"  gtIkJointSetupWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1184\"";
    
	rowColumnLayout -nc 3 -cw 1 100 -cw 2 150 -cw 3 150;
text -l "   "  -h 24  textConName;
textField -text ""  ttgRigConName;

button -l "载入总控制器" -c  "ttgLaodConNamProc;"   loadConNamBut;
setParent..;
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -s 0.001 -min 0.001 -max 10  gtConradius;
	separator -style double;
	rowColumnLayout -nc 4 -cw 1 30 -cw 2 160 -cw 3 40  -cw 4 250 ;
	text -l "";
	text -l "手掌模式：";
    checkBox -l "" gthandikBox;
    text -l "";

	setParent..;
	separator -style double;

	rowColumnLayout -nc 2 -cw 1 320 -cw 2 200 ;
	intSliderGrp -l "IK关节段数"  -f 1 -v 2 -min 1 -max 10  gtIntsegmentFradius;
	checkBox -l "创建弹簧IK" gtikSpringSolverBox;
	setParent..;
	rowColumnLayout -nc 4 -cw 1 30 -cw 2 160 -cw 3 50  -cw 4 160 ;
	text -l "     ";
	text -l "创建FK控制：";		
	checkBox -l "" -v 1 gtikNoFkBox;
	button -label "创建IK手柄控制" -c "gtikhandlesetup";

	setParent..;
	
separator -style double;	
showWindow gtIkJointSetupWin;
}
///////////////////////
global proc ttgLaodConNamProc(){

string $gtCname="";
string $sel[]=`ls -sl`;
string $teststring=$sel[0];
$gtCname=$teststring;
textField  -e -text $gtCname ttgRigConName;
}
////////////////////
global proc  gtikhandlesetup(){
    int $segment=`intSliderGrp -q -v gtIntsegmentFradius`;
    float $scale=`floatSliderGrp -q -v gtConradius`;
    int $fk=`checkBox -q -v gtikNoFkBox`;
    int $handFoot=`checkBox -q -v gthandikBox`;

$ikfk=1;
string $sel[]=`ls -sl`;

for($ii=0;$ii<size($sel);$ii++){
    
string $basebn=$sel[$ii];

string $gttextm[];
int $gttextnum=`tokenize ($basebn) "_" $gttextm`;
string $gtside=($gttextm[1]);

float $rx=`getAttr ($basebn+".rx")`;
if($rx!=0)error "选择的关节旋转数值必须为：0";
float $ry=`getAttr ($basebn+".ry")`;
if($ry!=0)error "选择的关节旋转数值必须为：0";
float $rz=`getAttr ($basebn+".rz")`;
if($rz!=0)error "选择的关节旋转数值必须为：0";

string $childs[]=`listRelatives -c -ad ($basebn)`;
int $size=size($childs);
if($segment>$size){
    $segement=$size;
}
if($segment==$size&&$segment>1){
    select -r ($childs[1]);
    select -add ($childs[0]);
    delete `orientConstraint`;
    select -r ($childs[0]);
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
}
if($segment==$size&&$segment==1){
    select -r ($basebn);
    select -add ($childs[0]);
    delete `orientConstraint`;
    select -r ($childs[0]);
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
}

select -r $basebn;

if($ikfk==1){

if($fk==1){
 select -r  $basebn;
 duplicate -rr;
 rename ($basebn+"legIkBnA");
 setAttr ($basebn+"legIkBnA.radius") 0.01;
 for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
 rename ($basebn+"legIkBn"+$i);
 setAttr ($basebn+"legIkBn"+$i+".radius") 0.01;
 }

if($segment<($size)){
    select -r ($basebn+"legIkBnA");
    for($i=1;$i<($segment+2);$i++){
     pickWalk -d down;
    }
    rename ($basebn+"endIkbn");
    string $deletBn[]=`listRelatives -c ($basebn+"endIkbn")`;
    for($jjj=0;$jjj<size($deletBn);$jjj++){
        select -r ($basebn+"endIkbn");
        pickWalk -d down;
        delete;
    }
}

 select -r  $basebn;
duplicate -rr;
   rename ($basebn+"legFkBnA");
setAttr ($basebn+"legFkBnA.radius") 0.01;

    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"legFkBn"+$i);
setAttr ($basebn+"legFkBn"+$i+".radius") 0.01;
}

if($segment<$size){
    select -r ($basebn+"legFkBnA");
    for($i=1;$i<($segment+2);$i++){
     pickWalk -d down;
    }
    rename ($basebn+"endFkbn");
    string $deletBn[]=`listRelatives -c ($basebn+"endFkbn")`;
    for($jjj=0;$jjj<size($deletBn);$jjj++){
        select -r ($basebn+"endFkbn");
        pickWalk -d down;
        delete;
    }
}

 select -r  $basebn;
   rename ($basebn+"BnA");

    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"Bn"+$i);
}

select -r ($basebn+"legFkBnA");
select -add ($basebn+"legIkBnA");
select -add ($basebn+"BnA");
string $upconstraintp[]=`parentConstraint`;

 for($i=1;$i<($segment+1);$i++){
select -r ($basebn+"legFkBn"+$i);
select -add ($basebn+"legIkBn"+$i);
select -add ($basebn+"Bn"+$i);
string $constraintp[]=`parentConstraint`;
}

shadingNode -asUtility blendColors -n ($basebn+"scaleColorBlend");
connectAttr -f ($basebn+"legIkBnA.scale") ($basebn+"scaleColorBlend.color2");
connectAttr -f ($basebn+"legFkBnA.scale") ($basebn+"scaleColorBlend.color1");
connectAttr -f ($basebn+"scaleColorBlend.outputR")  ($basebn+"BnA.scaleX");

 for($i=1;$i<($segment);$i++){
shadingNode -asUtility blendColors -n ($basebn+"scaleColorBlend"+$i);
connectAttr -f ($basebn+"legIkBn"+$i+".scale") ($basebn+"scaleColorBlend"+$i+".color2");
connectAttr -f ($basebn+"legFkBn"+$i+".scale") ($basebn+"scaleColorBlend"+$i+".color1");
connectAttr -f ($basebn+"scaleColorBlend"+$i+".outputR")  ($basebn+"Bn"+$i+".scaleX");
}


////////////////////////// 
select -r ($basebn+"legFkBnA"); 
 for($i=1;$i<($segment+1);$i++){
select -add ($basebn+"legFkBn"+$i);
}


 string $fksel[]=`ls -sl`;
for($i=0;$i<size($fksel);$i++){
    circle -ch 0 -o on -nr 1 0 0 -r ($scale*0.5)  -n ($fksel[$i]+"Con");
    group -n ($fksel[$i]+"ConGrpB");
    group -n ($fksel[$i]+"ConGrp");
    group -n ($fksel[$i]+"ConGrpA");
    select -r ($fksel[$i]);
    select -add ($fksel[$i]+"ConGrpA");
    delete `parentConstraint`;
    select -r ($fksel[$i]+"Con");
    select -add ($fksel[$i]);
    parentConstraint;
    setAttr -lock true ($fksel[$i]+"Con.tx");
    setAttr -lock true ($fksel[$i]+"Con.ty");
    setAttr -lock true ($fksel[$i]+"Con.tz");  
    setAttr -lock true ($fksel[$i]+"Con.sx");
    setAttr -lock true ($fksel[$i]+"Con.sy");
    setAttr -lock true ($fksel[$i]+"Con.sz"); 
    
    string $shape[]=`listRelatives -s ($fksel[$i]+"Con")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }   
     
}

select -r ($basebn+"legFkBn1ConGrpA");
select -add ($basebn+"legFkBnACon");
parent;


 for($i=1;$i<($segment);$i++){
int $j=$i+1;
    select -r ($basebn+"legFkBn"+$j+"ConGrpA");
select -add ($basebn+"legFkBn"+$i+"Con");
parent;
}

/////////////////
int $fknumbn=size($fksel);
select -r ($fksel[($fknumbn-1)]+"Con");
addAttr -ln "rotx"  -at double -k 1 ;
addAttr -ln "roty"  -at double -k 1 ;
addAttr -ln "rotz"  -at double -k 1 ;
addAttr -ln "showCon"  -at bool -k 1 ;
   

for($i=0;$i<($fknumbn);$i++){
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.rotx") ($fksel[$i]+"ConGrp.rotateX");
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.roty") ($fksel[$i]+"ConGrp.rotateY");
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.rotz") ($fksel[$i]+"ConGrp.rotateZ");    
}

for($i=0;$i<($fknumbn-1);$i++){
     string $shap[]=`listRelatives -s ($fksel[$i]+"Con")`;
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.showCon") ($shap[0]+".v");    
}

//////////////////////////////////////

select -r ($basebn+"Bn"+$segment);

circle -ch 0 -o on -nr 1 0 0 -r ($scale*0.5)  -n ($basebn+"IKFK");
    group -n ($basebn+"IKFKGrp");
    select -r ($basebn+"Bn"+$segment);
    select -add ($basebn+"IKFKGrp");
    parentConstraint;
    
    setAttr -lock true($basebn+"IKFK.tx");
    setAttr -lock true ($basebn+"IKFK.ty");
    setAttr -lock true ($basebn+"IKFK.tz");  
    setAttr -lock true ($basebn+"IKFK.sx");
    setAttr -lock true ($basebn+"IKFK.sy");
    setAttr -lock true ($basebn+"IKFK.sz");

    setAttr -lock true ($basebn+"IKFK.rx");
    setAttr -lock true ($basebn+"IKFK.ry");
    setAttr -lock true ($basebn+"IKFK.rz"); 
        setAttr -lock true ($basebn+"IKFK.v"); 
        
select -r ($basebn+"IKFK.cv[1]");
select -tgl ($basebn+"IKFK.cv[3]");
select -tgl ($basebn+"IKFK.cv[5]");
select -tgl ($basebn+"IKFK.cv[7]");

scale -r  0.2 0.2 0.2 ;       

       
select -r ($basebn+"IKFK.cv[0:7]") ;
string $gttextm[];
int $gttextnum=`tokenize ($basebn) "_" $gttextm`;
string $gtside=($gttextm[1]);
if($gtside=="r"){
move -r -ls -wd 0 (0-$scale*1.5) 0 ;
}else{
move -r -ls -wd 0 ($scale*1.5) 0 ; 
}

setAttr ($basebn+"IKFK.overrideEnabled") 1;
setAttr ($basebn+"IKFK.overrideColor") 6;

/////////////
string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
select -r ($conN);
select -add ($basebn+"IKFKGrp");
scaleConstraint;
}
////////////////

  select -r ($basebn+"IKFK");
addAttr -ln "ikfk"  -at double  -min 0 -max 10 -dv 10 -k 1;
shadingNode -asUtility setRange -n  ($basebn+"ikfksetrange");
connectAttr -f ($basebn+"IKFK.ikfk") ($basebn+"ikfksetrange.valueX");
setAttr ($basebn+"ikfksetrange.maxX") 1;
setAttr ($basebn+"ikfksetrange.oldMaxX") 10;
shadingNode -asUtility reverse -n ($basebn+"ikfkreverse");

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($basebn+"ikfkreverse.inputX");

connectAttr -f ($basebn+"ikfkreverse.outputX") ($basebn+"scaleColorBlend.blender");
 for($i=1;$i<($segment);$i++){
connectAttr -f ($basebn+"ikfkreverse.outputX") ($basebn+"scaleColorBlend"+$i+".blender");
}

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($upconstraintp[0]+"."+$basebn+"legIkBnAW1");
connectAttr -f ($basebn+"ikfkreverse.outputX") ($upconstraintp[0]+"."+$basebn+"legFkBnAW0");

 for($i=1;$i<($segment+1);$i++){
    string $constraintpC[]=`listConnections -s 0 -d 1 ($basebn+"legIkBn"+$i+".scale")`;
connectAttr -f ($basebn+"ikfksetrange.outValueX") ($constraintpC[0]+"."+$basebn+"legIkBn"+$i+"W1");
connectAttr -f ($basebn+"ikfkreverse.outputX") ($constraintpC[0]+"."+$basebn+"legFkBn"+$i+"W0");
}


    }else{
     select -r  $basebn;
 rename ($basebn+"legIkBnA");
 for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
 rename ($basebn+"legIkBn"+$i);
         }   
    }
 select -r ($basebn+"legIkBnA");
   
}


 string $iksel[]=`ls -sl`;
    $basebn=$iksel[0];
  
  
    select -r ($basebn);
    pickWalk -d down;
    if($segment>2){
        pickWalk -d down;
    }
    string $elbowbn[]=`ls -sl`;
    
     select -r ($basebn);
    pickWalk -d down;
    for($i=1;$i<$segment;$i++){
            pickWalk -d down;
    }
    string $end[]=`ls -sl`;
    string $endbn=$end[0];

int $spring=`checkBox -q -v gtikSpringSolverBox`;

if($spring==1&&$segment>2){
    string $p[]=`listRelatives -p ($basebn)`;
    float $pp[]=`joint -q -p ($basebn)`;
    select -r ($basebn);
    pickWalk -d down;
    string $secbn[]=`ls -sl`;
    float $pp1[]=`joint -q -p ($secbn[0])`;

    select -cl;
    joint -p ($pp[0]) ($pp[1]) ($pp[2]) -n ($basebn+"root") ;
    joint -p ($pp1[0]) ($pp1[1]) ($pp1[2]) -n ($basebn+"rootEnd") ;
    joint -e -zso -oj xyz -sao yup ($basebn+"root");    
 if(size($p)>0){
     select -r ($basebn+"root") ;
     select -add ($p[0]);
     parent;
     }
  select -r ($basebn);
  select -add  ($basebn+"root") ;
  parent; 
  setAttr ($basebn+"root.radius") 0.01 ;
  setAttr ($basebn+"rootEnd.tx") 0.01 ;
  setAttr ($basebn+"rootEnd.radius") 0.01 ;
}

//select -r ($basebn) ;

select -r ($basebn+".rotatePivot") ;
select -add ($endbn+".rotatePivot") ;
if($spring==1&&$segment>2){
  ikSpringSolver;
  ikHandle -sol ikSpringSolver;
}else{
 ikHandle -sol ikRPsolver; 
}

string $ikhandle[]=`ls -sl`;
select -r ($ikhandle[0]);
rename ($sel[$ii]+"ikhandle");

string $endEffector[]=`listConnections -s 1 -d 0 ($sel[$ii]+"ikhandle.endEffector")`;
setAttr ($endEffector[0]+".visibility") 0;
setAttr -lock true ($endEffector[0]+".v");

setAttr ($basebn+".rx") 0 ;
setAttr ($basebn+".ry") 0 ;
setAttr ($basebn+".rz") 0 ;

///////////////////////
curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($sel[$ii]+"polerCon");


group -n ($sel[$ii]+"polerConGrp");
group -n ($sel[$ii]+"polerConGrpB");
group -n ($sel[$ii]+"polerConGrpA");
scale -r ($scale*0.5) ($scale*0.5) ($scale*0.5);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;


select -r ($elbowbn[0]);
select -add ($sel[$ii]+"polerConGrpA");
delete `parentConstraint`;

float $dis=`getAttr ($elbowbn[0]+".tx")`;
///////////////////
spaceLocator -p 0 0 0 -n ($elbowbn[0]+"locTemp");
select -r ($basebn) ;
select -add ($endbn) ;
select -add ($elbowbn[0]+"locTemp");
delete `pointConstraint`;


select -r ($elbowbn[0]);
pickWalk -d down;
select -add ($sel[$ii]+"polerConGrpA");
delete`aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 -1 0 -worldUpType "object" -worldUpObject  ($elbowbn[0]+"locTemp")`;

delete ($elbowbn[0]+"locTemp");
setAttr  ($sel[$ii]+"polerConGrp.ty") ($segment*(abs($dis))/2);

spaceLocator -p 0 0 0 -n ($elbowbn[0]+"PolerFollowLoc");
group -n ($elbowbn[0]+"PolerFollowLocGrp");

select -r ($basebn);
select -add ($elbowbn[0]+"PolerFollowLocGrp");
delete`parentConstraint`;
string $bnP[]=`listRelatives -p ($basebn)`;
if(size($bnP)>0){
    select -r ($elbowbn[0]+"PolerFollowLocGrp");
    select -add ($bnP[0]);
    parent;
}else if($fk==1){
  select -r ($elbowbn[0]+"PolerFollowLocGrp");
    select -add ($sel[$ii]+"legFkBnAConGrpA") ;
    parent;     
}


setAttr ($elbowbn[0]+"PolerFollowLoc.v") 0;
setAttr -lock true ($elbowbn[0]+"PolerFollowLoc.v");

spaceLocator -p 0 0 0 -n ($elbowbn[0]+"PolerFixLoc");
group -n ($elbowbn[0]+"PolerFixLocGrp");

select -r ($sel[$ii]+"polerCon");
select -add ($elbowbn[0]+"PolerFixLocGrp");
delete`parentConstraint`;

setAttr ($elbowbn[0]+"PolerFixLoc.v") 0;
setAttr -lock true ($elbowbn[0]+"PolerFixLoc.v");

select -r ($elbowbn[0]+"PolerFixLoc");
select -add ($elbowbn[0]+"PolerFollowLoc");
select -add  ($sel[$ii]+"polerConGrpB");
string $polerCons[]=`parentConstraint -mo`;
select -add  ($sel[$ii]+"polerCon");
addAttr -ln "follow"  -at double  -min 0 -max 10 -dv 0 -k 1;
shadingNode -asUtility setRange -n ($elbowbn[0]+"PolerFollowSetRange");
connectAttr -f ($sel[$ii]+"polerCon.follow") ($elbowbn[0]+"PolerFollowSetRange.valueX");
setAttr ($elbowbn[0]+"PolerFollowSetRange.maxX") 1;
setAttr ($elbowbn[0]+"PolerFollowSetRange.oldMaxX") 10;
shadingNode -asUtility reverse -n ($elbowbn[0]+"PolerFollowReverse");
connectAttr -f ($elbowbn[0]+"PolerFollowSetRange.outValueX") ($elbowbn[0]+"PolerFollowReverse.inputX");
connectAttr -f ($elbowbn[0]+"PolerFollowSetRange.outValueX") ($polerCons[0]+"."+$elbowbn[0]+"PolerFollowLocW1");
connectAttr -f ($elbowbn[0]+"PolerFollowReverse.outputX") ($polerCons[0]+"."+$elbowbn[0]+"PolerFixLocW0");


curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($sel[$ii]+"Con");

group -n ($sel[$ii]+"ConGrp");
group -n ($sel[$ii]+"ConGrpA");

string $gttextm[];
int $gttextnum=`tokenize ($basebn) "_" $gttextm`;
string $gtside=($gttextm[1]);
if($gtside=="r"){
select -r ($sel[$ii]+"ConGrpA");
scale -r (0-$scale) (0-$scale) (0-$scale);
setAttr ($sel[$ii]+"ConGrpA.rx") 180;
setAttr ($sel[$ii]+"polerConGrp.scaleZ") -1;
}else{
select -r ($sel[$ii]+"ConGrpA");
scale -r ($scale) ($scale) ($scale);      
}

select -r ($sel[$ii]+"ikhandle");
select -add ($sel[$ii]+"ConGrpA");
delete `pointConstraint`;

if($handFoot==1){
  select -r ($endbn); 
  select -add ($sel[$ii]+"ConGrpA");
delete `parentConstraint`; 
}

spaceLocator -p 0 0 0 -n ($sel[$ii]+"legIkBn"+$segment+"rotLoc");
group -n ($sel[$ii]+"legIkBn"+$segment+"rotLocGrp");

select -r ($sel[$ii]+"legIkBn"+$segment);
select -add ($sel[$ii]+"legIkBn"+$segment+"rotLocGrp");
delete `parentConstraint`;

select -r ($sel[$ii]+"legIkBn"+$segment+"rotLocGrp");
select -add ($sel[$ii]+"Con");
parent;

select -r ($sel[$ii]+"legIkBn"+$segment+"rotLoc");
select -add ($sel[$ii]+"legIkBn"+$segment);
orientConstraint;

setAttr ($sel[$ii]+"legIkBn"+$segment+"rotLoc.visibility") 0;
setAttr -lock true ($sel[$ii]+"legIkBn"+$segment+"rotLoc.v");
//////////////////


select -r ($sel[$ii]+"polerCon");
select -add ($sel[$ii]+"ikhandle");
poleVectorConstraint -weight 1;

select -r ($sel[$ii]+"ikhandle");
select -add ($sel[$ii]+"Con");
parent;


select -r ($sel[$ii]+"polerCon");
select -add ($sel[$ii]+"Con");
string $iksel[]=`ls -sl`;
for($i=0;$i<size($iksel);$i++){
    string $shape[]=`listRelatives -s ($iksel[$i])`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
     }else{
        setAttr ($shape[0]+".overrideColor") 6; 
     }
}

select -r ($elbowbn[0]+"PolerFollowLoc");
duplicate -rr;
rename ($elbowbn[0]+"PolerFollowLocUp");
select -r ($sel[$ii]+"Con");
setAttr ($elbowbn[0]+"PolerFollowLocUp.ty") 0.5;
select -add ($elbowbn[0]+"PolerFollowLoc");
int $aimX=1;
 if($gtside=="r")$aimX=-1;

aimConstraint -mo -weight 1 -aimVector $aimX 0 0 -upVector 0 1 0 -worldUpType "object" -worldUpObject ($elbowbn[0]+"PolerFollowLocUp");

if($spring==1&&$segment>2){
  select -r ($sel[$ii]+"Con");
  select -add  ($basebn+"root") ;
  aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "object" -worldUpObject ($sel[$ii]+"polerCon");

//////////////////

select -r ($sel[$ii]+"polerCon");
addAttr -ln "twsit"  -at double -k 1;
connectAttr -f ($sel[$ii]+"polerCon.twsit") ($sel[$ii]+"ikhandle.twist");

float $rx=`getAttr  ($basebn+".rotateX")`;

if($rx!=0){
setAttr ($sel[$ii]+"polerCon.twsit") 90;
    }
}

select -r ($sel[$ii]+"Con");
addAttr -ln "strech"  -at double  -min 1 -max 10 -dv 1.2 -k 1;
addAttr -ln "shortLimit"  -at double  -min .1 -max 5 -dv 1.0 -k 1;

if($segment==2){
addAttr -ln "lockElobow" -at double  - min 0 -max 10 -dv 0 -k 1;

distanceDimension -sp 0 0 0 -ep 1 0 0;
string $selloc[]=`ls -sl`;
select -r $selloc[1];
rename ($sel[$ii]+"UpDis");
select -r $selloc[0];
pickWalk -d up;
rename ($sel[$ii]+"UpDisloc1");
string $loc2[]=`listConnections -s 1 -d 0  ($sel[$ii]+"UpDisShape.startPoint")`;
rename $loc2[0] ($sel[$ii]+"UpDisloc2");
select -r $basebn;
select -add ($sel[$ii]+"UpDisloc1");
pointConstraint;

select -r $basebn;
pickWalk -d down;
select -add ($sel[$ii]+"UpDisloc2");
delete`pointConstraint`;
float $armUpDis=`getAttr  ($sel[$ii]+"UpDisShape.distance")`;

select -r ($sel[$ii]+"polerCon");
select -add ($sel[$ii]+"UpDisloc2");
pointConstraint;

distanceDimension -sp 0 0 0 -ep 1 0 0;
string $selloc[]=`ls -sl`;
select -r $selloc[1];
rename ($sel[$ii]+"DownDis");
select -r $selloc[0];
pickWalk -d up;
rename ($sel[$ii]+"DownDisloc1");
string $loc2[]=`listConnections -s 1 -d 0  ($sel[$ii]+"DownDisShape.startPoint")`;
rename $loc2[0] ($sel[$ii]+"DownDisloc2");
select -r ($sel[$ii]+"ikhandle");
select -add ($sel[$ii]+"DownDisloc1");
pointConstraint;

select -r $basebn;
pickWalk -d down;
select -add ($sel[$ii]+"DownDisloc2");
delete`pointConstraint`;
float $armDownDis=`getAttr  ($sel[$ii]+"DownDisShape.distance")`;

select -r ($sel[$ii]+"polerCon");
select -add ($sel[$ii]+"DownDisloc2");
pointConstraint;

select -r ($sel[$ii]+"DownDisloc2");
select -add ($sel[$ii]+"DownDisloc1");
select -add ($sel[$ii]+"UpDisloc1");
select -add ($sel[$ii]+"UpDisloc2");
select -add ($sel[$ii]+"DownDis");
select -add ($sel[$ii]+"UpDis");
group -n ($sel[$ii]+"DownUpDisGrp");

setAttr ($sel[$ii]+"DownUpDisGrp.v") 0;
setAttr -lock true ($sel[$ii]+"DownUpDisGrp.v") ;

shadingNode -asUtility multiplyDivide -n  ($sel[$ii]+"UpDisMulD0");
shadingNode -asUtility multiplyDivide -n  ($sel[$ii]+"DownDisMulD0");

string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
    connectAttr -f ($conN+".sy") ($sel[$ii]+"UpDisMulD0.input1X");
    connectAttr -f ($conN+".sy") ($sel[$ii]+"DownDisMulD0.input1X");
}else{
setAttr ($sel[$ii]+"DownDisMulD0.input1X") 1;
setAttr ($sel[$ii]+"UpDisMulD0.input1X") 1;
}

setAttr ($sel[$ii]+"UpDisMulD0.input2X")  $armUpDis;
setAttr ($sel[$ii]+"DownDisMulD0.input2X")  $armDownDis;

shadingNode -asUtility multiplyDivide -n  ($sel[$ii]+"UpDisMulD1");
shadingNode -asUtility multiplyDivide -n  ($sel[$ii]+"DownDisMulD1");
connectAttr -f ($sel[$ii]+"DownDisShape.distance") ($sel[$ii]+"DownDisMulD1.input1X");
connectAttr -f ($sel[$ii]+"UpDisShape.distance") ($sel[$ii]+"UpDisMulD1.input1X");

connectAttr -f ($sel[$ii]+"DownDisMulD0.outputX") ($sel[$ii]+"DownDisMulD1.input2X");
connectAttr -f ($sel[$ii]+"UpDisMulD0.outputX") ($sel[$ii]+"UpDisMulD1.input2X");

setAttr ($sel[$ii]+"UpDisMulD1.operation") 2;
setAttr ($sel[$ii]+"DownDisMulD1.operation") 2;

shadingNode -asUtility blendColors -n  ($sel[$ii]+"UpColorBlend");
shadingNode -asUtility blendColors -n  ($sel[$ii]+"DownColorBlend");
connectAttr -f ($sel[$ii]+"UpDisMulD1.outputX") ($sel[$ii]+"UpColorBlend.color1R");
connectAttr -f ($sel[$ii]+"DownDisMulD1.outputX") ($sel[$ii]+"DownColorBlend.color1R");

shadingNode -asUtility setRange -n ($sel[$ii]+"lockElbowSetRange");
connectAttr -f ($sel[$ii]+"Con.lockElobow") ($sel[$ii]+"lockElbowSetRange.valueX");
setAttr ($sel[$ii]+"lockElbowSetRange.maxX") 1;
setAttr ($sel[$ii]+"lockElbowSetRange.oldMaxX") 10;
connectAttr -f  ($sel[$ii]+"lockElbowSetRange.outValueX") ($sel[$ii]+"DownColorBlend.blender");
connectAttr -f  ($sel[$ii]+"lockElbowSetRange.outValueX") ($sel[$ii]+"UpColorBlend.blender");

}

///////////////////////////////////

distanceDimension -sp 0 0 0 -ep 0 1 0 ;
string $disnam[]=`ls -sl`;
select -r $disnam[0];
pickWalk -d up;
rename ($basebn+"upDisLoc");
select -r  $disnam[1];
rename  ($basebn+"legDis");
string $disShape[]=`listRelatives -s  ($basebn+"legDis")`;
string $loc[]=`listConnections -s 1 -d 0  ($disShape[0]+".startPoint")`;
rename ($loc[0])  ($basebn+"downDisLoc");

select -r ($basebn);
select -add ($basebn+"upDisLoc");
pointConstraint;

select -r ($sel[$ii]+"ikhandle");
select -add ($basebn+"downDisLoc");
pointConstraint;

setAttr ($sel[$ii]+"ikhandle.visibility") 0;
setAttr -lock true ($sel[$ii]+"ikhandle.v");

float $p1[]=`joint -q -p  ($basebn)`;
select -r ($basebn);
pickWalk -d down;
string $bn2[]=`ls -sl`;
float $p2[]=`joint -q -p  ($bn2[0])`;
float $p3[]=`joint -q -p  ($endbn)`;

/////////////////////////////////////////////////////////
if($segment>1){
string $selectbn="curve -d 1 -p  ";
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" -p "+($p2[0])+" "+$p2[1]+" "+$p2[2]+" -p ");
    select -r ($basebn);
    pickWalk -d down;
    pickWalk -d down;
    string $tempsel[]=`ls -sl`;
    string $curentjoint=$tempsel[0];
    
while($curentjoint != $endbn){
   float $p1[]=`joint -q -p  ($curentjoint)`;
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" -p ");
    pickWalk -d down;
    string $joint[]=`ls -sl`;
    $curentjoint=$joint[0];
}

   float $p1[]=`joint -q -p  ($endbn)`;
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" ;");
eval $selectbn;
}else{
  
string $selectbn="curve -d 1 -p  ";
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" -p "+($p2[0])+" "+$p2[1]+" "+$p2[2]+" -p ");

   float $p1[]=`joint -q -p  ($endbn)`;
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" ;");
eval $selectbn;  
    
}

rename ($basebn+"lencurve");
arclen -ch 1;
string $curve[]=`ls -sl`;

string $shapeAA[]=`listRelatives -s ($curve[0])`;
string $infoA[]=`listConnections -s 0 -d 1 ($shapeAA[0]+".worldSpace[0]")`;
float $legUplen=`getAttr ($infoA[0]+".arcLength")`;

float $length=`getAttr ($disShape[0]+".distance")`;

delete ($basebn+"lencurve");

shadingNode -asUtility multiplyDivide -n ($basebn+"disMulF") ;

string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
    connectAttr -f ($conN+".sy") ($basebn+"disMulF.input1X");
}else{
setAttr ($basebn+"disMulF.input1X") 1;}

setAttr ($basebn+"disMulF.input2X") $legUplen;

///////////////////////////////////////////////////////////////////////////////

shadingNode -asUtility multiplyDivide -n ($basebn+"disMul") ;
shadingNode -asUtility condition -n ($basebn+"disCnd") ;
connectAttr -f ($disShape[0]+".distance") ($basebn+"disMul.input1X");
setAttr ($basebn+"disMul.operation") 2;

connectAttr -f  ($basebn+"disMulF.outputX") ($basebn+"disMul.input2X");
connectAttr -f ($basebn+"disMul.outputX") ($basebn+"disCnd.firstTerm");
connectAttr -f ($basebn+"disMul.outputX") ($basebn+"disCnd.colorIfTrueR");

connectAttr -f ($sel[$ii]+"Con.shortLimit")  ($basebn+"disCnd.secondTerm");
connectAttr -f ($sel[$ii]+"Con.shortLimit")  ($basebn+"disCnd.colorIfFalseR");

setAttr ($basebn+"disCnd.operation") 2;

shadingNode -asUtility condition -n ($basebn+"disclampCnd") ;
connectAttr -f ($basebn+"disCnd.outColorR")  ($basebn+"disclampCnd.firstTerm");
connectAttr -f ($basebn+"disCnd.outColorR")  ($basebn+"disclampCnd.colorIfTrueR");

setAttr ($basebn+"disclampCnd.operation") 4;

connectAttr -f ($sel[$ii]+"Con.strech")  ($basebn+"disclampCnd.secondTerm");
connectAttr -f ($sel[$ii]+"Con.strech")  ($basebn+"disclampCnd.colorIfFalseR");

/////////////////

if($segment==2){
connectAttr -f ($basebn+"disclampCnd.outColorR")  ($sel[$ii]+"UpColorBlend.color2R");
connectAttr -f ($basebn+"disclampCnd.outColorR")  ($sel[$ii]+"DownColorBlend.color2R");

connectAttr -f ($sel[$ii]+"UpColorBlend.outputR")  ($basebn+".scaleX");
connectAttr -f ($sel[$ii]+"DownColorBlend.outputR") ($sel[$ii]+"legIkBn1.scaleX");
}else{
connectAttr -f ($basebn+"disclampCnd.outColorR") ($basebn+".scaleX");
for($i=1;$i<($segment);$i++){
    connectAttr -f ($basebn+"disclampCnd.outColorR") ($sel[$ii]+"legIkBn"+$i+".scaleX");
    }
}


select -r ($basebn+"upDisLoc");
select -add ($basebn+"downDisLoc");
select -add ($basebn+"legDis");
group -n  ($basebn+"DisLocGrp");
setAttr($basebn+"DisLocGrp.visibility") 0;
setAttr -lock true ($basebn+"DisLocGrp.v");

if($segment==2){
    select -r  ($basebn+"DisLocGrp");
    select -add ($sel[$ii]+"DownUpDisGrp") ;
    group -n ($sel[$ii]+"DisGrpAll") ;
}

////////////////////////////////////
if($ikfk==1&&$fk==1){
select -r ($sel[0]+"IKFK") ;
shadingNode -asUtility condition -n ($sel[$ii]+"IKFKshowIkCondition");
connectAttr -f ($sel[$ii]+"IKFK.ikfk") ($sel[$ii]+"IKFKshowIkCondition.firstTerm");
shadingNode -asUtility condition -n ($sel[$ii]+"IKFKshowFkCondition");
connectAttr -f ($sel[$ii]+"IKFK.ikfk") ($sel[$ii]+"IKFKshowFkCondition.firstTerm");
setAttr ($sel[$ii]+"IKFKshowFkCondition.secondTerm") 10;

connectAttr -f ($sel[$ii]+"IKFKshowFkCondition.outColorR") ($sel[$ii]+"legFkBnACon.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"polerConGrpA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"ConGrpA.visibility");

connectAttr -f ($sel[$ii]+"IKFKshowFkCondition.outColorR") ($sel[$ii]+"legFkBnA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"legIkBnA.visibility");
}


select -r ($sel[$ii]+"Con") ;
select -tgl ($sel[$ii]+"polerCon") ;
string $conik[]=`ls -sl`;
for($i=0;$i<size($conik);$i++){
    setAttr -lock true ( $conik[$i]+".sx");
 setAttr -lock true ( $conik[$i]+".sy");
 setAttr -lock true ( $conik[$i]+".sz");
}

 setAttr -lock true ($sel[$ii]+"polerCon.rx");
 setAttr -lock true ($sel[$ii]+"polerCon.ry");
 setAttr -lock true ($sel[$ii]+"polerCon.rz");

select -r ($sel[$ii]+"ConGrpA");
select -add ($sel[$ii]+"polerConGrpA") ;
select -add ($elbowbn[0]+"PolerFixLocGrp");
group -n  ($sel[$ii]+"ikConGrp");

if($segment==2){
select -r ($sel[$ii]+"DisGrpAll") ;  
}else{
select -r ($sel[$ii]+"legIkBnADisLocGrp") ;
}
if($fk==1)select -add ($sel[$ii]+"IKFKGrp") ;
group -n  ($sel[$ii]+"DonotmoveConGrp");
}

print "......................IK 控制器创建完成...........................";
}
///////////////////////
//曲线控制器缩放绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtConScaleWin(){

if(`window -ex gtConScaleWin`) deleteUI  -window gtConScaleWin;
window -wh 400 200 -title "老船角色绑定-☆-控制器缩放绑定工具！！！！！！" gtConScaleWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1178\"";
		
	separator -style double;
floatSliderGrp -l "曲线控制器缩放比例"  -min .1 -max 2 -f 1 -v 1 -fmn 0.1 -fmx 5 -cc "gtScaleCurveConproc;" butG;
	separator -style double;
button -l "缩放曲线控制器" -c "gtScaleCurveConproc" butH;

showWindow gtConScaleWin;

}

///////////////////
global proc gtScaleCurveConproc(){

float $gg=`floatSliderGrp -q -v  butG`;
string $sel[]=`ls -sl`;

float $scale=$gg;
for($i=0;$i<size($sel);$i++){
string $shap[]=`listRelatives -s ($sel[$i])`;
select -cl;
for($j=0;$j<size($shap);$j++){
    select -add ($shap[$j]+".cv[0:700000]");
    }
    scale -r ($scale) ($scale) ($scale);
    select -cl;
}
select -r ($sel);
}
///////////////
//批量蒙皮权重绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtCopySkinWeightsWin(){
   if(`window -ex gtCopySkinWeightsWin`) deleteUI -window gtCopySkinWeightsWin;
    window -wh 340 200  -t "老船角色绑定-☆-批量蒙皮权重绑定工具!" gtCopySkinWeightsWin;
    columnLayout -adj 1;
    text -l "点击下方按钮↓↓↓↓↓" -al "center";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40 -w 340 -c "showHelp -a \"http://www.animate8.com/archives/1238\"";
    rowColumnLayout -nc 2 -cw 1 240 -cw 2 120;

    textFieldGrp -l "蒙皮权重完成物体：" -text "" -cw2 120  110 gtLoarSkinObj;
    button  -l "载入蒙皮物体" -c "ttgLaodSkinObjNamProc" -w 80 ;
    setParent..;
    rowColumnLayout -nc 3 -cw 1 178 -cw 2 4 -cw 3 178;;
    
    button  -l "拷贝蒙皮权重" -c "gtCopySkinWeightsProc" ;
    text -l "";
    button  -l "" -c "" ;      
    showWindow gtCopySkinWeightsWin;   
}
//////////////////////////
global proc gtCopySkinWeightsProc(){
    string $sel[]=`ls -sl`;
    string $skinObj=`textFieldGrp -q -tx gtLoarSkinObj`;
    for($i=0;$i<size($sel);$i++){
    select -r ($skinObj) ;
    select -add ($sel[$i]);
    copySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint;
    }
}
//////////////////////
global proc ttgLaodSkinObjNamProc(){
string $gtCname="";
string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++)
    $gtCname+=(" "+$sel[$i]);
textFieldGrp  -e -text $gtCname gtLoarSkinObj;
}
/////////////////////////
//输出模型序列动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtOutputSequenceModelWin(){
 if(`window -ex gtoutputobjsequencemodelwin`)  deleteUI -window gtoutputobjsequencemodelwin;
window -wh 400 400 -t "老船角色绑定-☆-模型序列输出动画工具！" gtoutputobjsequencemodelwin;
columnLayout -adj 1 gtMaintColumnLay;
text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1245\"";
text -l "输出模型序列\n--------请注意本程序需要手动指定输出路径--------\n-------在路径浏览窗口中选择输出格式，命名输出文件--------\n-------只能输出obj、ma、mb、fbx、dae这五种文件格式---------\n--------可以选择多个物体同时输出--------\n-------输出文件名称：文件名称+选择顺序号+帧序号---------" text1;
textFieldButtonGrp -cw3 80 300 65 -l ("输出路径") -text "浏览输出路径" -bl "浏    览" -bc "gtoutputmodelTexGetDir;" gtTextField;

formLayout -h 100 gtform;

intFieldGrp -l "开始帧数/结束帧数" -nf 2 -v1 1 -v2 100 gtIntFa;

button -l "应用" -c "gtoutputobjsequencemodel;" but1;
formLayout -e

-af gtIntFa left 3 -af gtIntFa top 5  -af gtIntFa right 3
-af but1 left 3 -af but1 right 3 -ac but1 top 5 gtIntFa gtform;
setParent..;
showWindow gtoutputobjsequencemodelwin;
}

///////////////////////////////////////////////
global proc gtoutputmodelTexGetDir(){
     string $first=`workspace -q -fn`;
     setWorkingDirectory $first "" "";
     fileBrowserDialog  -m 1
                  -fc "gtoutputmodelCheckTexGetName"
                  -ft "extension"
                  -an "setpath";
      }
///////////////////////////////////////////////
global proc gtoutputmodelCheckTexGetName(string $dir,string $type){
textFieldButtonGrp -e -text ($dir)  gtTextField;
}

///////////////////////////////////////////////////////////

global proc gtoutputobjsequencemodel(){

string $sel[]=`ls -sl`;
int $start=`intFieldGrp  -q -v1 gtIntFa`;
int $end=`intFieldGrp  -q -v2 gtIntFa`;
string $path=`textFieldButtonGrp -q -text gtTextField`;
string $extension[];
int $num=`tokenize $path "." $extension`;

string $path2=$extension[1];

string $typ="";
if($path2=="ma")$typ="mayaAscii";
if($path2=="mb")$typ="mayaBinary";
if($path2=="obj")$typ="OBJexport";
if($path2=="fbx")$typ="FBX export";
if($path2=="dae")$typ="DAE_FBX export";

if($typ=="") error ("选择的格式不正确");
int $size=size($sel);
for ($j=0;$j<$size;$j++){
    
string $path1=($extension[0]+$j+".");

for($i=$start;$i<($end+1);$i++){
currentTime -e $i;
select -r ($sel[$j]);

file -force -options "groups=1;ptgroups=1;materials=1;smoothing=1;normals=1" -typ $typ -pr -es ($path1+$i+"."+$path2);
        }
    }
}
//////////////////////////////////////////// ///////////////////
//混合变形目标模型镜像绑定工具
//该工具原始代码，来源与外国网站，老船工作室对其进行修改、汉化，方便使用
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtcgTKabSymMesh (){
	global int $abSymTable[];
	
	global string $abSbg;
	int $sbgBnsEn = false; 
	string $selBaseGeo;
	
	if (size($abSymTable) > 0){ 
		$selBaseGeo = $abSbg;
		$sbgBnsEn = true;
	}
	
	if (`window -exists abSymWin`)deleteUI -window abSymWin;
		window -t "老船角色绑定-☆-混合变形目标模型镜像工具!" -w 180 -h 415 abSymWin;
	columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1263\"";
    setParent..;
        
	formLayout -numberOfDivisions 100 abSymForm;
	radioButtonGrp -l "镜像轴向:" -numberOfRadioButtons 3 -l1 "YZ" -l2 "XZ" -l3 "XY"
		-select 1 -columnWidth4 60 52 52 52 -onCommand "abSymCtl(\"saRbGrp\")" saRbGrp;
	separator sep1;
	text -l "全局容差：" tolTxt;
	textField -editable true -text ".001" tolFld;
	separator sep2;
	button -l "选择基础模型" -command "clear($abSymTable);abSymCtl(\"sbgBn\")" sbgBn;
	textField -editable true -text $selBaseGeo sbgFld;
	separator sep3;
	button -l "检查模型对称" -command "abSymCtl(\"favBn\")" csBn;
	button -l "镜像选择的顶点" -enable $sbgBnsEn -command "abSymCtl(\"smBn\")" smBn;
	button -l "选择移动的顶点" -enable $sbgBnsEn -command "abSymCtl(\"smvBn\")" smvBn;
	separator sep4;
	button -l "绝对镜像模型" -enable $sbgBnsEn -command "abSymCtl(\"msBn\")" msBn;
	button -l "翻转模型" -enable $sbgBnsEn -command "abSymCtl(\"fsBn\")" fsBn;
	//button -l "完全镜像模型" -enable $sbgBnsEn -command "gtBlendshapeMirrorProc" fsBna;	
	button -l "恢复到基础形态" -enable $sbgBnsEn  -command "abSymCtl(\"rsBn\")" rsBn;
	checkBox -l "操作 -X 到 +X" -value true maChkBx;
	checkBox -l "应用轴心点作为原点" -value true upoChkBx;
	button -l "关闭" -height 24 -command "abSymCtl(\"cBn\")" cBn;
	
	int $tMarg = 7;
	int $lMarg = 5;
	int $rMarg = 5;
	int $ctSpc = 5; 
	int $cbSpc = 20;
		
	formLayout -e
		
		-attachForm saRbGrp "top" $tMarg
		-attachForm saRbGrp "left" 18
		
		-attachForm sep1 "left" $lMarg
		-attachControl sep1 "top" $ctSpc saRbGrp
		-attachForm sep1 "right" $rMarg
		
		-attachForm tolTxt "left" $lMarg
		-attachControl tolTxt "top" ($ctSpc+2) sep1
		-attachControl tolFld "left" $ctSpc tolTxt
		-attachControl tolFld "top" $ctSpc sep1
		-attachForm tolFld "right" $rMarg
		
		-attachForm sep2 "left" $lMarg
		-attachControl sep2 "top" $ctSpc tolFld
		-attachForm sep2 "right" $rMarg
		
		-attachForm sbgBn "left" $lMarg
		-attachControl sbgBn "top" $ctSpc sep2
		-attachForm sbgBn "right" $rMarg
		
		-attachForm sbgFld "left" $lMarg
		-attachControl sbgFld "top" $ctSpc sbgBn
		-attachForm sbgFld "right" $rMarg
		
		-attachForm sep3 "left" $lMarg
		-attachControl sep3 "top" $ctSpc sbgFld
		-attachForm sep3 "right" $rMarg
		
		-attachForm csBn "left" $lMarg
		-attachControl csBn "top" $ctSpc sep3
		-attachForm csBn "right" $rMarg
		
		-attachForm smBn "left" $lMarg
		-attachControl smBn "top" $ctSpc csBn
		-attachForm smBn "right" $rMarg
		
		-attachForm smvBn "left" $lMarg
		-attachControl smvBn "top" $ctSpc smBn
		-attachForm smvBn "right" $rMarg	   
						
		-attachForm sep4 "left" $lMarg
		-attachControl sep4 "top" $ctSpc smvBn
		-attachForm sep4 "right" $rMarg
		
		-attachForm rsBn "left" $lMarg
		-attachControl rsBn "top" $ctSpc sep4
		-attachForm rsBn "right" $rMarg
		
		-attachForm msBn "left" $lMarg
		-attachControl msBn "top" $ctSpc rsBn
		-attachForm msBn "right" $rMarg
				
		-attachForm fsBn "left" $lMarg
		-attachControl fsBn "top" $ctSpc msBn
		-attachForm fsBn "right" $rMarg
				
		//-attachForm fsBna "left" $lMarg
		//-attachControl fsBna "top" $ctSpc fsBn
		//-attachForm fsBna "right" $rMarg
				
		-attachForm maChkBx "left" $lMarg
		-attachControl maChkBx "top" $ctSpc fsBn
		
		-attachForm upoChkBx "left" $lMarg
		-attachControl upoChkBx "top" $ctSpc maChkBx
		
		-attachForm cBn "left" $lMarg
		-attachControl cBn "top" $cbSpc upoChkBx
		-attachForm cBn "right" $rMarg
		
		abSymForm;
	
	showWindow abSymWin;
}
///////////////////////////
global proc gtBlendshapeMirrorProc()
{
       string $sel[]=`ls -sl`;
	   string $currentBaseMesh=`textField -q -text  sbgFld`;

	if (($currentBaseMesh == ""))
		warning "请载入一个基础模型和一个混合变形节点\n";
	   for($i=0;$i<size($sel);$i++){
		select -r ($sel[$i]);
		duplicate -rr;
		string $newShapes[] = `ls -sl`;
		setAttr -l 0 ($newShapes[0]+".tx");
		setAttr -l 0 ($newShapes[0]+".ty");
		setAttr -l 0 ($newShapes[0]+".tz");
		setAttr -l 0 ($newShapes[0]+".sx");
		setAttr -l 0 ($newShapes[0]+".sy");
		setAttr -l 0 ($newShapes[0]+".sz");
		setAttr -l 0 ($newShapes[0]+".rx");
		setAttr -l 0 ($newShapes[0]+".ry");
		setAttr -l 0 ($newShapes[0]+".rz");
		setAttr -l 0 ($newShapes[0]+".v");
				    
        rename ($newShapes[0]+"_side");    
        
        select -r $currentBaseMesh;
        duplicate -rr;
        rename ($newShapes[0]+"_origin");
		string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
		for ($ii = 0; $ii < 9; $ii++)
		{
	     setAttr -lock 0 (($newShapes[0]+"_origin") + $UnlockAttributes[$ii]);
	         }
	    
	    select -r  ($newShapes[0]+"_origin");
	    select -add   ($sel[$i]);  
        
        string $tempBS[]=`blendShape -frontOfChain` ;
        setAttr ($tempBS[0]+"."+($newShapes[0]+"_origin")) 1;
        
        select -r ($sel[$i]);  
        DeleteHistory;
        select -r  ($newShapes[0]+"_origin");
        delete;
        
        select -r ($sel[$i]);  
        duplicate -rr;
        rename ($newShapes[0]+"_sideA");    
        
        select -r ($newShapes[0]+"_sideA");  
        duplicate -rr;
        rename ($newShapes[0]+"_sideAdirver");    
        
      	select -r ($newShapes[0]+"_sideA"); 
      	select -add ($newShapes[0]+"_sideAdirver");  
      	doWrapArgList "7" { "1","0","1", "2", "1", "1", "1", "0" };

      	//CreateWrap; 
      	string $shap[]=`listRelatives -s ($newShapes[0]+"_sideA")`;
      	$tempString=`listConnections ($shap[0]+".worldMatrix[0]")`;
		rename $tempString[0] ($newShapes[0]+"_sideA_wrap");
		setAttr ($newShapes[0]+"_sideA_wrap.exclusiveBind") 1;
        connectAttr -f ($newShapes[0]+"_side.outMesh") ($newShapes[0]+"_sideAdirver.inMesh");
        string $baseM[]=`listConnections -d 0 -s 1 ($newShapes[0]+"_sideA_wrap.basePoints[0]")`;
     	setAttr ($baseM[0]+".scaleX") -1;
        setAttr ($newShapes[0]+"_sideAdirver.scaleX") -1;		
  
        select -r ($newShapes[0]+"_sideA"); 
        select -add ($sel[$i]);  
        
        string $tempBS[]=`blendShape -frontOfChain` ;
        setAttr ($tempBS[0]+"."+($newShapes[0]+"_sideA")) 1;

        select -r ($sel[$i]);  
        DeleteHistory;
        select -r ($newShapes[0]+"_side"); 
        select -add ($newShapes[0]+"_sideA"); 
        select -add ($newShapes[0]+"_sideAdirver"); 
        select -add ($baseM[0]);       
        delete;		
            
		}
		select -r ($sel);								
}
////////////////////////////////
global proc string[] abCheckSym (string $obj, int $axis, float $tol, int $bTable, int $usePiv) {

	global int $abSymTable[];
	string $aNegVerts[];
	string $aPosVerts[];
	string $aNonSymVerts[];
	string $aStr[];
	string $vtx;
	string $str;
	int $aPosVertsInt[];
	int $aNegVertsInt[];
	int $aInt[];
	int $totVtx;
	int $i;
	int $j;
	int $mAxisInd = $axis - 1; 
	int $axis2Ind = ($mAxisInd + 1) % 3;
	int $axis3Ind = ($mAxisInd + 2) % 3;
	int $mod;
	int $prog;
	int $vertCounter = 0;
	float $aNegVertTrans[];
	float $aPosVertTrans[];
	float $aVtxTrans[];
	float $aVtx2Trans[];
	float $bBox[];
	float $mid;
	float $midOffset;
	float $posOffset;
	float $negOffset;
	float $flt;
	float $progNum;
	float $progDenom;
	float $test1;
	float $test2;
	
	if ($usePiv){
		$aVtxTrans = `xform -q -ws -t $obj`;
		$mid = $aVtxTrans[$mAxisInd];
	}else{
		if ($bTable){
			clear($abSymTable);
			$bBox = `xform -q -ws -boundingBox $obj`;
			$mid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);
		}else{
			$mid = 0; 
		}
	}
		
	$aInt = `polyEvaluate -v $obj`; 
	$totVtx = $aInt[0];
	
	waitCursor -state on;
	progressWindow -title "工作" -progress 0 -status "检索";
	$progDenom = $totVtx;
	$flt = ceil($progDenom/50);
	$mod = $flt;

	for ($i=0;$i<$totVtx;$i++){
		

		if (($i % $mod) == 0){ 
			$progNum = $i;
			$prog = ($progNum/$progDenom)*100.0;
			progressWindow -e -progress $prog;
		}
		
		$vtx = $obj+".vtx["+$i+"]";
		$aVtxTrans = `xform -q -ws -translation $vtx`;
		$midOffset = $aVtxTrans[$mAxisInd] - $mid;
		if ($midOffset >= 0){
			$aPosVerts[size($aPosVerts)] = $vtx;
			if ($bTable){$aPosVertsInt[size($aPosVertsInt)] = $i;}
			$aVtxTrans = `xform -q -ws -t $vtx`;
			$aPosVertTrans[size($aPosVertTrans)] = $aVtxTrans[$mAxisInd];
		}else{
			if ($midOffset < 0){
				$aNegVerts[size($aNegVerts)] = $vtx;
				if ($bTable){$aNegVertsInt[size($aNegVertsInt)] = $i;}
				$aVtxTrans = `xform -q -ws -t $vtx`;
				$aNegVertTrans[size($aNegVertTrans)] = $aVtxTrans[$mAxisInd];
			}
		}
	}

	if ($bTable){$str = "创建对称模式";}else{$str = "检查对称结果";}
	progressWindow -e -progress 0 -status $str;
	$progDenom = size($aPosVerts);
	$flt = ceil($progDenom/50);
	$mod = $flt;
		
	for ($i=0;$i<size($aPosVerts);$i++){
		
		if (($i % $mod) == 0){ 
			$progNum = $i;
			$prog = ($progNum/$progDenom)*100.0;
			progressWindow -e -progress $prog;
		}
		
		$vtx = $aPosVerts[$i];
		$posOffset = ($aPosVertTrans[$i] - $mid);
		if ($posOffset < $tol){
			$aPosVerts[$i] = "m";
			$vertCounter ++;
			continue;
		}
		for ($j=0;$j<size($aNegVerts);$j++){
			if ($aNegVerts[$j] == "m"){continue;}
			$negOffset = $mid - $aNegVertTrans[$j];
			if ($negOffset < $tol){
				$aNegVerts[$j] = "m";
				$vertCounter ++;
				continue;
			}
			if (abs($posOffset - $negOffset) <= $tol){
				$aVtxTrans = `xform -q -ws -t $vtx`;
				$aVtx2Trans = `xform -q -ws -t $aNegVerts[$j]`;
				$test1 = $aVtxTrans[$axis2Ind] - $aVtx2Trans[$axis2Ind];
				$test2 = $aVtxTrans[$axis3Ind] - $aVtx2Trans[$axis3Ind];
				if (abs($test1) < $tol && abs($test2) < $tol){

					if ($bTable){
						$abSymTable[size($abSymTable)] = $aPosVertsInt[$i];
						$abSymTable[size($abSymTable)] = $aNegVertsInt[$j];
						$vertCounter += 2;
					}
					$aPosVerts[$i] = $aNegVerts[$j] = "m"; 
					break;
				}
			}
		}
	}
	$aStr = {"m"};
	$aPosVerts = stringArrayRemove($aStr, $aPosVerts);
	$aNegVerts = stringArrayRemove($aStr, $aNegVerts);
	$aNonSymVerts = stringArrayCatenate($aPosVerts, $aNegVerts);

	if ($bTable){$int = size($abSymTable) + $vertCounter;
		if ($vertCounter != $totVtx){
			warning "基础模型不是左右对称，有些顶点不会达到预期结果";
		}else{
			print "基础模型是左右对称的模型";
		}
	}
	progressWindow -endProgress;
	waitCursor -state off;
	return $aNonSymVerts;
}


global proc int abGetSymVtx (int $vtxInt){
	global int $abSymTable[];
	int $mVtxInt = -1;
	int $i;
	
	for ($i=0;$i<size($abSymTable);$i++){
		if ($vtxInt == $abSymTable[$i]){
			if (($i % 2) == 0){
				$mVtxInt = $abSymTable[$i+1];
			}else{
				$mVtxInt = $abSymTable[$i-1];
			}
			break;
		}
	}
	return $mVtxInt;
}


global proc abMirrorSel (string $obj, string $baseObj, string $aSelVerts[], int $axis, int $negToPos, int $flip, int $usePiv, float $tol){

	global int $abSymTable[];
	string $aStr[];
	string $str;
	string $vtx;
	string $obj;
	int $aPosVertsInt[];
	int $aNegVertsInt[];
	int $aZeroVertsInt[];
	int $mAxisInd = $axis - 1; 
	int $axis2Ind = ($mAxisInd + 1) % 3;
	int $axis3Ind = ($mAxisInd + 2) % 3;
	int $vertNum;
	int $i;
	int $j;
	int $prog;
	int $mod;
	int $showProg = false; 
	float $bBox[];
	float $baseMid;
	float $baseMidOffset;
	float $aVtxTrans[];
	float $aFlpVtxTrans[];
	float $mid; 
	float $progNum;
	float $progDenom;
	float $flt;
	
	if ($usePiv){
		$aVtxTrans = `xform -q -ws -t $obj`;
		$mid = $aVtxTrans[$mAxisInd];
		$aVtxTrans = `xform -q -ws -t $baseObj`;
		$baseMid = $aVtxTrans[$mAxisInd];
	}else{
		$mid = 0;
		$bBox = `xform -q -ws -boundingBox $baseObj`;
		$baseMid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);
	}
	
	waitCursor -state on;
	if (size($aSelVerts) > 200){ 
		$showProg = true;
		$str = "镜像形态";
		if ($flip){$str = "翻转形态";}
		progressWindow -title "工作" -progress 0 -status $str;
		$progDenom = size($aSelVerts);
		$flt = ceil($progDenom/50);
		$mod = $flt;
	}
		
	for ($i=0;$i<size($aSelVerts);$i++){
		
		if ($showProg){
			if (($i % $mod) == 0){ 
				$progNum = $i;
				$prog = ($progNum/$progDenom)*50.0;
				progressWindow -e -progress $prog;
			}
		}
		
		$vtx = $aSelVerts[$i];
		$vertNum = match("([0-9])+", (match ("([0-9])+\\]", $vtx)));
		$aVtxTrans = `xform -q -ws -translation ($baseObj+".vtx["+$vertNum+"]")`;
		$baseMidOffset = $aVtxTrans[$mAxisInd] - $baseMid;
		if (abs($baseMidOffset) < $tol){
			$aZeroVertsInt[size($aZeroVertsInt)] = $vertNum;
			continue;
		}
		if ($baseMidOffset > 0){
			$aPosVertsInt[size($aPosVertsInt)] = $vertNum;
			continue;
		}
		if ($baseMidOffset < 0){
			$aNegVertsInt[size($aNegVertsInt)] = $vertNum;
			continue;
		}
	}
	
	if ($negToPos){
		$aPosVertsInt = $aNegVertsInt;
	}
	
	if ($showProg){
		$progDenom = size($aPosVertsInt);
		$flt = ceil($progDenom/50);
		$mod = $flt;
	}
	
	for ($i=0;$i<size($aPosVertsInt);$i++){
		
		if ($showProg){
			if (($i % $mod) == 0){ 
				$progNum = $i;
				$prog = ($progNum/$progDenom)*50.0 + 50;
				progressWindow -e -progress $prog;
			}
		}
		
		$vertNum = abGetSymVtx($aPosVertsInt[$i]);
		if ($vertNum != -1){
			if (!$flip){ 
				$aVtxTrans = `xform -q -ws -t ($obj+".vtx["+$aPosVertsInt[$i]+"]")`;
				$aVtxTrans[$mAxisInd] = 2*$mid - $aVtxTrans[$mAxisInd];
				xform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+".vtx["+$vertNum+"]");
			}else{ 
				$aVtxTrans = `xform -q -ws -t ($obj+".vtx["+$aPosVertsInt[$i]+"]")`;
				$aVtxTrans[$mAxisInd] = 2*$mid - $aVtxTrans[$mAxisInd];
				$aFlpVtxTrans = `xform -q -ws -t ($obj+".vtx["+$vertNum+"]")`;
				$aFlpVtxTrans[$mAxisInd] = 2*$mid - $aFlpVtxTrans[$mAxisInd];
				xform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+".vtx["+$vertNum+"]");
				xform -ws -t $aFlpVtxTrans[0] $aFlpVtxTrans[1] $aFlpVtxTrans[2] ($obj+".vtx["+$aPosVertsInt[$i]+"]");
			}
		}
	}
	for ($i=0;$i<size($aZeroVertsInt);$i++){ 
		if ($flip){
			$aVtxTrans = `xform -q -ws -t ($obj+".vtx["+$aZeroVertsInt[$i]+"]")`;
			$aVtxTrans[$mAxisInd] = 2*$mid - $aVtxTrans[$mAxisInd];
			xform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+".vtx["+$aZeroVertsInt[$i]+"]");
		}else{
			$aVtxTrans = `xform -q -ws -t ($obj+".vtx["+$aZeroVertsInt[$i]+"]")`;
			$aVtxTrans[$mAxisInd] = $mid;
			xform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+".vtx["+$aZeroVertsInt[$i]+"]");
		}
	}
	if ($showProg){progressWindow -endProgress;}
	waitCursor -state off;
}


global proc abRevertSel(string $aSelVerts[], string $obj, string $baseObj){
	string $str;
	string $vtx;
	int $vertNum;
	int $i;
	int $prog;
	int $mod;
	int $showProg = false;  
	float $aBaseTrans[];
	float $progNum;
	float $progDenom;
	float $flt;
	
	if (size($aSelVerts) > 200){ 
		$showProg = true;
		progressWindow -title "工作" -progress 0 -status "恢复默认形态";
		$progDenom = size($aSelVerts);
		$flt = ceil($progDenom/50);
		$mod = $flt;
	}
	
	waitCursor -state on;
	for ($i=0;$i<size($aSelVerts);$i++){
		if ($showProg){
			if (($i % $mod) == 0){ 
				$progNum = $i;
				$prog = ($progNum/$progDenom)*100;
				progressWindow -e -progress $prog;
			}
		}
		$vtx = $aSelVerts[$i];
		$vertNum = match("([0-9])+", (match ("([0-9])+\\]", $vtx)));
		$aBaseTrans = `xform -q -os -t ($baseObj+".vtx["+$vertNum+"]")`;
		xform -os -t $aBaseTrans[0] $aBaseTrans[1] $aBaseTrans[2] $vtx;
	}
	if ($showProg){progressWindow -endProgress;}	
	waitCursor -state off;
}


global proc string[] abSelMovedVerts(string $obj, string $baseObj, float $tol){
	int $aInt[];
	int $totVtx;
	int $i;
	int $j;
	int $posDif;
	float $tFlt;
	float $aVtxTrans[];
	float $aVtx2Trans[];
	string $objStr = $obj+".vtx[";
	string $baseObjStr = $baseObj+".vtx[";
	string $aRetSel[];
	
	$aInt = `polyEvaluate -v $obj`; 
	$totVtx = $aInt[0];
	for ($i=0;$i<$totVtx;$i++){
		$posDif = false;
		$aVtx2 = $objStr+$i+"]";
		$aVtxTrans = `xform -q -os -t ($baseObjStr+$i+"]")`;
		$aVtx2Trans = `xform -q -os -t $aVtx2`;
		for ($j=0;$j<3;$j++){
				$tFlt = $aVtxTrans[$j] - $aVtx2Trans[$j];
				if (abs($tFlt) > $tol){
					$posDif = true;
				}
		}
		if ($posDif) {
			$aRetSel[size($aRetSel)] = $aVtx2;
		}	
	}
	return $aRetSel;
}


global proc string[] abSelSideVerts (string $obj, string $baseObj, int $mAxisInd, int $selNeg, int $usePiv, float $tol){
	
	int $aInt[];
	int $totVtx;
	int $i;
	string $aRetSel[]; 
	string $vtxStr;
	float $aVtxTrans[];
	float $bBox[];
	float $baseMid;
	float $baseMidOffset;
	
	$mAxisInd -= 1; 
	
	$aInt = `polyEvaluate -v $obj`; 
	$totVtx = $aInt[0];
	
	if ($selNeg == 2){ 
		for ($i=0;$i<$totVtx;$i++){
			$vtx = $obj+".vtx["+$i+"]";
			$aRetSel[size($aRetSel)] = $vtx;
		}
		return $aRetSel;
	}
	
	if ($usePiv){
		$aVtxTrans = `xform -q -ws -t $baseObj`;
		$baseMid = $aVtxTrans[$mAxisInd];
	}else{
		$bBox = `xform -q -ws -boundingBox $baseObj`;
		$baseMid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);
	}

	for ($i=0;$i<$totVtx;$i++){
		$vtxStr = ".vtx["+$i+"]";
		$aVtxTrans = `xform -q -ws -translation ($baseObj+$vtxStr)`;
		$baseMidOffset = $aVtxTrans[$mAxisInd] - $baseMid;
		if (abs($baseMidOffset) < $tol){
			$aRetSel[size($aRetSel)] = $obj+$vtxStr;
			continue;
		}
		if ($baseMidOffset > 0 && !$selNeg){
			$aRetSel[size($aRetSel)] = $obj+$vtxStr;
			continue;
		}
		if ($baseMidOffset < 0 && $selNeg){
			$aRetSel[size($aRetSel)] = $obj+$vtxStr;
			continue;
		}
	}
	return $aRetSel;
}


global proc string[] abSelMirror (string $obj, string $aSelVerts[]){
	global int $abSymTable[];
	string $aRetVerts[];
	string $vtxStr;
	int $i;
	int $vertNum;
	int $mVertNum;
	
	if (size($abSymTable) == 0){
		warning "没有基础模型";
		return $aSelVerts;
	}
	waitCursor -state on;
	$vtxStr = $obj+".vtx[";
	for ($i=0;$i<size($aSelVerts);$i++){
		$vertNum = match("([0-9])+", (match ("([0-9])+\\]", ($vtxStr+$aSelVerts[$i]+"]"))));
		$mVertNum = abGetSymVtx($vertNum);
		if ($mVertNum != -1){
			$aRetVerts[size($aRetVerts)] = ($vtxStr+$mVertNum+"]");
		}else{ 
			$aRetVerts[size($aRetVerts)] = ($vtxStr+$vertNum+"]");
		}
	}
	waitCursor -state off;
	return $aRetVerts;
}


global proc abClearSbg (){
	global int $abSymTable[];	
	global string $abSbg;
	button -e -enable false smBn;
	button -e -enable false smvBn;
	button -e -enable false msBn;
	button -e -enable false fsBn;
	button -e -enable false rsBn;
	$abSbg = "";
	textField -e -text "" sbgFld;
}


global proc abSymCtl (string $action){
	global int $abSymTable[];
	global string $abSbg;
	string $sel[] = `ls -sl -fl`;
	string $aStr[];
	string $aSelVerts[];
	string $aHiliteObj[];
	string $baseObj = `textField -q -text sbgFld`;
	string $str;
	string $selMesh;
	float $tol = `textField -q -text tolFld`;
	int $axisSel = `radioButtonGrp -q -select saRbGrp`;
	int $negToPos = `checkBox -q -value maChkBx`;
	int $usePiv = `checkBox -q -value upoChkBx`;
	int $warned = false; 
	
	$aStr = `filterExpand -sm 12 $sel`;
	if (size($aStr) > 1){
		warning "请选择一个多边形物体";
		$warned = true;
	}else{
		$selMesh = $aStr[0]; 
	}
	
	if ($selMesh == ""){
		$aHiliteObj = `ls -hilite`;
		if (size($aHiliteObj) == 1){
			$selMesh = $aHiliteObj[0];
			$aSelVerts = `filterExpand -sm 31 $sel`;
		}else{
			if (size($aHiliteObj) > 1){
				clear($aSelVerts);
				warning "只能一个物体在元素模式被编辑";
				$warned = true;
			}
		}
	}else{
		select $selMesh; 
	}
	
	switch ($action){
		
		case "sbgBn":
			if ($selMesh != ""){
				abCheckSym($selMesh, $axisSel, $tol, true, $usePiv);
				$abSbg = $selMesh;
				textField -e -text $selMesh sbgFld;
				button -e -enable true smBn;
				button -e -enable true smvBn;
				button -e -enable true msBn;
				button -e -enable true fsBn;
				button -e -enable true msBn;
				button -e -enable true rsBn;
				//button -e -enable true fsBna;
				
			}else{
				abClearSbg();
			}
			break;
		
		case "favBn":
			if ($selMesh != ""){
				$aSelVerts = abCheckSym($selMesh, $axisSel, $tol, false, $usePiv);
				if (size($aSelVerts) > 0){
					selectMode -component;
					select $aSelVerts;
					print (size($aSelVerts)+" 个不对称顶点");
				}else{
					select $selMesh;
					print ($selMesh+" 是左右对称");
				}
			}
			break;
			
		case "smBn":
			if (size($aSelVerts) > 0){
				$aSelVerts = abSelMirror ($selMesh, $aSelVerts);
				select $aSelVerts;
			}
			break;
			
		case "smvBn":
			if ($selMesh != ""){
				$aSelVerts = abSelMovedVerts($selMesh, $baseObj, $tol);
				select $aSelVerts;
			}
			break;
		
		case "msBn":
			if (size($aSelVerts) > 0){
				abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, false, $usePiv, $tol);
			}else{
				if ($selMesh != ""){ 
					$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, $negToPos, $usePiv, $tol);
					abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, false, $usePiv, $tol);
				}
			}
			break;
			
		case "fsBn":
			if (size($aSelVerts) > 0){
				abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, true, $usePiv, $tol);
			}else{
				if ($selMesh != ""){ 
					$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, $negToPos, $usePiv, $tol);
					abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, true, $usePiv, $tol);
				}
			}
			break;
					
		case "rsBn":
			if (size($aSelVerts) > 0){
				abRevertSel($aSelVerts, $selMesh, $baseObj);
			}else{
				if ($selMesh != ""){ 
					$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, 2, $usePiv, $tol); 
					abRevertSel($aSelVerts, $selMesh, $baseObj);
				}
			}
			break;
				
		case "cBn":
			abClearSbg();
			deleteUI -window abSymWin;
			break;
		
		case "saRbGrp":
			abClearSbg();
			switch ($axisSel){
				case 1:
					$str = "X";
					break;
				case 2:
					$str = "Y";
					break;
				case 3:
					$str = "Z";
					break;
				
			}
			$str = "操作 -"+$str+" 到 +"+$str;
			checkBox -e -l $str maChkBx;
	}
}
///////////////////
//批量添加自定义属性绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtAddMultiAttrWin(){
   if(`window -ex gtAddMultiAttrWin`) deleteUI -window gtAddMultiAttrWin;
    window -wh 500 200 -t "老船角色绑定-☆-批量添加自定义属性绑定工具!" gtAddMultiAttrWin;
    columnLayout -adj 1 mainColumnattr;
         text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1266\"";
    formLayout  gtCOTAF;
        
    radioButtonGrp  -l "属性类型" -nrb  3 -la3 "整数" "浮点数" "布尔"  -select 2 gtattributetype;
    
    checkBox -l "最小最大数值：" -v 0  -onc "floatFieldGrp -e -en 1 gtattributMinMax;"  -ofc "floatFieldGrp -e -en 0 gtattributMinMax;" gtattributcheck;

    floatFieldGrp -nf 2 -en 0 -v1 0.00  -v2 0.00  -cw2 120 120 gtattributMinMax;
     textFieldGrp -l "属性名称：" -text "" gtattributtext;

     button -l  "创建属性" -c "gtAttributeCreateNew;" but7;
    
    formLayout -e
 
    -af gtattributetype left 5 -af gtattributetype top 5  -af gtattributetype right 10

    -af gtattributcheck left 120 -ac gtattributcheck top 5 gtattributetype -ap  gtattributcheck right 0 40
    -ac gtattributMinMax left 5 gtattributcheck -ac gtattributMinMax top 5 gtattributetype -af gtattributMinMax right 10
    
    -af gtattributtext left 5 -ac gtattributtext top 5 gtattributcheck -af gtattributtext right 10
    
    -af but7 left 5 -ac but7 top 5  gtattributtext  -af but7 right 10
    
    gtCOTAF;
    
    showWindow gtAddMultiAttrWin;   
}
//////////////////////////////
global proc gtAttributeCreateNew(){

string $attrinam=`textFieldGrp -q -tx gtattributtext`;
int $attrityp=`radioButtonGrp -q -select gtattributetype`;
int $minMax=`checkBox -q -v gtattributcheck`;
float $min=`floatFieldGrp -q -v1 gtattributMinMax`;
float $max=`floatFieldGrp -q -v2 gtattributMinMax`;

string $sel[]=`ls -sl`;
string $tm[];
int $tmm=`tokenize $attrinam " " $tm`;
string $type=$attrityp;
string $typ;
if($type==1){
    $typ="long";
}
if($type==2){
    $typ="double";
}
if($type==3){
     $typ="bool";   
}

for($j=0;$j<size($sel);$j++){
for($i=0;$i<$tmm;$i++){
    select -r ($sel[$j]);
    if($minMax==1&&$type!=3){
    addAttr -ln ($tm[$i])  -at $typ -min $min -max $max -k 1;
    }else{
    addAttr -ln ($tm[$i])  -at $typ  -k 1;        
        }
    }
}

select -r ($sel);
}
//////////////////////////////////////
//蒙皮修型绑定工具
//该工具原始代码，来源与外国网站，老船工作室对其进行修改、汉化，方便使用
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtcgTkShapeBuilder (){
	if (`window -q -ex shapeBuilderWindow`) deleteUI shapeBuilderWindow;
		if (`windowPref -q -ex shapeBuilderWindow`) windowPref -r  shapeBuilderWindow;

	window -w 280 -h 280 -title "老船角色绑定☆蒙皮修型绑定工具！" shapeBuilderWindow;
	
	string $menuBarLayout = `menuBarLayout`;
	
 			columnLayout -adj 1 mainColumnattr;		
		    text -l "点击下方按钮↓↓↓↓↓";
            button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1285\"";
            		setParent..;
 				
	paneLayout -configuration "horizontal2" -paneSize 1 100 83;	
		tabLayout;
			columnLayout -adjustableColumn true "蒙皮修型:";
			    rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;
				
 				text -align "left" -label "混合变形名称:";
			    textField -editable 1 -tx "baseMeshBS" gtdriverBSNameTextField;
 				button -label "创建混合变形" -command "gtGenerateBlendshapeNodeProc;";
			    setParent..;
			 	separator -h 2;

			    rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;
				
 				text -align "left" -label "部位\前缀:";
			    textField -editable 1 -tx "A" gtdriverPrefixTextField;
 				button -label "载入前缀" -command "gtloadPrefixProc;";
			    setParent..;

				text -align "left" -label "步骤一：编辑角色pose，选择角色模型";

        		rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;
				
 				text -align "left" -label "驱动关节:";
			    textField -editable false gtdriverJointTextField;
 				button -label "载入驱动关节" -command "gtloadDriverJoint;";
			    
                text -align "left" -label "FK控制器:";
			    textField -editable false gtdriverConTextField;
 				button -label "载入FK控制器" -command "gtloadDriverCon;";

			    setParent..;
 				separator -h 2;
 			
				button -label "复制雕刻模型" -command "createSculptDuplicate;";
				separator -h 2;
				string  $ofc="button -e -en 0 gtMirrorJointBut;button -e -en 0 gtMirrorJointButA;textField -e -tx \"\" gtdriverJointSideTextField;";
				string  $onc="button -e -en 1 gtMirrorJointBut;button -e -en 1 gtMirrorJointButA;";

				checkBox -align "center" -l "镜像(关节名称不匹配，需要载入镜像关节及控制器)" -v 1 -onc $onc -ofc $ofc gtMirrorBL;

        		rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;

				text  -label "镜像驱动关节";				
			    textField -editable 0 gtdriverJointSideTextField;
			    button -label "载入镜像驱动关节" -command "gtloadMirrorDriverJoint;" gtMirrorJointBut;

				text  -label "镜像控制器";				
			    textField -editable 0 gtdriverConSideTextField;
			    button -label "载入镜像控制器" -command "gtloadMirrorDriverCon;" gtMirrorJointButA;			    
			    setParent..;	
			    rowColumnLayout -nc 4 -cw 1 100 -cw 2 45 -cw 3 100 -cw 4 45;
        		text -l "跳过N个目标：";
				intField  -min 1 -v 2 gtSkipNumAimB;   		    
				text -align "left" -label "  排除后面目标:";
				intField  -min 1 -v 100 gtSkipNumAimC;  
				setParent..;			
	    		    				
				rowColumnLayout -nc 2 -cw 1 200 -cw 2 90 ;
				text -l "选择雕刻完成的模型..";
				button -label "创建蒙皮修型" -command "generateBlendshape;";
				text  -label "" -h 2;	
				text  -label "" -h 2;	
				text -l "选择雕刻模型，加选蒙皮模型..";
				button -label "生成修型模型" -command "BSpiritCorrectiveShape;";
				setParent..;	
				
				rowColumnLayout -nc 3 -cw 1 144 -cw 2 2 -cw 3 144 ;	
				button -label "选择驱动关节" -h 20 -command "gtSelectDriverJoint;";
				text  -label "" -h 20;	
				button -label "选择镜像驱动关节" -h 20 -command "gtSelectMirrorDriverJoint;";				
			    setParent..;			
				checkBox -label "删除目标模型"  -v 1 deleteShapeCheckBox;
				separator -h 2;										
		setParent..;
		
		setParent..;
	    setParent..;	    	    
		columnLayout -adjustableColumn true;
        	rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;
			text -align "left" -label "角色模型:";
			textField -editable false currentBaseMeshTextField;
			button -label "载入角色模型" -command "loadBaseMesh;";
			
	        text -align "left" "混合变形节点:";
			textField -editable false currentBlendshapeNodeTextField;	
			button -label "载入混合变形节点" -command "loadBlendshapeNode;";
 		    	 		    	    	 		    		    		    
	    setParent..;	 	    
		showWindow shapeBuilderWindow;
}
////////////////////
global proc float gtRoundOff (float $value, int $decimals)
{
float $rounded;
//float $value=0.66667;
//int $decimals=3;
if ($value>=0) $rounded=(trunc($value*`pow 10 $decimals`+0.5)/`pow 10 $decimals`);
else $rounded=(trunc(abs($value)*`pow 10 $decimals`+0.5)/`pow 10 $decimals`)*-1;
return $rounded;
}
//////////////////
global proc gtGenerateBlendshapeNodeProc (){
string $bsn=`textField -q  -tx  gtdriverBSNameTextField`;
string $sel[]=`ls -sl`;
 for($i=0;$i<size($sel);$i++){
     string $obj=$sel[$i];
     string $histry[]=`listHistory $obj`;
     string $bs="";
     for($j=0;$j<size($histry);$j++){
         string $nodeType=`nodeType $histry[$j]`;
         if($nodeType=="blendShape")$bs=$histry[$j];
     }
     if($bs!="")continue;
     //print $bs;
     select -r $obj;
     duplicate -rr;
     rename ($obj+"baseAimM");
     select -r ($obj+"baseAimM");
     select -add $obj;
     blendShape -frontOfChain -n $bsn;
     select -r ($obj+"baseAimM");
     delete;     
    }   
select -r ($sel);
}
//////////////////////////////////
global proc gtSelectDriverJoint(){
	string $bn=`textField -q -tx  gtdriverJointTextField`;
	select -r ($bn);
}
//////////////////////////////////
global proc gtloadPrefixProc()
{
	string $sel[]=`ls -sl`;
	textField -e -tx ($sel[0])  gtdriverPrefixTextField;
}
//////////////////
global proc gtSelectMirrorDriverJoint()
{
	string $bn=`textField -q -tx  gtdriverJointSideTextField`;
	select -r ($bn);
}
////////////////
global proc string BSpiritCorrectiveShape() {

  string $Temp[] = `ls -sl`;
  global string $BlendDuplicate[];

  if (`size $Temp` == 2) {

    string $BaseModel = $Temp[1];
    string $BlendShape = $Temp[0];
    string $Skin = `findRelatedSkinCluster $BaseModel`;
    string $SkinResult;

    if ($Skin == "") {

      do {

        string $promptDialogResult = `promptDialog 
  
          -title "Missing SkinCluster"
          -message "Enter a valid skinCluster for the selected baseMesh"
          -button "Proceed" -button "Abort"
          -defaultButton "Proceed" -cancelButton "Abort"
          -dismissString "Abort"`;

        if ($promptDialogResult == "Proceed") {

          string $NewSkinCluster = `promptDialog -query -text`;
          
          if (`objExists $NewSkinCluster`) {

            string $SkinClusterSet = `listConnections -destination true ($NewSkinCluster + ".usedBy[0]")`;
            string $QueryBaseModel = `listConnections -source true ($SkinClusterSet + ".instObjGroups[0].objectGroups[0]")`;

            if ($QueryBaseModel == $BaseModel)
              $SkinResult = "Proceed";      
          }
        }

        else 
          $SkinResult = "Abort";  

      } while (($SkinResult != "Abort") && ($SkinResult != "Proceed"));
    }
    else $SkinResult = "Proceed";

    if ($SkinResult == "Proceed") {

      float $Progress = 0.0; 
      float $BaseTempOffset[] = `getAttr ($BaseModel+".translate")`;
      float $BlendTempOffset[] = `getAttr ($BlendShape+".translate")`;
      float $Offset[3];
      float $targetPosArray[];
      float $absPosArray[];
      float $relPosArray[];

      $Offset[0] = $BlendTempOffset[0] - $BaseTempOffset[0];
      $Offset[1] = $BlendTempOffset[1] - $BaseTempOffset[1];
      $Offset[2] = $BlendTempOffset[2] - $BaseTempOffset[2];

      int $vertexNameArray[];
      int $VertexCount[] = `polyEvaluate -v $BaseModel`;
      int $BlendVertexCount[] = `polyEvaluate -v $BlendShape`;

      string $ShapeNode[] = `pickWalk -d down $BaseModel`;

      if (! `connectionInfo -isDestination ($ShapeNode[0] + ".tweakLocation")`) {

        string $TweakSet[] = `listConnections -destination true ($ShapeNode[0] + ".instObjGroups[0].objectGroups[1]")`;
        string $Tweaknode[] = `listConnections -source true ($TweakSet[0] + ".usedBy[0]")`;
        connectAttr ($Tweaknode[0] + ".vlist[0].vertex[0]") ($ShapeNode[0] + ".tweakLocation");

      }

      progressWindow

        -title "BSpirit Corrective Shape"
        -progress $Progress
        -status "Calculating VertexMovements"
        -isInterruptable true
        -min 0
        -max 100;

      if ($VertexCount[0] == $BlendVertexCount[0]) {  

        for ($i = 0; $i < $VertexCount[0]; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 * $i / $VertexCount[0] + 0.5)`;
          progressWindow -e -progress $Progress;

          string $vertexName = $BlendShape + ".vtx[" + $i + "]";
          float $targetPos[] = `pointPosition -w $vertexName`;

          $vertexName = $BaseModel + ".vtx[" + $i + "]"; 
          float $Pos[] = `pointPosition -w $vertexName`;
          float $relVertexPos[] = `getAttr $vertexName`;

          $targetPos[0] -= ($Pos[0]+$Offset[0]);
          $targetPos[1] -= ($Pos[1]+$Offset[1]);
          $targetPos[2] -= ($Pos[2]+$Offset[2]); 

          if (($targetPos[0]>0.001) || ($targetPos[0]<-0.001) || ($targetPos[1]>0.001) || ($targetPos[1]<-0.001) || ($targetPos[2]>0.001) || ($targetPos[2]<-0.001)) {

            int $vertexArraySize = `size $vertexNameArray`;

            $vertexNameArray[$vertexArraySize] = $i;

            $targetPosArray[($vertexArraySize * 3)] = $targetPos[0];
            $targetPosArray[($vertexArraySize * 3 + 1)] = $targetPos[1];
            $targetPosArray[($vertexArraySize * 3 + 2)] = $targetPos[2];
  
            $absPosArray[($vertexArraySize * 3)] = $Pos[0];
            $absPosArray[($vertexArraySize * 3 + 1)] = $Pos[1];
            $absPosArray[($vertexArraySize * 3 + 2)] = $Pos[2];

            $relPosArray[($vertexArraySize * 3)] = $relVertexPos[0];
            $relPosArray[($vertexArraySize * 3 + 1)] = $relVertexPos[1];
            $relPosArray[($vertexArraySize * 3 + 2)] = $relVertexPos[2];

          }
        }

        int $vertexNameArraySize = `size $vertexNameArray`;

        progressWindow -e -status "Calculating VertexMatrix";


        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 + 60.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          $Pos[0] = $absPosArray[($i * 3)];
          $Pos[1] = $absPosArray[($i * 3 + 1)];
          $Pos[2] = $absPosArray[($i * 3 + 2)];

          $targetPos[0] = $targetPosArray[($i * 3)];
          $targetPos[1] = $targetPosArray[($i * 3 + 1)];
          $targetPos[2] = $targetPosArray[($i * 3 + 2)];

          $vertexName = $BaseModel + ".vtx[" + $vertexNameArray[$i] + "]";

          float $return[];
          float $denominator;
          float $tempPos[];
          float $matrixEq[];

          move -r 1 0 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[0]  = $tempPos[0]-$Pos[0];
          $matrixEq[4]  = $tempPos[1]-$Pos[1];
          $matrixEq[8]  = $tempPos[2]-$Pos[2];
          $matrixEq[3]  = $targetPos[0];

          move -r -1 1 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[1]  = $tempPos[0]-$Pos[0];
          $matrixEq[5]  = $tempPos[1]-$Pos[1];
          $matrixEq[9]  = $tempPos[2]-$Pos[2];
          $matrixEq[7]  = $targetPos[1];

          move -r 0 -1 1 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[2]  = $tempPos[0]-$Pos[0];
          $matrixEq[6]  = $tempPos[1]-$Pos[1];
          $matrixEq[10] = $tempPos[2]-$Pos[2];
          $matrixEq[11] = $targetPos[2];

          $denominator = 

          ($matrixEq[0] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]))) - 
          ($matrixEq[1] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]))) + 
          ($matrixEq[2] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8])));

          if ($denominator != 0) { 

            $return[0] = 
 
            (
            ($matrixEq[3] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) + 
            ($matrixEq[2] * (($matrixEq[7]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[11] )))
            ) / $denominator;

            $return[1] = 
 
            (
            ($matrixEq[0] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) -
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]  ))) + 
            ($matrixEq[2] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  )))
            ) / $denominator;

            $return[2] =

            (
            ($matrixEq[0] * (($matrixEq[5]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  ))) + 
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8]  )))
            ) / $denominator;

            move -r $return[0] $return[1] ($return[2]-1) $vertexName;

          }
        }
  
      if (! `progressWindow -query -isCancelled` ) {
     
          global string $BlendDuplicate[];
		  setAttr ($Skin + ".envelope" ) 0;
          string $BlendDuplicated[] = `duplicate -rc -rr $BaseModel`;
		  $BlendDuplicate[0] = $BlendDuplicated[0];
          string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
          for ($i = 0; $i < 9; $i++) {

            setAttr -lock 0 ($BlendDuplicate[0] + $UnlockAttributes[$i]);

          }
        }
  
        progressWindow -e -st "Reseting BaseMesh";

        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          $Progress = `trunc (80.0 + 20.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          setAttr ($BaseModel+".vtx["+ $vertexNameArray[$i] +"]") $relPosArray[($i*3)] $relPosArray[($i*3+1)] $relPosArray[($i*3+2)];

        }

        setAttr ($Skin + ".envelope") 1;

      }
  
      else print "BaseMesh and BlendShape should contain the same number of vertices.\n";
      progressWindow -endProgress;
    }
  }
  else 
    print "Select the blend shape and then the skinned mesh - try again. \n";
  
  return $BlendDuplicate[0];
}
//////////////////////////////////////////////////////////////////////////
//					generateBlendshape Procedure
//////////////////////////////////////////////////////////////////////////
global proc generateBlendshape()
{
	int $gtMirror=`checkBox -q -v gtMirrorBL`;
    string $currentBlendshapeNode = `textField -q -text currentBlendshapeNodeTextField`;
	string $currentBaseMesh = `textField -q -text currentBaseMeshTextField`;
	string $currentCon = `textField -q -text gtdriverConTextField`;
	string $mirrorJoint = `textField -q -text gtdriverJointSideTextField`;
    string $mirrorCon=`textField -q -tx  gtdriverConSideTextField`;
    string $prefix=`textField -q -tx gtdriverPrefixTextField`;

    int $skipNum=`intField -q -v  gtSkipNumAimB`;
	int $skipBackNum=`intField -q -v  gtSkipNumAimC`;
					
    string $currentSel[] = `ls -sl`;
	string $currentJoint = (`getAttr ($currentSel[0] + ".nameOfJoint")`);
		
    int $ex=`objExists $mirrorJoint`;
    if($gtMirror==1){
    if($ex==0){	 		    
		 string $tm[];
		 int $tnum=`tokenize $currentJoint "_" $tm`;
		 string $side=$tm[1]; 
		 string $sideN; 
		 string $sid; 
		 if($side=="l"){
		    $sideN=$tm[0]+"_r_"+$tm[2]; 
		    $sid="r";
		 }else if($side=="r"){
		    $sideN=$tm[0]+"_l_"+$tm[2]; 
		    $sid="l";		    		     
		 }
		 
		 if($ex==1)$sideN=$mirrorJoint;
    int $exMirror=`objExists $sideN`;
         if($exMirror==0)
		     error "找不到另一侧关节，请载入镜像关节，或者去掉勾选镜像选项";
		     }	  	
	}
	
	if (($currentBaseMesh == "") || ($currentBlendshapeNode == ""))
	{
		warning "Please load a base mesh and a blendshape node before generating a blendshape.\n";
	}else
	{
	    
	                 string $attr[]=`listAttr -k -m  ($currentBlendshapeNode)`;
					   string $attrNam="";
					   int $indexA=0;
					   int $size=size($attr);
					   if($skipBackNum<$size)$size=$skipBackNum;
					  // print $skipNum;

					   for($i=$skipNum;$i<$size;$i++){
					       float $tempAttr=`getAttr ($currentBlendshapeNode+"."+$attr[$i])`;
					       if($tempAttr>0.05&&$attr[$i]!="targetDirectory[0].directoryWeight"){
					           $attrNam=$attr[$i];
					           $indexA=$i;
					       }
					   }
					   					   
					    string $xyz="";
					    string $xyzs="";
						float $rotAxis=0;
						float $x=`getAttr ($currentJoint + ".rx")`;
						float $y=`getAttr ($currentJoint + ".ry")`;
						float $z=`getAttr ($currentJoint + ".rz")`;	
                        
                        float $tempR=0;
						if(abs($x)>abs($y)){
						   $xyz=".rx";$xyzs="Rx";$rotAxis=$x;$tempR=$x;}
						   else
						   {$xyz=".ry";$xyzs="Ry";$rotAxis=$y;$tempR=$y;}      
						     
						if(abs($tempR)<abs($z)){$xyz=".rz";$xyzs="Rz";$rotAxis=$z;}						    																
					 // print ($attr[$i]);							    																
					  // print ($attrNam);
					  // print ($indexA);
					  // print ($bsindex);
					  // print ($xyz);	
					 //string $prefix="A";	
					 string $neg="neg";
					 
					 if($rotAxis<0){
					     $xyzs=$neg+$xyzs;
					 }
					  float $degB=abs($rotAxis);					 
					  float $bsindex=1.00; 
					  int $xxAttr=`objExists ($currentJoint +"."+$xyzs+"MaxDeg"+$prefix)`;

					  if($xxAttr==0){
					  addAttr -ln ($xyzs+ "MaxDeg"+$prefix)  -at double -dv ($degB) -k 1 $currentJoint;
					  setAttr -lock true ($currentJoint +"."+$xyzs+ "MaxDeg"+$prefix); 
					  
                      addAttr -ln ($xyzs+ "First"+$prefix)  -at double -dv $degB -k 1 $currentJoint;
					  setAttr -lock true ($currentJoint +"."+$xyzs+ "First"+$prefix); 
					  }else{
					  float $degT=`getAttr   ($currentJoint +"."+$xyzs+ "First"+$prefix)`; 
					  float $degA=abs($degT);
					  float $degB=abs($rotAxis);
					  string $temps=$degB+".0";
					  float $degc=$temps;
					  $bsindext=($degc+0.0)/ $degA; 
					  $bsindex=`gtRoundOff $bsindext 3`;
					  
					  if($bsindex!=1){
					  int $xxAttra=`objExists ($currentJoint +"."+$xyzs+"ib"+$prefix+$degB)`;
                      if($xxAttra==0){
					  addAttr -ln ($xyzs+ "ib"+$prefix+$degB)  -at double -dv ($bsindex) -k 1 $currentJoint;
					  setAttr -lock true ($currentJoint +"."+$xyzs+ "ib"+$prefix+$degB); 				
					          } 
					      }
					  }					  		  
		setAttr ($currentJoint + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($currentJoint + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($currentJoint + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		
		select -tgl $currentBaseMesh;
		string $newShape = `BSpiritCorrectiveShape`;
		
		string $listOfShapesInNode[] = `listAttr -k -m $currentBlendshapeNode`;
		int $size=size($listOfShapesInNode);		
		int $targetIndex = 0;
		if($indexA==0){
		while (!($listOfShapesInNode[$targetIndex] == ""))
			$targetIndex ++;
		$targetIndex--;	
		}
		else{
		    $targetIndex=$indexA-1;
		}		
		//print $targetIndex;	
		if($attrNam!=""){	
		$newShape = `rename $newShape $attrNam`;
		}else{
		$newShape = `rename $newShape ($currentSel[0] + $targetIndex)`;
		}
		setAttr ($currentBaseMesh+".v") 1;
		
		float $boundingBoxInfo[] = `polyEvaluate -boundingBox $currentBaseMesh`;
		float $xtranslate = ($boundingBoxInfo[1] - $boundingBoxInfo[0]);
		//Move the duplicate mesh the distance of the bounding box.
		string $tm[];
		 int $tnum=`tokenize $currentJoint "_" $tm`;
		 string $side=$tm[1]; 
		 if($side=="l"||$side=="L"){
		move -r $xtranslate 0 0 $newShape;}
		else{
		   move -r (0-$xtranslate) 0 0 $newShape; 
		}
		setAttr ($newShape+".v") 1;				
		//print $bsindex
	    if($bsindex!=1){
	    blendShape -edit -ib -target $currentBaseMesh $targetIndex $newShape $bsindex $currentBlendshapeNode;
	    }else{
		blendShape -edit  -target $currentBaseMesh $targetIndex $newShape $bsindex $currentBlendshapeNode;
		}
		
		print ($newShape + " 已经添加到 " + $currentBlendshapeNode + " 混合变形节点.");						
		//print ($targetIndex);	
 
		if($indexA==0){				
		setAttr ($currentBlendshapeNode +"."+$newShape) 0;
	    setAttr ($currentJoint + ".rx") 0;
		setAttr ($currentJoint + ".ry") 0;
		setAttr ($currentJoint + ".rz") 0;
		setDrivenKeyframe -currentDriver ($currentJoint+$xyz) ($currentBlendshapeNode +"."+$newShape);
		
		setAttr ($currentJoint + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($currentJoint + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($currentJoint + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		setAttr ($currentBlendshapeNode +"."+$newShape) 1;
		setDrivenKeyframe -currentDriver ($currentJoint+$xyz) ($currentBlendshapeNode +"."+$newShape);

		} 
		float $degB=abs($rotAxis);
		float $maxDeg=`getAttr 	($currentJoint +"."+$xyzs+ "MaxDeg"+$prefix)`; 
		
		if($degB>$maxDeg){
		setAttr -lock 0 ($currentJoint +"."+$xyzs+ "MaxDeg"+$prefix);   
		setAttr  ($currentJoint +"."+$xyzs+ "MaxDeg"+$prefix) $degB;   
		setAttr -lock 1 ($currentJoint +"."+$xyzs+ "MaxDeg"+$prefix);   
    
		setAttr ($currentJoint + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($currentJoint + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($currentJoint + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		setAttr ($currentBlendshapeNode +"."+$newShape) $bsindex;
		setDrivenKeyframe -currentDriver ($currentJoint+$xyz) ($currentBlendshapeNode +"."+$newShape);    
		}
		
		select -r ($newShape);
		group -n ($newShape+"BSGrp");
		setAttr ($newShape+"BSGrp.v") 0;				
///////////////////////////////////		
		if($gtMirror==1){
		 setAttr ($currentCon+$xyz) 0;
    int $ex=`objExists $mirrorJoint`;
    string $sideN; 
    string $sid; 
 			
		 string $tm[];
		 int $tnum=`tokenize $currentJoint "_" $tm`;
		 string $side=$tm[1]; 
		 if($side=="l"||$side=="L"){
		    $sideN=$tm[0]+"_r_"+$tm[2]; 
		    $sid="r";
		 }else if($side=="r"||$side=="R"){
		    $sideN=$tm[0]+"_l_"+$tm[2]; 
		    $sid="l";		    		     
		 }else{
		      $sid="lr";
		 }	 
    if($ex==1)  $sideN= $mirrorJoint; 
	
		setAttr ($currentJoint + ".rx") 0;
		setAttr ($currentJoint + ".ry") 0;
		setAttr ($currentJoint + ".rz") 0;
		
		select -r $currentBaseMesh;
        duplicate -rr;
        rename ($newShape+"_"+$sid);
		string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
		for ($i = 0; $i < 9; $i++)
		{
	     setAttr -lock 0 (($newShape+"_"+$sid) + $UnlockAttributes[$i]);
	         }
	         
	         if($sid=="r"){move -r (0-$xtranslate) 0 0 ($newShape+"_"+$sid);}
	         else {move -r ($xtranslate) 0 0 ($newShape+"_"+$sid);}
	            
      	select -r ($newShape+"_"+$sid);
        duplicate -rr;
        rename ($newShape+"_"+$sid+"dirver");      	
      	select -r ($newShape+"_"+$sid); 
      	select -add ($newShape+"_"+$sid+"dirver"); 
      	doWrapArgList "7" { "1","0","1", "2", "1", "1", "1", "0" };

      	//CreateWrap; 
      	string $shap[]=`listRelatives -s ($newShape+"_"+$sid)`;
      	$tempString=`listConnections ($shap[0]+".worldMatrix[0]")`;
		rename $tempString[0] ($newShape+"_"+$sid+"_wrap");
		setAttr ($newShape+"_"+$sid+"_wrap.exclusiveBind") 1;
        connectAttr -f ($newShape+".outMesh") ($newShape+"_"+$sid+"dirver.inMesh");
        string $baseM[]=`listConnections -d 0 -s 1 ($newShape+"_"+$sid+"_wrap.basePoints[0]")`;
     	setAttr ($baseM[0]+".scaleX") -1;
        setAttr ($newShape+"_"+$sid+"dirver.scaleX") -1;		

		 setAttr ($mirrorCon+$xyz) $rotAxis;
		           
	                 string $attr[]=` listAttr -k -m  ($currentBlendshapeNode)`;

                       string $attrNam="";
					   int $indexA=0;
					     int $size=size($attr);
					   if(($skipBackNum)<$size)$size=$skipBackNum;
					  // print $size;
					   for($i=$skipNum;$i<$size;$i++){
					       float $tempAttr=`getAttr ($currentBlendshapeNode+"."+$attr[$i])`;
					       if($tempAttr>0.05&&$attr[$i]!="targetDirectory[0].directoryWeight"){
					           $attrNam=$attr[$i];
					           $indexA=$i;
					       }
					   }
					   
					  // print ($indexA);
					  // print ($attrNam);	   
		 setAttr ($mirrorCon+$xyz) 0;

	  	int $targetIndex = 0;	
		if($indexA==0){
		while (!($attr[$targetIndex] == ""))
			$targetIndex ++;
		$targetIndex--;	
		}
		else{
		    $targetIndex=$indexA-1;
		}
		
		  int $xxAttr=`objExists ($sideN  +"."+$xyzs+ "MaxDeg"+$prefix)`;
					  if($xxAttr==0){
					  addAttr -ln ($xyzs+ "MaxDeg"+$prefix)  -at double -dv ($degB) -k 1 $sideN;
					  setAttr -lock true ($sideN +"."+$xyzs+ "MaxDeg"+$prefix); 
                      
                      addAttr -ln ($xyzs+ "First"+$prefix)  -at double -dv ($degB) -k 1 $sideN;
					  setAttr -lock true ($sideN +"."+$xyzs+ "First"+$prefix);   					    
					  }else{
					  float $degT=`getAttr   ($sideN +"."+$xyzs+ "First"+$prefix)`; 
					  float $degA=abs($degT);
					//  float $degB=abs($rotAxis);
					 // float $bsindex=$degB/ $degA;
					  if($bsindex!=1){					  
					  int $xxAttra=`objExists ($sideN +"."+$xyzs+"ib"+$prefix+$degB)`;
                      if($xxAttra==0){
					  addAttr -ln ($xyzs+ "ib"+$prefix+$degB)  -at double -dv ($bsindex) -k 1 $sideN;
					  setAttr -lock true ($sideN +"."+$xyzs+ "ib"+$prefix+$degB); 				
					          } 
					      }
					  }
								  
		if($bsindex==1){
		blendShape -edit -target $currentBaseMesh $targetIndex ($newShape+"_"+$sid) $bsindex $currentBlendshapeNode;
		}else{
		blendShape -edit -ib -target $currentBaseMesh $targetIndex ($newShape+"_"+$sid) $bsindex $currentBlendshapeNode;		    
		}							  
		//print $targetIndex;	
		//select -r $currentCon;
		    select -r ($newShape+"_"+$sid+"dirver") ($baseM[0]) ($newShape+"_"+$sid); 	
		    select -add ($newShape+"BSGrp");	
		    parent;	
 	      	     
		if($indexA==0){          			
        setAttr ($currentBlendshapeNode +"."+$newShape+"_"+$sid) 0;
	    setAttr ( $sideN + ".rx") 0;
		setAttr ( $sideN + ".ry") 0;
		setAttr ( $sideN + ".rz") 0;
		setDrivenKeyframe -currentDriver ($sideN+$xyz) ($currentBlendshapeNode +"."+$newShape+"_"+$sid);
		
		setAttr ($sideN + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($sideN + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($sideN + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		setAttr ($currentBlendshapeNode +"."+$newShape+"_"+$sid) 1;
		setDrivenKeyframe -currentDriver ($sideN+$xyz) ($currentBlendshapeNode +"."+$newShape+"_"+$sid);
		
		setAttr ( $sideN + ".rx") 0;
		setAttr ( $sideN + ".ry") 0;
		setAttr ( $sideN + ".rz") 0;   					
		    }
		 string $newShapeR;   
 	     if($attrNam!="")
		$newShapeR = `rename ($newShape+"_"+$sid)  $attrNam`;
		 		    
		float $degB=abs($rotAxis);
		float $maxDeg=`getAttr 	($sideN +"."+$xyzs+ "MaxDeg"+$prefix)`; 
		
		if($degB>$maxDeg){
		setAttr -lock 0 ($sideN +"."+$xyzs+ "MaxDeg"+$prefix);   
		setAttr  ($sideN +"."+$xyzs+ "MaxDeg"+$prefix) $degB;   
		setAttr -lock 1 ($sideN +"."+$xyzs+ "MaxDeg"+$prefix);   
    
		setAttr ($sideN + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($sideN + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($sideN + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		setAttr ($currentBlendshapeNode +"."+$newShapeR) $bsindex;
		setDrivenKeyframe -currentDriver ($sideN+$xyz) ($currentBlendshapeNode +"."+$newShapeR);  
		setAttr ($currentBlendshapeNode +"."+$newShapeR) 0;		 
		}    
		setAttr ( $sideN + ".rx") 0;
		setAttr ( $sideN + ".ry") 0;
		setAttr ( $sideN + ".rz") 0;    
		}		
		delete ($currentSel[0]);		    
		
		if (`checkBox -q -v deleteShapeCheckBox`)delete ($newShape+"BSGrp");			
	}	
}
////////////////
global proc gtloadMirrorDriverCon()
{
	string $currentSelXform[] = `ls -sl`;	
	textField -edit -tx $currentSelXform[0] gtdriverConSideTextField;
	print ($currentSelXform[0] + " 已经作为控制器被载入……\n");
}
//////////////////////////////////////////////////////////////////////////
global proc editCurve()
{
	select -r `textField -q -text currentBaseMeshTextField`;
	select -addFirst `textField -q -text currentBlendshapeNodeTextField`;
	GraphEditor;
	FrameSelected;
	print "Graph Editor Loaded.";
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
global proc setShapeKey()
{
	if ((`textField -q -text drivenShapeTextField` == "") || (`textField -q -text driverJointTextField` == ""))
	{
		warning "No key was set. Please load a driver joint and a driven shape before setting a key.";
	}else
	{
		int $currentSelRadioButton = `radioButtonGrp -q -select jointAxisRadioButtons`;
		string $jointAxis = ".r";
		
		if ($currentSelRadioButton == 1)
			$jointAxis += "x";
		if ($currentSelRadioButton == 2)
			$jointAxis += "y";
		if ($currentSelRadioButton == 3)
			$jointAxis += "z";
		
		//Build driver name string.
		string $driver = `textField -q -text driverJointTextField`;
		$driver += $jointAxis;
		
		//Build the driven name string.
		string $driven = `textField -q -text currentBlendshapeNodeTextField`;
		$driven = ($driven + "." + `textField -q -text drivenShapeTextField`);
		
		//Find the value of the driver.
		float $driverValue = `floatSliderGrp -q -value jointSlider`;
		
		//Find the value of the driven.
		float $drivenValue = `floatSliderGrp -q -value shapePercentageSlider`;
		$drivenValue = ($drivenValue / 100);
			
		//Set driver value.	
		setAttr $driver $driverValue;
		setAttr $driven $drivenValue;
		setDrivenKeyframe -cd $driver $driven;
		
		print ("Key Set: (" + $driver + ", " + $driverValue + ") and (" + $driven + ", " + $drivenValue + ") .");
	}
}
//////////////////////////////////////////////////////////////////////////
global proc shapeSliderCommand()
{
	//Query the currently loaded shape.
	string $currentLoadedShape = `textField -q -text drivenShapeTextField`;
	//Query the current value of the shape percentage slider.
	float $currentSliderValue = `floatSliderGrp -q -value shapePercentageSlider`;
	//Query the currently loaded blendshape node.
	string $currentBlendshapeNode = `textField -q -text currentBlendshapeNodeTextField`;
	
	//Check to ensure that a shape is indeed loaded.
	if ($currentLoadedShape == "")
	{
		warning "Click on a blendshape from the list to affect it.\n";
	} else
		{
			//Set the weight of the blendshape to the value of the slider.
			setAttr ($currentBlendshapeNode + "." + $currentLoadedShape) ($currentSliderValue / 100) ;
		}	
}

//////////////////////////////////////////////////////////////////////////
global proc jointSliderCommand()
{
	string $currentLoadedJoint = `textField -q -text driverJointTextField`;
	//Query the current value of the joint slider.
	float $currentSliderValue = `floatSliderGrp -q -value jointSlider`;
	//Query the current value of the joint axis radio buttons.
	int $currentSelRadioButton = `radioButtonGrp -q -select jointAxisRadioButtons`;
	//Initialize the $jointAxis string to ".r"
	string $jointAxis = ".r";
	
	//Add the proper axis name to the $jointAxis string (.rx, .ry, .rz)
	if ($currentSelRadioButton == 1)
		$jointAxis += "x";
	if ($currentSelRadioButton == 2)
		$jointAxis += "y";
	if ($currentSelRadioButton == 3)
		$jointAxis += "z";
	
	//Check to ensure that a joint is indeed loaded.
	if ($currentLoadedJoint == "")
	{
		warning "You must load a joint for the slider to affect.\n";
	} else
		{
			//Set the value of the joint's rotation to the value of the slider.
			setAttr ($currentLoadedJoint + $jointAxis) $currentSliderValue ;
		}	
}
//////////////////////////////////////////////////////////////////////////
global proc loadDriverJoint()
{
	//Get the current selection.
	string $currentSelXform[] = `ls -sl`;
	
	//Check to ensure that the user selected a joint.
	if (`objectType $currentSelXform[0]` != "joint")
	{
		warning "You must load a joint as a driver. Please select a joint and try again.\n";
	} else
		{
			//Edit the text field to house the name of the driver joint.
			textField -edit -text $currentSelXform[0] driverJointTextField;
			//Provide some feedback for the user.
			print ($currentSelXform[0] + " was loaded as the driver joint. \n");
		}
}
//////////////////////////////////////////////////////////////////////////
global proc refreshBlendshapeList ()
{
	if (`textField -q -tx currentBlendshapeNodeTextField` == "")
	{
		warning "Blendshape list was not updated. Please load a blendshape node first. Edit>Load Active Blendshape Node. \n";
	} else
		{
			//First we must remove all of the items in the list.
			textScrollList -edit -removeAll blendShapeTextScrollList;
			//Now we find the name of the currently loaded blendshape node.
			string $currentBlendshapeNode = `textField -q -tx currentBlendshapeNodeTextField`;
			//Using the listAttr command, we can get a list of all the shapes in the node.
			string $listOfShapesInNode[] = `listAttr -k -m $currentBlendshapeNode`;
			//We intialize this string before adding to it in the loop.
			string $addShapesCommand = "textScrollList -edit "; //-append "one"
			
			//This loop adds '-append "shapeName"' for each shape in the node.
			int $i = 1;
			while ($listOfShapesInNode[$i] != "")
			{
				$addShapesCommand = ($addShapesCommand + "-append \"" + $listOfShapesInNode[$i] + "\" ");
				$i++;
			}
			
			//Add the name of the text scroll layout.
			$addShapesCommand = $addShapesCommand + "blendShapeTextScrollList;";
			//Evaluate the entire command to add names to the list.
			eval $addShapesCommand;
			//Show the 9th item to force the UI to bring up a scroll bar.
			textScrollList -edit -showIndexedItem 9 blendShapeTextScrollList;
		}
}
//////////////////////////////////////////////////////////////////////////
global proc createSculptDuplicate()
{
    string $gtDriverBn=`textField -q -tx gtdriverJointTextField`;
	string $currentSelXform[] = `ls -sl`;
	 $currentSelXform[1]=$gtDriverBn;
	
	if (`textField -q -tx currentBaseMeshTextField` == "")
	{
		warning "Duplicate not created. Please load a base mesh before creating a duplicate. Edit>Load Base Mesh.\n";
	} else
			if ($currentSelXform[0] != `textField -q -tx currentBaseMeshTextField`)
			{
				warning "Duplicate not created. Please select the currently loaded base mesh before trying to create a sculpt duplicate.\n";
			} else
				if ( ($gtDriverBn == "") || (`objectType $gtDriverBn` != "joint") )
				{
					warning "Duplicate not created. Please select the base mesh, then shift select the posed joint.\n";
				} else
					{
						string $nameOfDuplicate[] = `duplicate -rr $currentSelXform[0]`;						
						//Create a list of locked attributes.
						string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
	          			//Unlock the transform attributes.
						for ($i = 0; $i < 9; $i++)
						{
	            			setAttr -lock 0 ($nameOfDuplicate[0] + $UnlockAttributes[$i]);
	          			}						
						setAttr ($currentSelXform[0]+".v") 0;	

						//Rename the new mesh.
						string $newName = `rename $nameOfDuplicate[0] ($nameOfDuplicate[0] + "blendShape1")`;
						addAttr -ln xRotation -at double $newName;
						addAttr -ln yRotation -at double $newName;
						addAttr -ln zRotation -at double $newName;
						addAttr -ln nameOfJoint -dt "string" $newName;
												
						string $fkCon=` textField -q -tx gtdriverConTextField`;
						int $ex=`objExists ($fkCon+".axis")`;
						if($ex==0)addAttr -ln axis -dt "string" $fkCon;
						int $ex=`objExists ($fkCon+".Rot")`;
						if($ex==0)addAttr -ln Rot -at double $fkCon;

						//Set custom attributes to house joint information.
						setAttr ($newName + ".xRotation") `getAttr ($currentSelXform[1] + ".rx")`;
						setAttr ($newName + ".yRotation") `getAttr ($currentSelXform[1] + ".ry")`;
						setAttr ($newName + ".zRotation") `getAttr ($currentSelXform[1] + ".rz")`;
						setAttr -type "string" ($newName + ".nameOfJoint") $currentSelXform[1];
						string $xyz;
						float $rotAxis;
						float $x=`getAttr ($currentSelXform[1] + ".rx")`;
						float $y=`getAttr ($currentSelXform[1] + ".ry")`;
						float $z=`getAttr ($currentSelXform[1] + ".rz")`;						
						if($x!=0&&$y==0&&$z==0){$xyz="x";$rotAxis=$x;}
						if($x==0&&$y!=0&&$z==0){$xyz="y";$rotAxis=$y;}
						if($x==0&&$y==0&&$z!=0){$xyz="z";$rotAxis=$z;}							
                        setAttr -type "string" ($fkCon + ".axis") $xyz;
                        setAttr  ($fkCon + ".Rot") $rotAxis; 											  											
					}
}
//////////////////////////////////////////////////////////////////////////
global proc loadBaseMesh()
{
	string $currentSelXform[] = `ls -sl`;
	string $currentSelShape[] = `listRelatives -shapes $currentSelXform[0]`;
	
	if ($currentSelXform[1] != "")
	{
		warning "No base mesh loaded. Please select only 1 polygonal mesh to load.\n";
	} else
		{
			if (`objectType $currentSelShape[0]` != "mesh")
			{
				warning "Base mesh must be a polygonal mesh. NURBS and SUBD surfaces are not supported.\n";
			} else
				{
					textField -edit -tx $currentSelXform[0] currentBaseMeshTextField;
					print ($currentSelXform[0] + " 已经作为基础模型被载入.\n");
				}
		}
	int $ex=`objExists ($currentSelXform[0]+".prefixNam")`;
	if($ex==1){
	    string $prefixN=`getAttr ($currentSelXform[0]+".prefixNam")`;
	    textField -e  -tx $prefixN gtdriverPrefixTextField;
	}else{
	    string $prefixN=`textField -q -tx gtdriverPrefixTextField`;
	    addAttr -ln "prefixNam"  -dt "string"  ($currentSelXform[0]);
        setAttr -type "string" ($currentSelXform[0]+".prefixNam") $prefixN;
        setAttr -l true ($currentSelXform[0]+".prefixNam");
	}
}
////////////////
global proc gtloadDriverJoint()
{
	string $currentSelXform[] = `ls -sl`;	
string $type=`nodeType $currentSelXform[0]`;
if($type=="joint"){
	textField -edit -tx $currentSelXform[0] gtdriverJointTextField;
	print ($currentSelXform[0] + " 已经作为驱动关节被载入……\n");
	}
}

global proc gtloadMirrorDriverJoint()
{
	string $currentSelXform[] = `ls -sl`;	
string $type=`nodeType $currentSelXform[0]`;
if($type=="joint"){
	textField -edit -tx $currentSelXform[0] gtdriverJointSideTextField;
	print ($currentSelXform[0] + " 已经作为驱动关节被载入……\n");
	}
}

global proc gtloadDriverCon()
{
	string $currentSelXform[] = `ls -sl`;	
	textField -edit -tx $currentSelXform[0] gtdriverConTextField;
	print ($currentSelXform[0] + " 已经作为FK控制器被载入……\n");
}
//////////////////////////////////////////////////////////////////////////
global proc loadBlendshapeNode()
{
	string $currentSelXform[] = `ls -sl`;
	
	if ($currentSelXform[2] != "")
	{
		warning "Please select only one blendshape node from the channel box.\n";
	} else
		{
			if (`objectType $currentSelXform[0]` != "blendShape")
			{
				warning "Please select a blendShape node from the inputs of the channel box.\n";
			} else
				{
					textField -edit -tx $currentSelXform[0] currentBlendshapeNodeTextField;
					print ($currentSelXform[0] + " was loaded as the blendShape node.\n");
					
					if ($currentSelXform[1] != `textField -q -tx currentBaseMeshTextField`)
					{
						warning "The newly loaded blendshape node does not belong to the current base mesh. Please load the proper base mesh.\n";
					}
				}
		}
}
//////////////////////////////////
//替换添加多属性连接绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtReplaceConnectOneToAllWin(){
   if(`window -ex gtReplaceConnectOneToAllWin`) deleteUI -window gtReplaceConnectOneToAllWin;
    window -wh 500 200 -t "老船角色绑定-☆-替换添加多属性连接绑定工具!"  gtReplaceConnectOneToAllWin;
    columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1289\"";
    formLayout  gtCOTAF;
    
    textFieldGrp -l "载入控制物体名称" -text "可以手动输入属性名字" gtConOjbName;
    text -l "为控制物体创建通道盒选择的对应类型的属性，并连接给当前选择物体对应的属性\n勾选最小最大数值选项，新添加的除布尔属性之外会被限制最小最大数值\n选择所有需要被控制的物体，然后选择属性通道盒\n点击“为控制物体-创建通道盒选择的属性-并连接属性”按钮" but5;

    button  -l "载入选择物体名称" -c "gtConnectOneToAllsouceName" but4a;
    
    checkBox -l "连接属性" -v 1  gtattributAddcheck;  

    
    checkBox -l "最小最大数值：" -v 0  -onc "floatFieldGrp -e -en 1 gtattributMinM;"  -ofc "floatFieldGrp -e -en 0 gtattributMinM;" gtattributcheckmm;

    floatFieldGrp -nf 2 -en 0 -v1 0.00  -v2 0.00  -cw2 120 120 gtattributMinM;

    button -l  "为控制物体-创建通道盒选择的属性-并连接属性" -c "gtAttributeCreateAndConnect;" but6;
      
    formLayout -e

        -af but5 left 5 -af but5 top 5 -af but5 right 10
        
    -af gtConOjbName left 5 -ac gtConOjbName top 5 but5 -ap gtConOjbName right 0 70
    -ac but4a left 5 gtConOjbName -ac but4a top 5 but5 -af but4a right 10 

    -af gtattributAddcheck left 120 -ac gtattributAddcheck top 5 gtConOjbName -af gtattributAddcheck right 10

    -af gtattributcheckmm left 120 -ac gtattributcheckmm top 5 gtattributAddcheck -ap  gtattributcheckmm right 0 40
    -ac gtattributMinM left 5 gtattributcheckmm -ac gtattributMinM top 5 gtattributAddcheck -af gtattributMinM right 10
        
    -af but6 left 5 -ac but6 top 5 gtattributcheckmm -af but6 right 10
    
    gtCOTAF;
    
    showWindow gtReplaceConnectOneToAllWin;   
}

//////////////////////////
global proc gtAttributeCreateAndConnect(){

int $minMax=`checkBox -q -v gtattributcheckmm`;
float $min=`floatFieldGrp -q -v1 gtattributMinM`;
float $max=`floatFieldGrp -q -v2 gtattributMinM`;
string $conNam=`textFieldGrp -q -text gtConOjbName`;
int $connect=`checkBox -q -v gtattributAddcheck`;

string $sel[]=`ls -sl`;
string $attr[]=`channelBox -q -sma mainChannelBox`;
int $num=size($sel);

int $size=size($attr);
for($i=0;$i<$size;$i++){
    string $typ=`attributeQuery -at -n ($sel[$num-1]) ($attr[$i]) `;

    select -r $conNam;
    if($minMax==1&&$typ!="bool"){
    int $ex=`objExists ($conNam+"."+$attr[$i])`;   
    if($ex==0){
    addAttr -ln ($attr[$i])  -at $typ -min $min -max $max -k 1;
        }
        
    }else{
        
    int $ex=`objExists ($conNam+"."+$attr[$i])`;   
    if($ex==0){
    addAttr -ln ($attr[$i])  -at $typ  -k 1;  
    }      
        }
    }
    
    if($connect==1){
for($j=0;$j<size($sel);$j++){
    
for($i=0;$i<$size;$i++){
    int $ex=`objExists ($sel[$j]+"."+$attr[$i])`;
    
    if($ex==1){
    connectAttr -f ($conNam+"."+$attr[$i]) ($sel[$j]+"."+$attr[$i]);
                }
            }
        }
    }
}
////////////////////
global proc gtConnectOneToAllsouceName(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个物体";
textFieldGrp -e -text ($sel) gtConOjbName;
}
///////////////////////
//批量属性连接绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtConnectOneAttrToAllWin(){
   if(`window -ex gtConnectOneAttrToAllWin`) deleteUI -window gtConnectOneAttrToAllWin;
    window -wh 600 200  -t "老船角色绑定-☆-批量属性连接绑定工具!" gtConnectOneAttrToAllWin;
    columnLayout -adj 1 mainColumnattr;
     text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1310\"";
     text -l "一个属性连接给N个属性，使用此绑定工具，提高工作效率";

    formLayout  gtCOTAF;
    textFieldGrp -l "物体名字" -text "name"  gtCOTATFG;
    button  -l "载入选择物体的名字" -c "gtConnectOneToAllsouceN" but1;
    
    textFieldGrp -l "属性名字" -text "可以手动输入属性名字" gtCOTATFGAttr;
    button  -l "载入通道盒选择的属性" -c "gtConnectOneToAllsouceAttr" but2;
    textFieldGrp -l "被连接物体的属性名字" -text "可以手动输入属性名字" gtCOTATFGAttr2;
    button  -l "载入通道盒选择的属性" -c "gtConnectOneToAllTargetAttr" but3;

    button -l "选择被连接的物体-点击连接属性"   -c "gtConnectOneToAll" but4;

    formLayout -e
    -af gtCOTATFG left 5 -af gtCOTATFG top 10 -ap gtCOTATFG right 0 70
    -ac but1 left 5 gtCOTATFG -af but1 top 10 -af but1 right 10
    -af gtCOTATFGAttr left 5 -ac gtCOTATFGAttr top 5 but1 -ap gtCOTATFGAttr right 0 70
    -ac but2 left 5 gtCOTATFGAttr -ac but2 top 5 but1 -af but2 right 10 
    -af gtCOTATFGAttr2 left 5 -ac gtCOTATFGAttr2 top 5 but2 -ap gtCOTATFGAttr2 right 0 70
    -ac but3 left 5 gtCOTATFGAttr2 -af but3 right 10 -ac but3 top 5 but2
    -af but4 left 5 -ac but4 top 5 but3 -af but4 right 10 
    
    gtCOTAF;    
    showWindow gtConnectOneAttrToAllWin;   
}
////////////////////////
global proc gtConnectOneToAllsouceN(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个物体";
textFieldGrp -e -text ($sel) gtCOTATFG;

}

////////////////////////////////////
global proc gtConnectOneToAllsouceAttr(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textFieldGrp -e -text ($sel) gtCOTATFGAttr;

}
///////////////////////////////////////////
global proc gtConnectOneToAllTargetAttr(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textFieldGrp -e -text ($sel) gtCOTATFGAttr2;

}

////////////////////////////////////////////////
global proc gtConnectOneToAll(){
string $sNam=`textFieldGrp -q -text gtCOTATFG`;
string $aNam=`textFieldGrp -q -text gtCOTATFGAttr`;
string $sN=($sNam+"."+$aNam);
string $tNam=`textFieldGrp -q -text gtCOTATFGAttr2`;
string $sel[]=`ls -sl`;

for($i=0;$i<size($sel);$i++){
    string $tN=($sel[$i]+"."+$tNam);    
    connectAttr -f ($sN) ($tN);
    }
}
///////////////////////////
/////////////////
//MAYA时间包裹动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧

global proc gtFrameWarpWin(){

if(`window -ex gtFrameWarpWin`==1){ deleteUI -window gtFrameWarpWin;}
window  -t "老船角色绑定-☆-时间包裹动画工具!!!" -wh 400 350 gtFrameWarpWin;

columnLayout -adj 1;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1313\"";
text -l "可以包裹动画曲线，可以拉长或者缩短动画时间\n编辑工具生成的定位器0-100动画时间\n整体缩放场景动画时间\n定位器末端关键帧时间\n大于100，拉伸动画，小于100缩短动画";
string $form=`formLayout`;

separator -style "double" sep1;
button -l "选择动画时间包裹" -c "gtFrameWarp selected" but1;
separator -style "double" sep2;
button -l "全部动画时间包裹"   -c "gtFrameWarp all" but2;
separator -style "double" sep3;

formLayout -e
 -af sep1 "left" 30 -af sep1 "right" 30 -af sep1 "top" 0
 -af but1 "left" 30 -af but1 "right" 30 -af but1 "top" 10
 -af sep2 "left" 30 -af sep2 "right" 30 -af sep2 "top" 40
 -af but2 "left" 30 -af but2 "right" 30 -af but2 "top" 50
 -af sep3 "left" 30 -af sep3 "right" 30 -af sep3 "top" 80
 $form;
showWindow gtFrameWarpWin;
}

///////////////////////////////////////
global proc gtFrameWarp(string $what){
string $selected[]=`ls -sl`;
string $frameWarp=`createNode animCurveTT -n "gtframeWarp"`;
setKeyframe -t 0 -v 0 $frameWarp;
setKeyframe -t 100 -v 100 $frameWarp;
select -r $frameWarp;
keyTangent -itt linear -ott linear;

string $timeWLoc[]=`spaceLocator -p 0 0 0 -n "timeWrapLoc"`;
connectAttr -f ($frameWarp+".output") ($timeWLoc[0]+".translateX");

if($what=="all"){
string $animCurves[]=`ls -type animCurveTA -type animCurveTU -type animCurveTL`;
for ($animCurve in $animCurves){
connectAttr -f ($frameWarp+".output") ($animCurve+".input");
}
}
else
{
if(`size $selected`==0){
delete $frameWarp;
error "没有选择任何物体";
return;
}
for($item in $selected){
string $connections[]=`listConnections $item`;
for ($conn in $connections){
string $type=`nodeType $conn`;
if($type=="animCurveTL"||$type=="animCurveTU"||$type=="animCurveTA"){
connectAttr -f ($frameWarp+".output") ($conn+".input");
                }
            }
        }
    }
    select -r ($timeWLoc[0]);
    GraphEditor;
}

//////////////////////////////////
//批量编辑关节显示模式绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtJointDrawingWin(){
   if(`window -ex gtJointDrawingWin`) deleteUI -window gtJointDrawingWin;
    window -wh 400 200  -t "老船角色绑定-☆-批量编辑关节显示模式绑定工具!" gtJointDrawingWin;
    columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1316\"";

    formLayout  gtCOTAF;
    radioButtonGrp  -l "方式" -nrb  2 -la2 "选择的物体" "所有子层级"  -select 1 gtJointStyle;

    text -l "编辑全部关节的显示模式" tgtextTempA;
    checkBox -l "关节模式(勾选将显示关节)"  gtLoarSkinObjA;
    button  -l "编辑关节显示模式" -c "gtBoneDisplayType" but3;
       
    formLayout -e
  
    -af tgtextTempA left 5 -af tgtextTempA top 5 -ap tgtextTempA right 0 50
    -ac gtLoarSkinObjA left 5  tgtextTempA -af gtLoarSkinObjA top 5  -af gtLoarSkinObjA right 10
    -af  gtJointStyle left 5 -af gtJointStyle right 10 -ac gtJointStyle top 5 tgtextTempA

    -af but3 left 5 -af but3 right 5 -ac but3  top 5 gtJointStyle
       
    gtCOTAF;     
    showWindow gtJointDrawingWin;   
}
////////////////////////
global proc gtBoneDisplayType(){
    int $state=`checkBox -q -v gtLoarSkinObjA`;
    int $style=`radioButtonGrp -q -sl gtJointStyle`;

    string $sel[]=`ls -sl`;
    
for($i=0;$i<size($sel);$i++){
    string $nodetype=`nodeType ($sel[$i])`;
    if($nodetype=="joint"){
        if($state==0){
        setAttr ($sel[$i]+".drawStyle") 2;
        }else{
        setAttr  ($sel[$i]+".drawStyle") 0;
            }
        } 
        
          if($style==2){
            string $childs[]=`listRelatives -c -ad -fullPath ($sel[$i])`;
          for($ii=0;$ii<size($childs);$ii++){
    string $nodetype=`nodeType ($childs[$ii])`;
    if($nodetype=="joint"){
        if($state==0){
        setAttr ($childs[$ii]+".drawStyle") 2;
        }else{
        setAttr  ($childs[$ii]+".drawStyle") 0;
                }
            } 
        }
      }                     
   }    
}
/////////////////////////

//粒子龙卷风生成动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////

global proc gtLJFwin(){

if(`window -ex gtLJFwin`==1) deleteUI -window gtLJFwin;
window -t "老船动画吧-粒子龙卷风生成动画工具" -wh 400 200 gtLJFwin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1319\"";
string $form=`formLayout`;
textFieldGrp  -l "龙卷风名称：" -tx "gtLjf" -cw2 140 82  gtLjfTextF1;

intFieldGrp -l "控制器数量：" -nf 1 -v1 5 gtnumConV;
string $but1=`button -l "创建粒子龙卷风"  -c "gtLJF;"`;
formLayout -e 
 -af gtLjfTextF1 top 12  -af gtLjfTextF1 left 30 -af gtLjfTextF1 right 30

 -ac gtnumConV top 12 gtLjfTextF1-af gtnumConV left 30 -af gtnumConV right 30

 -ac $but1 "top" 12 gtnumConV -af $but1 "left" 30 -af $but1 "right" 30 
  $form;
showWindow gtLJFwin;

}
////////////////////////////
global proc gtLJF(){
string $name=`textFieldGrp -q -text gtLjfTextF1`;
int $numCon[]=`intFieldGrp -q -v gtnumConV`;

if(`objExists ($name+"_ctrl_curve")`==1){
confirmDialog -title "重新指定名称" -message "请重新输入其它名称" -button "应用";}
else{
string $curve="curve -d 3 ";
for($i=0;$i<$numCon[0];$i++){
    float $x=rand(-1.0,3.5);
    float $z=rand(1,3);
   // float $per=10.0/$numCon[0];
    $curve+="-p "+($i*$x*0.6)+" "+($i*5)+" "+($i*$z*0.6)+" ";
}
eval ($curve);
rename ($name+"_ctrl_curve");
string $shap[]=`listRelatives -s ($name+"_ctrl_curve")`;
float $max=`getAttr ($shap[0]+".maxValue")`;


setAttr ($name+"_ctrl_curve.overrideEnabled") 1;
setAttr ($name+"_ctrl_curve.overrideDisplayType") 2;

for($i=0;$i<$numCon[0];$i++){
select -r ($name+"_ctrl_curveShape.cv["+$i+"]");
newCluster " -envelope 1";
rename ($name+"_ctrl_root"+$i);
}

circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($numCon[0]*0.5) -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"Con");
group -n  ($name+"ConGrp");

select -cl;

for($i=0;$i<$numCon[0];$i++){
select -add ($name+"_ctrl_root"+$i);
setAttr ($name+"_ctrl_root"+$i+".v") 0;
setAttr -l 1 ($name+"_ctrl_root"+$i+".v");
}
/////////////////
string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
    
curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($sel[$i]+"Con");
group -n ($sel[$i]+"ConGrp");
group -n ($sel[$i]+"ConGrpA");
scale -r (0.5) (0.5) (0.5);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
scale -r ($numCon[0]*0.5) ($numCon[0]*0.5) ($numCon[0]*0.5);
  string $shape[]=`listRelatives -s ($sel[$i]+"Con")`;
    setAttr ($shape[0]+".overrideEnabled") 1;
    setAttr ($shape[0]+".overrideColor") 13;   

select -r ($sel[$i]);
select -add ($sel[$i]+"ConGrpA");
delete `pointConstraint`;
select -r ($sel[$i]);
select -add ($sel[$i]+"Con");
parent;
select -r ($sel[$i]+"ConGrpA");
select -add ($name+"Con");
parent;
}

//////////////////////
emitter -pos 0 0 0 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 15 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 -n ($name+"_spray");
particle -n ($name+"_dust");
connectDynamic -em ($name+"_spray") ($name+"_dust");

createNode pointOnCurveInfo -n ($name+"_particlePosition");
connectAttr -f ($name+"_ctrl_curveShape.worldSpace[0]") ($name+"_particlePosition.inputCurve");

setAttr ($name+"_dustShape.lifespanMode") 1;
setAttr ($name+"_dustShape.lifespan") 7;

setAttr ($name+"_dustShape.particleRenderType") 0;
addAttr -is true -ln "colorAccum" -at bool -dv false ($name+"_dustShape");
addAttr -is true -ln "useLighting" -at bool -dv false ($name+"_dustShape");
addAttr -is true -ln "pointSize" -at long -min 1 -max 60 -dv 2 ($name+"_dustShape");
addAttr -is true -ln "multiCount" -at long -min 1 -max 60 -dv 10 ($name+"_dustShape");
addAttr -is true -ln "multiRadius" -at "float" -min 0 -max 10 -dv 0.3 ($name+"_dustShape");
addAttr -is true -ln "normalDir" -at long -min 1 -max 3 -dv 2 ($name+"_dustShape");
setAttr ($name+"_dustShape.multiCount") 35;

setAttr ($name+"_spray.rate") 500;
setAttr ($name+"_spray.speed") 0;

addAttr -ln "rate" -keyable 1 -min 0 -dv 500  ($name+"Con");
addAttr -ln "rootRadius" -keyable 1 -min 0.1 -dv 0.4  ($name+"Con");
addAttr -ln "topGrow"    -keyable 1 -min 0.1 -dv 2.5  ($name+"Con");
addAttr -ln "sprialNumber" -keyable 1 -min 0.1 -dv 0.75  ($name+"Con");
connectAttr -f ($name+"Con.rate") ($name+"_spray.rate");

select -r ($name+"_dustShape");
string $expLJF="float $rootRadius=`getAttr ";
       $expLJF+=($name);
       $expLJF+="Con.rootRadius`;\n";

       $expLJF+="float $topGrow=`getAttr ";
       $expLJF+=($name);
       $expLJF+="Con.topGrow`;\n";

       $expLJF+="float $sprialNum=`getAttr ";
       $expLJF+=($name);
       $expLJF+="Con.sprialNumber`;\n";

       $expLJF+="float $age=sin(1.57*";
       $expLJF+=($name);
       $expLJF+="_dustShape.age/";
       $expLJF+=($name);
       $expLJF+="_dustShape.lifespan);\n";

       $expLJF+="setAttr ";
       $expLJF+=($name);
       $expLJF+="_particlePosition.parameter ($age*"+$max+");\n";

       $expLJF+="float $pos[]=`getAttr ";
       $expLJF+=($name);
       $expLJF+="_particlePosition.position`;\n";

       $expLJF+="float $rad=$rootRadius+pow(";
       $expLJF+=($name);
       $expLJF+="_dustShape.age/$topGrow,3.6);\n";

       $expLJF+="float $ang=";
       $expLJF+=($name);
       $expLJF+="_dustShape.age*3.1+(";
       $expLJF+=($name);
       $expLJF+="_dustShape.particleId+rand(0.5))*$sprialNum;\n";

       $expLJF+="float $xpos=$rad*sin($ang);\n";
       $expLJF+="float $zpos=$rad*cos($ang);\n";
       $expLJF+=($name);
       $expLJF+="_dustShape.position=<<($pos[0]+$xpos),$pos[1],($pos[2]+$zpos)>>;\n";

dynExpression -s $expLJF -rad -n ($name+"_dustExp_runtime");
dynExpression -s $expLJF -c -n ($name+"_dustExp_creation");

playbackOptions -ast 1 -aet 240;
playbackOptions -min 1 -max 240;
currentTime 1;
select -r ($name+"_spray");
select -add ($name+"_dust") ;
select -add ($name+"_ctrl_curve") ;
select -add ($name+"ConGrp") ;
group -n ($name+"Grp");
select -r ($name+"Con");
    }
}
/////////////////////////
//变换数据拷贝动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtMirrorAnimCurveProcWin(){
if(`window -ex gtMirrorAnimCurveProcWin`) deleteUI -window gtMirrorAnimCurveProcWin;
if(`windowPref -ex gtMirrorAnimCurveProcWin`) windowPref -r gtMirrorAnimCurveProcWin;
window -wh 365 450 -t "老船角色绑定-☆-变换数据拷贝动画工具" gtMirrorAnimCurveProcWin;
scrollLayout gtmainAnimL;
columnLayout -w 360 -adj 1 mainColumnattrma;
text -l "点击下方按钮↓↓↓↓↓" -w 360;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -w 360  -c "showHelp -a \"http://www.animate8.com/archives/1326\"";
separator -style single -w 360 ;
frameLayout -cl 1 -cll 1 -l "关联工具" -lv 1 -w 360 gtframeAnimCurveF;

rowColumnLayout -nc 2 -cw 1 180 -cw 2 180 gtAnimmMirrorRW;
text -l "连接输出物体";
text -l "连接输入物体";
paneLayout;
textScrollList -numberOfRows 8  -showIndexedItem 4  gtTextScroLA;
setParent..;
    
paneLayout;
textScrollList -numberOfRows 8  -showIndexedItem 4 -sc "gtAnimCurveConnectionProc;" gtTextScroLB;
setParent..; 
setParent..;     
rowColumnLayout -nc 3 -cw 1 178 -cw 2 4 -cw 3 178;    
button  -l "载入输出物体" -c "gtLoadConnectConAProc" but1a;
text -l " ";
button  -l "载入输入物体" -c "gtLoadConnectConBProc" but1b;
setParent..;    
text -l "" -h 36 -w 360 gtAnimCurveTextShowRusults;
separator -style double -w 360 ;

rowColumnLayout -nc 2 -cw 1 180 -cw 2 180;     
textFieldGrp -l "选择物体字符：" -text "_l" -cw2 90  70 gtAnimCurveStringA;
textFieldGrp -l "查找物体字符：" -text "_r" -cw2 90  70  gtAnimCurveStringB;
setParent..;   

rowColumnLayout -nc 2 -cw 1 240 -cw 2 120; 
text -l "--编辑查找字符，选择一侧需要关联的物体--";
button  -l "自动关联对称物体" -c "gtAnimCurveConnectionProcA;" but1C;
setParent..;   
setParent..;    

frameLayout -cl 1 -cll 1 -l "查看关联" -lv 1 -w 360 gtframeAnimCurveFB;
string $scrollLayout = `scrollLayout -horizontalScrollBarThickness 16 -verticalScrollBarThickness  16  -h 150 `;
rowColumnLayout -nc 5 -cw 1 110 -cw 2 4 -cw 3 110 -cw 4 4 -cw 5 110;
button -h 20 -l "更新输出列表" -c "gtAnimCurveSelectProcF" but1Bb;
text -l "";
button -h 20  -l "更新输入列表" -c "gtAnimCurveSelectProcG" but1Ba;
text -l "";
button -h 20  -l "更新未匹配列表" -c "gtAnimCurveSelectProcH" but1Bc;    
paneLayout;
text -l "没有连接记录" -h 100 gtConnectionResultsTextA;   
setParent..; 
text -l ""; 
paneLayout;
text -l "没有连接记录" -h 100 gtConnectionResultsTextB;
setParent..; 
text -l "";
paneLayout;
text -l "没有连接记录" -h 100 gtConnectionResultsTextC;
setParent..; 

button -h 20  -l "选择输出物体" -c "gtAnimCurveSelectProcA" but1BB;
text -l "";
button -h 20  -l "选择输入物体" -c "gtAnimCurveSelectProcB" but1BA;
text -l "";
button -h 20  -l "选择未匹配物体" -c "gtAnimCurveSelectProcC" but1BC;    
setParent..;    
setParent..;      
setParent..;      
frameLayout -cl 0 -cll 1 -l "镜像动画POSE" -lv 1 -w 360 gtframeAnimCurveFBa;
columnLayout -w 360 -adj 1 ;
radioButtonGrp -en 1  -l "拷贝方式：" -nrb 3 -la3 "当前POSE"  "动画曲线"   "驱动动画" -cw4 90 90 90 90 -select 1 gtAnimCurveTpyeRange;
rowColumnLayout -nc 5 -cw 1 25 -cw 2 70 -cw 3 90 -cw 4 90  -cw 5 90;
text -l "";
text -l "应用选项:";
checkBox -l "应用位移" -v 1 gtAnimCurveTrsAttr;
checkBox -l "应用旋转" -v 1 gtAnimCurveRotAttr;
checkBox -l "应用缩放" gtAnimCurveScaleAttr;
setParent..;      
rowColumnLayout -nc 2 -cw 1 180 -cw 2 180;
	radioButtonGrp -en 1  -l "位移X：" -nrb  2 -la2 "一致"  "反向" -cc "gtAnimCurveDoProcA" -cw3 60 60 60  -select 2 gtAnimCurveTrsX;
	radioButtonGrp -en 1  -l "旋转X：" -nrb  2 -la2 "一致"  "反向"  -cc "gtAnimCurveDoProcA" -cw3 60 60 60  -select 1 gtAnimCurveRotX;
	
	radioButtonGrp -en 1  -l "位移Y：" -nrb  2 -la2 "一致"  "反向" -cc "gtAnimCurveDoProcA"  -cw3 60 60 60   -select 1 gtAnimCurveTrsY;
	radioButtonGrp -en 1  -l "旋转Y：" -nrb  2 -la2 "一致"  "反向"  -cc "gtAnimCurveDoProcA"  -cw3 60 60 60   -select 1 gtAnimCurveRotY;
	
	radioButtonGrp -en 1  -l "位移Z：" -nrb  2 -la2 "一致"  "反向" -cc "gtAnimCurveDoProcA"  -cw3 60 60 60   -select 1 gtAnimCurveTrsZ;
	radioButtonGrp -en 1  -l "旋转Z：" -nrb  2 -la2 "一致"  "反向"  -cc "gtAnimCurveDoProcA"  -cw3 60 60 60   -select 1 gtAnimCurveRotZ;
setParent..;  
separator -style double -w 360 ;       
rowColumnLayout -nc 2 -cw 1 200 -cw 2 160; 
text -l "--选择制作好pose的控制器--";
button  -l "拷贝变换数据" -c "gtAnimCurveDoProcA" butaa; 
setParent..;  
   
rowColumnLayout -nc 5 -cw 1 118 -cw 2 3 -cw 3 118 -cw 4 3 -cw 5 118;
    button  -l "镜像控制器形态" -c "gtCurveConMirrorShapeA" butaca;
    text -l "";
    button  -l "选择输出物体" -c "gtAnimCurveSelectProcD" butaaa;
    text -l "";
    button  -l "选择输入物体" -c "gtAnimCurveSelectProcE" butaab;
    setParent..;         
    setParent..;      
    setParent..;   
separator -style double -w 360 ;
text -l "没有操作" -h 40 gtAnimCurveResultShowText;  
separator -style double -w 360 ;
showWindow gtMirrorAnimCurveProcWin;   
}
///////////////////
global proc gtLoadConnectConAProc(){
    string $sel[]=`ls -type "transform" -sl`;
    int $size=size($sel);
    if($size==0)error "没有选择任何物体";
    textScrollList -e  -ra gtTextScroLA;
    string $textNamS="textScrollList -e   ";
    for($i=0;$i<size($sel);$i++){
        $textNamS+=(" -append "+$sel[$i]);
    }
    $textNamS+=" gtTextScroLA;";
    eval  $textNamS;
    textScrollList -e  -selectItem ($sel[0])  gtTextScroLA;
    }
/////////////////////////////
global proc gtLoadConnectConBProc(){
    string $sel[]=`ls -type "transform" -sl`;
        int $size=size($sel);
    if($size==0)error "没有选择任何物体";
   textScrollList -e  -ra gtTextScroLB;
    string $textNamS="textScrollList -e ";
    for($i=0;$i<size($sel);$i++){
        $textNamS+=(" -append "+$sel[$i]);
    }
    $textNamS+=" gtTextScroLB;";
    eval  $textNamS;
    }
////////////////////////////
 global proc gtAnimCurveConnectionProc(){
     string $outputObj[]=`textScrollList -q -selectItem gtTextScroLA`;
     string $inputObj[]=`textScrollList -q -selectItem gtTextScroLB`;
     int $exa=`objExists $outputObj[0]`;
     int $exb=`objExists $inputObj[0]`;
     int $ex;
    if($outputObj[0]==$inputObj[0])error "连接的输出物体和输入物体是同一个物体";
     if($exa==1&&$exb==1){
         $ex=`objExists ($outputObj[0]+".gtAnimCuvreMirrorConnetAttr")`;
         if($ex==0)addAttr -ln "gtAnimCuvreMirrorConnetAttr"  -at long  $outputObj[0]; 
        
         $ex=`objExists ($inputObj[0]+".gtAnimCuvreMirrorConnetAttr")`;
         if($ex==0)addAttr -ln "gtAnimCuvreMirrorConnetAttr"  -at long  $inputObj[0];  
         string $inputs[]=`listConnections -s 1 -d 0 -p 1 ($outputObj[0]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=size($inputs);
         if($ex==1)disconnectAttr ($inputs[0]) ($outputObj[0]+".gtAnimCuvreMirrorConnetAttr");
         $inputs=`listConnections -s 1 -d 0 -p 1 ($inputObj[0]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=size($inputs);
         if($ex==1)disconnectAttr ($inputs[0]) ($inputObj[0]+".gtAnimCuvreMirrorConnetAttr");
         connectAttr -f ($outputObj[0]+".gtAnimCuvreMirrorConnetAttr") ($inputObj[0]+".gtAnimCuvreMirrorConnetAttr");
         string $text=("     物体："+$outputObj[0]+"，与物体："+$inputObj[0]+"\n创建动画曲线镜像连接");
         text -e -l $text   gtAnimCurveTextShowRusults;
     }  
}
///////////////////////
global proc gtAnimCurveConnectionProcA(){
string $inputs[];
     string $selectString=`textFieldGrp -q -tx gtAnimCurveStringA`;
     string $searchString=`textFieldGrp -q -tx gtAnimCurveStringB`;
     string $sel[]=`ls -sl`;
     int $size=size($sel);
     if($size==0)error "没有选择任何物体";
     string $notDoObj[];
     clear $notDoObj;
     string $textA="";
     string $textB="";
     string $textC="";

     for($i=0;$i<size($sel);$i++){
     string $test =($sel[$i]);
    string $tgRegular =$selectString;
    string $tempN = `substitute $tgRegular $test $searchString`;
    int $pipei=`gmatch $test ("*"+$selectString+"*")`;

     string $searchN=$tempN;
     string $outputObj=($sel[$i]);
     string $inputObj=$searchN;
     int $exa=`objExists $outputObj`;
     int $exb=`objExists $inputObj`;
     if($exb==0||$pipei==0){
          int $notS=size($notDoObj);
          $notDoObj[$notS]=($sel[$i]);
          continue;
     }
     if($exa==1&&$exb==1){
         int $ex=`objExists ($outputObj+".gtAnimCuvreMirrorConnetAttr")`;
         if($ex==0)addAttr -ln "gtAnimCuvreMirrorConnetAttr"  -at long  $outputObj; 
        
         $ex=`objExists ($inputObj+".gtAnimCuvreMirrorConnetAttr")`;
         if($ex==0)addAttr -ln "gtAnimCuvreMirrorConnetAttr"  -at long  $inputObj;  
         $inputs=`listConnections -s 1 -d 0 -p 1 ($outputObj+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=size($inputs);
         if($ex==1)disconnectAttr ($inputs[0]) ($outputObj+".gtAnimCuvreMirrorConnetAttr");
         $inputs=`listConnections -s 1 -d 0 -p 1 ($inputObj+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=size($inputs);
         if($ex==1)disconnectAttr ($inputs[0]) ($inputObj+".gtAnimCuvreMirrorConnetAttr");
         connectAttr -f ($outputObj+".gtAnimCuvreMirrorConnetAttr") ($inputObj+".gtAnimCuvreMirrorConnetAttr");
         string $text=("     \n物体："+$outputObj+"，与物体："+$inputObj+"，创建动画曲线镜像连接");
         print $text ;
        $textA+="\n"+$outputObj+" ";
        $textB+="\n"+$inputObj+" ";
             }  
         } 
     text -e -l $textA gtConnectionResultsTextA;
     text -e -l $textB gtConnectionResultsTextB;

       int $sizeNot=size($notDoObj);
       if($sizeNot>0){
       select -r $notDoObj;
       print "\n当前选择的物体，没有找到名称匹配的对象";
       for($i=0;$i<$sizeNot;$i++){
           $textC+=("\n"+$notDoObj[$i]+" ");
           }
      text -e -l $textC gtConnectionResultsTextC;
       }else{
      text -e -l "" gtConnectionResultsTextC;    
       }
}
////////////////////////
 global proc gtAnimCurveSelectProcA(){
      string $obj=`text -q -l  gtConnectionResultsTextA`;
      string $gtm[];
      int $gtmu=`tokenize $obj " " $gtm`;
      select -cl;
      for($i=0;$i<size($gtm);$i++){
          select -add ($gtm[$i]);
      }
 }
////////////////////////
 global proc gtAnimCurveSelectProcB(){
      string $obj=`text -q -l  gtConnectionResultsTextB`;
      string $gtm[];
      int $gtmu=`tokenize $obj " " $gtm`;
      select -cl;
      for($i=0;$i<size($gtm);$i++){
          select -add ($gtm[$i]);
      }
 }
 ////////////////////////
 global proc gtAnimCurveSelectProcC(){
      string $obj=`text -q -l  gtConnectionResultsTextC`;
      string $gtm[];
      int $gtmu=`tokenize $obj " " $gtm`;
      select -cl;
      for($i=0;$i<size($gtm);$i++){
          select -add ($gtm[$i]);
      }
 }
///////////////
 global proc gtAnimCurveSelectProcD(){
      string $obj[]=`ls -type "transform"`;
      string $inputs[];
      clear $inputs;
            string $outputs[];
      clear $outputs;
            string $others[];
      clear $others;
            string $aimObj[];
      clear $aimObj;
      
      for($i=0;$i<size($obj);$i++){
        int $ex=`objExists ($obj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0){
            int $size=size($others);
            $others[$size]=$obj[$i];
        }else{
            int $size=size($aimObj);
            $aimObj[$size]=$obj[$i];  
            }
      }      
      int $aimNum=size($aimObj);
      
      for($i=0;$i<$aimNum;$i++){
          string $in[]=`listConnections -d 0 -s 1($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         int $ex=`objExists $in[0]`;
         if($ex==1){
             int $inNum=size($inputs);
             $inputs[$inNum]=$aimObj[$i];
         }
         $in=`listConnections -s 0 -d 1 ($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $outNum=size($outputs);
             $outputs[$outNum]=$aimObj[$i];
         }
      }
     int $size=size($outputs);
     if($size>0)select -r $outputs;     
 }
/////////////////////////
///////////////
 global proc gtAnimCurveSelectProcE(){
      string $obj[]=`ls -type "transform"`;
      string $inputs[];
      clear $inputs;
            string $outputs[];
      clear $outputs;
            string $others[];
      clear $others;
            string $aimObj[];
      clear $aimObj;
      
      for($i=0;$i<size($obj);$i++){
        int $ex=`objExists ($obj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0){
            int $size=size($others);
            $others[$size]=$obj[$i];
        }else{
            int $size=size($aimObj);
            $aimObj[$size]=$obj[$i];  
            }
      }      
      int $aimNum=size($aimObj);
      
      for($i=0;$i<$aimNum;$i++){
          string $in[]=`listConnections -d 0 -s 1($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         int $ex=`objExists $in[0]`;
         if($ex==1){
             int $inNum=size($inputs);
             $inputs[$inNum]=$aimObj[$i];
         }
         $in=`listConnections -s 0 -d 1 ($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $outNum=size($outputs);
             $outputs[$outNum]=$aimObj[$i];
         }
      }
     int $size=size($inputs);
     if($size>0)select -r $inputs;     
 }
/////////////////////////
 global proc gtAnimCurveSelectProcF(){
      string $obj[]=`ls -type "transform"`;
      string $inputs[];
      clear $inputs;
            string $outputs[];
      clear $outputs;
            string $others[];
      clear $others;
            string $aimObj[];
      clear $aimObj;
      
      for($i=0;$i<size($obj);$i++){
        int $ex=`objExists ($obj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0){
            int $size=size($others);
            $others[$size]=$obj[$i];
        }else{
            int $size=size($aimObj);
            $aimObj[$size]=$obj[$i];  
            }
      }      
      int $aimNum=size($aimObj);
      
      for($i=0;$i<$aimNum;$i++){
          string $in[]=`listConnections -d 0 -s 1($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         int $ex=`objExists $in[0]`;
         if($ex==1){
             int $inNum=size($inputs);
             $inputs[$inNum]=$aimObj[$i];
         }
         $in=`listConnections -s 0 -d 1 ($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $outNum=size($outputs);
             $outputs[$outNum]=$aimObj[$i];
         }
      }
     int $size=size($outputs);
     if($size>0){
         string $textA="";
         for($i=0;$i<$size;$i++){
           $textA+=(" \n"+ $outputs[$i]); 
        }
     text -e -l $textA gtConnectionResultsTextA;
     }
 }
 /////////////////////////
 global proc gtAnimCurveSelectProcG(){
      string $obj[]=`ls -type "transform"`;
      string $inputs[];
string $in[];
int $ex;
      clear $inputs;
            string $outputs[];
      clear $outputs;
            string $others[];
      clear $others;
            string $aimObj[];
      clear $aimObj;
      
      for($i=0;$i<size($obj);$i++){
        int $ex=`objExists ($obj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0){
            int $size=size($others);
            $others[$size]=$obj[$i];
        }else{
            int $size=size($aimObj);
            $aimObj[$size]=$obj[$i];  
            }
      }      
      int $aimNum=size($aimObj);
      
      for($i=0;$i<$aimNum;$i++){
         $in=`listConnections -d 0 -s 1($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $inNum=size($inputs);
             $inputs[$inNum]=$aimObj[$i];
         }
         $in=`listConnections -s 0 -d 1 ($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $outNum=size($outputs);
             $outputs[$outNum]=$aimObj[$i];
         }
      }
     int $size=size($inputs);
     if($size>0){
         string $textA="";
         for($i=0;$i<$size;$i++){
           $textA+=(" \n"+ $inputs[$i]); 
        }
     text -e -l $textA gtConnectionResultsTextB;
     }
 }
 /////////////////////////
global proc gtAnimCurveSelectProcH(){
string $obj[]=`ls -type "transform" -sl`;
string $inputs[];
string $in[];
int $ex;
int $size;
      clear $inputs;
            string $outputs[];
      clear $outputs;
            string $others[];
      clear $others;
            string $aimObj[];
      clear $aimObj;
      
      for($i=0;$i<size($obj);$i++){
        $ex=`objExists ($obj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0){
            $size=size($others);
            $others[$size]=$obj[$i];
        }else{
            $size=size($aimObj);
            $aimObj[$size]=$obj[$i];  
            }
      }      
      int $aimNum=size($aimObj);
      
      for($i=0;$i<$aimNum;$i++){
         $in=`listConnections -d 0 -s 1($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $inNum=size($inputs);
             $inputs[$inNum]=$aimObj[$i];
         }
         $in=`listConnections -s 0 -d 1 ($aimObj[$i]+".gtAnimCuvreMirrorConnetAttr")`;
         $ex=`objExists $in[0]`;
         if($ex==1){
             int $outNum=size($outputs);
             $outputs[$outNum]=$aimObj[$i];
         }
      }
     $size=size($others);
     if($size>0){
         string $textA="";
         for($i=0;$i<$size;$i++){
           $textA+=(" \n"+ $others[$i]); 
        }
     text -e -l $textA gtConnectionResultsTextC;
     }
 }
 /////////////////////////
global proc gtAnimCurveDoProcA(){
int $ex; 
string $inputsTemp[];
string $tempInputs[];
string $type;
int $TpyeRange=`radioButtonGrp -q -sl gtAnimCurveTpyeRange`;
int $TpyeTrsX=`radioButtonGrp -q -sl gtAnimCurveTrsX`;
int $TpyeTrsY=`radioButtonGrp -q -sl gtAnimCurveTrsY`;
int $TpyeTrsZ=`radioButtonGrp -q -sl gtAnimCurveTrsZ`;
int $TpyeRotX=`radioButtonGrp -q -sl gtAnimCurveRotX`;
int $TpyeRotY=`radioButtonGrp -q -sl gtAnimCurveRotY`;
int $TpyeRotZ=`radioButtonGrp -q -sl gtAnimCurveRotZ`;
int $scl=`checkBox -q -v gtAnimCurveScaleAttr`;
int $trs=`checkBox -q -v gtAnimCurveTrsAttr`;
int $rot=`checkBox -q -v gtAnimCurveRotAttr`;

string $sel[]=`ls -type "transform" -sl`;
    for($i=0;$i<size($sel);$i++){
      string $attr[]={".tx",".ty",".tz",".rx",".ry",".rz"};
       
      for($j=0;$j<6;$j++){
        string $inputsCurve[]=`listConnections -s 1 -d 0 ($sel[$i]+$attr[$j])`;
        $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
         string $inputsT[]=`listConnections ($inputsCurve[0]+".input")`;
        $ex=`objExists $inputsT[0]`; 
        if($ex==1&&$TpyeRange==2){
         text -e -l "当前选择的物体，不能执行拷贝动画曲线操作\n有些物体的动画曲线被其他物体驱动或者控制"  gtAnimCurveResultShowText;
         error "当前选择的物体中，有些物体的动画曲线被其他物体驱动或者控制，不能执行拷贝动画曲线操作";
        }
        if($ex==0&&$TpyeRange==3){
        text -e -l "当前选择的物体，不能执行拷贝驱动关键帧操作\n有些物体的驱动动画曲线没有驱动输入连接"  gtAnimCurveResultShowText;
        error "当前选择的物体，不能执行拷贝驱动关键帧操作，有些物体的驱动动画曲线没有驱动输入连接"; 
                }                
            }
        }   
    }
    
if($TpyeRange==3){
    for($i=0;$i<size($sel);$i++){
        string $currentObj=$sel[$i];
        int $ex=`objExists ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0)continue;
        
        string $tempS[]=`listConnections -s 1 -d 1 ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        string $otherSideObj=$tempS[0];
        
        if($trs==1){
          string $attr[]={".tx",".ty",".tz"};
      for($j=0;$j<3;$j++){
          
        int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
        
        string $inputsCurve[]=`listConnections ($currentObj+$attr[$j])`;
        int $ex=`objExists $inputsCurve[0]`;
        
        if($ex==0)continue;
        string $type=`nodeType $inputsCurve[0]`;
        if($type=="blendWeighted"){
            select -r $inputsCurve[0];
            duplicate -rr -un;
            
            string $dupInputs[]=`ls -sl`;
            select -r $dupInputs[0];
            
            string $tempInputs[]=`listConnections ($dupInputs[0]+".input")`;
            string $tempN[];
            clear $tempN;
            for($jj=0;$jj<size($tempInputs);$jj++){
            string $tempInA[]=`listConnections -s 1 -d 0 -p 1 ($tempInputs[$jj]+".input")`;
            string $tempIn[]=`listConnections ($tempInputs[$jj]+".input")`;

            int $ex=`objExists $tempIn[0]`;
                if($ex==1){
                  disconnectAttr ($tempInA[0]) ($tempInputs[$jj]+".input");
  
                    int $sizeTemp=size($tempN);
                     $tempN[$sizeTemp]=$tempIn[0];
                }
            }
           select -r $tempN;
            for($aa=0;$aa<size($tempN);$aa++){
                int $ex=`objExists ($tempN[$aa]+".gtAnimCuvreMirrorConnetAttr")`;
                if($ex==1){
                string $tempA[]=`listConnections -s 1 -d 1 ($tempN[$aa]+".gtAnimCuvreMirrorConnetAttr")`;
                int $eex=`objExists $tempA[0]`;
                if($eex==1)delete $tempA[0];
                }
            }
            delete;
             string $inputsTemp[]=`listConnections ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        if($ex==1)delete $inputsTemp[0]; 
          
        connectAttr -f ($dupInputs[0]+".output") ($otherSideObj+$attr[$j]);

            string $blwInputs[]=`listConnections ($dupInputs[0]+".input")`;
            string $oldInputs[]=`listConnections ($inputsCurve[0]+".input")`;
            
            for($jj=0;$jj<size($blwInputs);$jj++){
                
                string $animCurveOld=$oldInputs[$jj];
                string $conA[]=`listConnections -s 1 -d 0 ($animCurveOld+".input")`;
                int $ex=`objExists ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
                if($ex==0)continue;
                
                string $conB[]=`listConnections -s 1 -d 1 ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
                string $conAttr[]=`listConnections -s 1 -d 0 -p 1 ($animCurveOld+".input")`;
                string $driveAttr=`substitute $conA[0] $conAttr[0]  ""`;
                connectAttr -f  ($conB[0]+$driveAttr) ($blwInputs[$jj]+".input");
            }
            
        }else{
     
        select -r $inputsCurve[0];
        int $state=`copyKey` ;
        
        if($state==1){
        string $inputsTemp[]=`listConnections ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        string $inputCon[];
        if($ex==1){
        $inputCon=`listConnections -s 1 -d 1 -p 1 ($inputsTemp[0]+".input")`;

         delete $inputsTemp[0];   
        }
        
        select -r $otherSideObj;
        pasteKey;
          $inputsTemp=`listConnections ($otherSideObj+$attr[$j])`;
          string $conA[]=`listConnections ($inputsCurve[0]+".input")`;
          $ex=`objExists $conA[0]`;
          if($ex==0)continue;
          string $conB[]=`listConnections -s 1 -d 1 ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
          string $conAttr[]=`listConnections -s 1 -d 0 -p 1 ($inputsCurve[0]+".input")`;
          string $driveAttr=`substitute $conA[0] $conAttr[0]  ""`;
          string $conBB=($conB[0]+$driveAttr);
        connectAttr -force $conBB ($inputsTemp[0]+".input");
                }
            }
        }
     }
     
    if($rot==1){  
       string $attr[]={".rx",".ry",".rz"};
       
      for($j=0;$j<3;$j++){
        int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
        string $inputsCurve[]=`listConnections ($currentObj+$attr[$j])`;
        int $ex=`objExists $inputsCurve[0]`;
        if($ex==0)continue;
        string $type=`nodeType $inputsCurve[0]`;
       
        if($type=="unitConversion"){//判断C
            select -r $inputsCurve[0];
            duplicate -rr -un;
            string $dupInputs[]=`ls -sl`;
            select -r $dupInputs[0];
            
          string $tempInputs[]=`listConnections ($dupInputs[0]+".input")`;
                  int $ex=`objExists $tempInputs[0]`;
        if($ex==0)continue;
        string $type=`nodeType $tempInputs[0]`;
         
          if($type!="blendWeighted")continue;

          $tempInputs=`listConnections ($tempInputs[0]+".input")`;
 
            string $tempN[];
            clear $tempN;
            for($jj=0;$jj<size($tempInputs);$jj++){
            string $tempInAA[]=`listConnections -s 1 -d 0 ($tempInputs[$jj]+".input")`;
            string $tempInA[]=`listConnections -s 1 -d 0 -p 1 ($tempInAA[0]+".input")`;
            
            string $tempIn[]=`listConnections ($tempInAA[0]+".input")`;
            int $ex=`objExists $tempIn[0]`;
                if($ex==1){
                  disconnectAttr ($tempInA[0]) ($tempInAA[0]+".input");
  
                    int $sizeTemp=size($tempN);
                     $tempN[$sizeTemp]=$tempIn[0];
                }
            }
            
           select -r $tempN;
            for($aa=0;$aa<size($tempN);$aa++){
                int $ex=`objExists ($tempN[$aa]+".gtAnimCuvreMirrorConnetAttr")`;
                if($ex==1){
                string $tempA[]=`listConnections -s 1 -d 1 ($tempN[$aa]+".gtAnimCuvreMirrorConnetAttr")`;
                int $eex=`objExists $tempA[0]`;
                if($eex==1)delete $tempA[0];
                }
            }
            delete;          
            
             string $inputsTemp[]=`listConnections ($otherSideObj+$attr[$j])`;
        $ex=`objExists $inputsTemp[0]`;
        if($ex==1)delete $inputsTemp[0];   
        connectAttr -f ($dupInputs[0]+".output") ($otherSideObj+$attr[$j]);

            string $blwInputsT[]=`listConnections ($dupInputs[0]+".input")`;
            $type=`nodeType $blwInputsT[0]`;
            
        if($type=="blendWeighted"){//判断A
            
            string $blwInputs[]=`listConnections ($blwInputsT[0]+".input")`;
            string $tempOld[]=`listConnections ($inputsCurve[0]+".input")`;
            string $oldInputs[]=`listConnections ($tempOld[0]+".input")`;

            for($jj=0;$jj<size($blwInputs);$jj++){//循环A
                
                string $animCurveOld=$oldInputs[$jj];
                string $animCurveA[]=`listConnections -s 1 -d 0 ($animCurveOld+".input")`;

                string $conA[]=`listConnections -s 1 -d 0 ($animCurveA[0]+".input")`;

                int $ex=`objExists ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
                if($ex==0)continue;
                
                string $animCurveB[]=`listConnections -s 1 -d 0 ($blwInputs[$jj]+".input")`;

                string $conB[]=`listConnections -s 1 -d 1 ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
                string $conAttr[]=`listConnections -s 1 -d 0 -p 1 ($animCurveA[0]+".input")`;
                string $driveAttr=`substitute $conA[0] $conAttr[0]  ""`;
                connectAttr -f  ($conB[0]+$driveAttr) ($animCurveB[0]+".input");
                    }//循环A
                }//判断A
              
            }//判断B
 
        if($type!="unitConversion"||$type!="blendWeighted") {     
        select -r $inputsCurve[0];
        int $state=`copyKey` ;
        
        if($state==1){
        string $inputsTemp[]=`listConnections ($otherSideObj+$attr[$j])`;
        $ex=`objExists $inputsTemp[0]`;
        string $inputCon[];
        if($ex==1){
        $inputCon=`listConnections -s 1 -d 1 -p 1 ($inputsTemp[0]+".input")`;

         delete $inputsTemp[0];   
        }//判断

        select -r $otherSideObj;
        pasteKey;
        $inputsTemp=`listConnections ($otherSideObj+$attr[$j])`;
          string $conA[]=`listConnections ($inputsCurve[0]+".input")`;
          $ex=`objExists $conA[0]`;
          if($ex==0)continue;
          string $conB[]=`listConnections -s 1 -d 1 ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
          string $conAttr[]=`listConnections -s 1 -d 0 -p 1 ($inputsCurve[0]+".input")`;
          string $driveAttr=`substitute $conA[0] $conAttr[0]  ""`;
          string $conBB=($conB[0]+$driveAttr);
        connectAttr -force $conBB ($inputsTemp[0]+".input");
          }//判断
       }//否则
    }
}

 if($scl==1){
   string $attr[]={".sx",".sy",".sz"};
       for($j=0;$j<3;$j++){
        int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
           
        string $inputsCurve[]=`listConnections ($currentObj+$attr[$j])`;
        int $ex=`objExists $inputsCurve[0]`;
        
        if($ex==0)continue;
        string $type=`nodeType $inputsCurve[0]`;
        if($type=="blendWeighted"){
            select -r $inputsCurve[0];
            duplicate -rr -un;
            
            string $dupInputs[]=`ls -sl`;
            select -r $dupInputs[0];
            
            string $tempInputs[]=`listConnections ($dupInputs[0]+".input")`;
            string $tempN[];
            clear $tempN;
            for($jj=0;$jj<size($tempInputs);$jj++){
            string $tempInA[]=`listConnections -s 1 -d 0 -p 1 ($tempInputs[$jj]+".input")`;
            string $tempIn[]=`listConnections ($tempInputs[$jj]+".input")`;

            int $ex=`objExists $tempIn[0]`;
                if($ex==1){
                  disconnectAttr ($tempInA[0]) ($tempInputs[$jj]+".input");
  
                    int $sizeTemp=size($tempN);
                     $tempN[$sizeTemp]=$tempIn[0];
                }
            }
            
              select -r $tempN;
            for($aa=0;$aa<size($tempN);$aa++){
                int $ex=`objExists ($tempN[$aa]+".gtAnimCuvreMirrorConnetAttr")`;
                if($ex==1){
                string $tempA[]=`listConnections -s 1 -d 1 ($tempN[$aa]+".gtAnimCuvreMirrorConnetAttr")`;
                int $eex=`objExists $tempA[0]`;
                if($eex==1)delete $tempA[0];
                }
            }
            delete;
            
             string $inputsTemp[]=`listConnections ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        if($ex==1)delete $inputsTemp[0]; 
          
        connectAttr -f ($dupInputs[0]+".output") ($otherSideObj+$attr[$j]);

            string $blwInputs[]=`listConnections ($dupInputs[0]+".input")`;
            string $oldInputs[]=`listConnections ($inputsCurve[0]+".input")`;
            
            for($jj=0;$jj<size($blwInputs);$jj++){
                
                string $animCurveOld=$oldInputs[$jj];
                string $conA[]=`listConnections -s 1 -d 0 ($animCurveOld+".input")`;
                int $ex=`objExists ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
                if($ex==0)continue;
                
                string $conB[]=`listConnections -s 1 -d 1 ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
                string $conAttr[]=`listConnections -s 1 -d 0 -p 1 ($animCurveOld+".input")`;
                string $driveAttr=`substitute $conA[0] $conAttr[0]  ""`;
                connectAttr -f  ($conB[0]+$driveAttr) ($blwInputs[$jj]+".input");
            }
            
        }else{
     
        select -r $inputsCurve[0];
        int $state=`copyKey` ;
        
        if($state==1){
        string $inputsTemp[]=`listConnections ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        string $inputCon[];
        if($ex==1){
        $inputCon=`listConnections -s 1 -d 1 -p 1 ($inputsTemp[0]+".input")`;

         delete $inputsTemp[0];   
        }
        
        select -r $otherSideObj;
        pasteKey;
          $inputsTemp=`listConnections ($otherSideObj+$attr[$j])`;
          string $conA[]=`listConnections ($inputsCurve[0]+".input")`;
          $ex=`objExists $conA[0]`;
          if($ex==0)continue;
          string $conB[]=`listConnections -s 1 -d 1 ($conA[0]+".gtAnimCuvreMirrorConnetAttr")`;
          string $conAttr[]=`listConnections -s 1 -d 0 -p 1 ($inputsCurve[0]+".input")`;
          string $driveAttr=`substitute $conA[0] $conAttr[0]  ""`;
          string $conBB=($conB[0]+$driveAttr);
        connectAttr -force $conBB ($inputsTemp[0]+".input");
            }
        } 
        }
    }    
  
  if($trs==1){      
   if($TpyeTrsX==2){    
        string $att=".tx";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
        string $inputsCurve[]=`listConnections ($otherSideObj+$att)`;
        int $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
        
         string $type=`nodeType $inputsCurve[0]`;
        if($type=="blendWeighted"){
            string $blwInputs[]=`listConnections ($inputsCurve[0]+".input")`;
            
            for($jj=0;$jj<size($blwInputs);$jj++){
            select -r $blwInputs[$jj];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;

                }
            }else{
        
        select -r $inputsCurve[0];
    
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                  }
               }
            }
        }
  if($TpyeTrsY==2){    
        string $att=".ty";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           string $inputsCurve[]=`listConnections ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
                         
         string $type=`nodeType $inputsCurve[0]`;
        if($type=="blendWeighted"){
            string $blwInputs[]=`listConnections ($inputsCurve[0]+".input")`;
            
            for($jj=0;$jj<size($blwInputs);$jj++){
            select -r $blwInputs[$jj];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                }
            }else{
        
        select -r $inputsCurve[0];
    
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                  }
            }  
         }    
      }
  if($TpyeTrsZ==2){    
        string $att=".tz";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           string $inputsCurve[]=`listConnections ($otherSideObj+$att)`;
            int $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
                   
         string $type=`nodeType $inputsCurve[0]`;
        if($type=="blendWeighted"){
            string $blwInputs[]=`listConnections ($inputsCurve[0]+".input")`;
            
            for($jj=0;$jj<size($blwInputs);$jj++){
            select -r $blwInputs[$jj];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
       
                }
            }else{
        select -r $inputsCurve[0];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                   }
               }
            }   
        } 
    }
    
  if($rot==1){      
  if($TpyeRotX==2){    
        string $att=".rx";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
          string $inputsCurve[]=`listConnections ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
                   
           string $type=`nodeType $inputsCurve[0]`;
        if($type=="unitConversion"){
            string $blwInputsT[]=`listConnections ($inputsCurve[0]+".input")`;
           string $type=`nodeType $blwInputsT[0]`;
        if($type=="blendWeighted"){  
           string $blwInputs[]=`listConnections ($blwInputsT[0]+".input")`;

            for($jj=0;$jj<size($blwInputs);$jj++){
            string $curve[]=`listConnections -s 1 -d 0 ($blwInputs[$jj]+".input")`;
            select -r $curve[0];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                        }
                    }
            }else{   
            }
        select -r $inputsCurve[0];
        
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;   
               }
        }  
    }    
  if($TpyeRotY==2){    
        string $att=".ry";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           string $inputsCurve[]=`listConnections ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
                   
           string $type=`nodeType $inputsCurve[0]`;
        if($type=="unitConversion"){
            string $blwInputsT[]=`listConnections ($inputsCurve[0]+".input")`;
           string $type=`nodeType $blwInputsT[0]`;
        if($type=="blendWeighted"){  
           string $blwInputs[]=`listConnections ($blwInputsT[0]+".input")`;

            for($jj=0;$jj<size($blwInputs);$jj++){
            string $curve[]=`listConnections -s 1 -d 0 ($blwInputs[$jj]+".input")`;
            select -r $curve[0];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                        }
                    }
            }else{  
            }
        select -r $inputsCurve[0];
        
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
              }
        } 
     }    
  if($TpyeRotZ==2){    
        string $att=".rz";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
            string $inputsCurve[]=`listConnections ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
        if($ex==1){
                   
           string $type=`nodeType $inputsCurve[0]`;
        if($type=="unitConversion"){
            string $blwInputsT[]=`listConnections  -s 1 -d 0 ($inputsCurve[0]+".input")`;
           string $type=`nodeType $blwInputsT[0]`;
        if($type=="blendWeighted"){  
           string $blwInputs[]=`listConnections  -s 1 -d 0 ($blwInputsT[0]+".input")`;

            for($jj=0;$jj<size($blwInputs);$jj++){
            string $curve[]=`listConnections -s 1 -d 0 ($blwInputs[$jj]+".input")`;
            select -r $curve[0];
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                        }
                    }
            }else{   
        }
        select -r $inputsCurve[0];
        
       scaleKey -scaleSpecifiedKeys 1 -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 ;
                }
            }
         }   
     }   
  }
} 
  
if($TpyeRange==2){
    for($i=0;$i<size($sel);$i++){
        string $currentObj=$sel[$i];
        int $ex=`objExists ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0)continue;        
        string $tempS[]=`listConnections -s 1 -d 1 ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        string $otherSideObj=$tempS[0];
     
   if($trs==1){   
        string $attr[]={".tx",".ty",".tz"};
      for($j=0;$j<3;$j++){
          int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
           
        string $inputsCurve[]=`listConnections  -s 1 -d 0 ($currentObj+$attr[$j])`;
       
        int $ex=`objExists $inputsCurve[0]`;
        if($ex==0)continue;
        select -r $inputsCurve[0];
        int $state=`copyKey` ;
        if($state==1){
        string $inputsTemp[]=`listConnections -s 1 -d 0 ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        if($ex==1)delete $inputsTemp[0];
        select -r $otherSideObj;
        pasteKey;
            }
        }
    }  
    
    if($rot==1){
        string $attr[]={".rx",".ry",".rz"};
      for($j=0;$j<3;$j++){
          int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;          
        string $inputsCurve[]=`listConnections -s 1 -d 0 ($currentObj+$attr[$j])`;
        int $ex=`objExists $inputsCurve[0]`;
        if($ex==0)continue;
        select -r $inputsCurve[0];
        int $state=`copyKey` ;
        if($state==1){
        string $inputsTemp[]=`listConnections -s 1 -d 0 ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        if($ex==1)delete $inputsTemp[0];
        select -r $otherSideObj;
        pasteKey;
            }
        }
    }
                
        if($scl==1){
          string $attr[]={".sx",".sy",".sz"};
      for($j=0;$j<3;$j++){
          int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
           
        string $inputsCurve[]=`listConnections -s 1 -d 0 ($currentObj+$attr[$j])`;
        int $ex=`objExists $inputsCurve[0]`;
        if($ex==0)continue;
        select -r $inputsCurve[0];
        int $state=`copyKey` ;
        if($state==1){
        string $inputsTemp[]=`listConnections -s 1 -d 0 ($otherSideObj+$attr[$j])`;
        int $ex=`objExists $inputsTemp[0]`;
        if($ex==1)delete $inputsTemp[0];
        select -r $otherSideObj;
        pasteKey;
                }
            }     
        }
    if($trs==1){    
    if($TpyeTrsX==2){    
        string $att=".tx";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           
        string $inputsCurve[]=`listConnections -s 1 -d 0 ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
           if($ex==1){

        select -r $inputsCurve[0];
        scaleKey -scaleSpecifiedKeys 1 -time ":" -float ":" -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 -hierarchy none -controlPoints 0 -shape 1 ($inputsCurve[0]);
                }
            }
        }
  if($TpyeTrsY==2){    
        string $att=".ty";
            int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           string $inputsCurve[]=`listConnections -s 1 -d 0 ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
           if($ex==1){
        select -r $inputsCurve[0];
        scaleKey -scaleSpecifiedKeys 1 -time ":" -float ":" -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 -hierarchy none -controlPoints 0 -shape 1 ($inputsCurve[0]);
                     }
              }
        }        
  if($TpyeTrsZ==2){    
        string $att=".tz";
            int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           string $inputsCurve[]=`listConnections -s 1 -d 0 ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
           if($ex==1){
        select -r $inputsCurve[0];
        scaleKey -scaleSpecifiedKeys 1 -time ":" -float ":" -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 -hierarchy none -controlPoints 0 -shape 1 ($inputsCurve[0]);
                       }
                }
            } 
        }
        
  if($rot==1){      
  if($TpyeRotX==2){    
        string $att=".rx";
            int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
          string $inputsCurve[]=`listConnections -s 1 -d 0 ($otherSideObj+$att)`;
          int $ex=`objExists $inputsCurve[0]`;
           if($ex==1){
        select -r $inputsCurve[0];
        scaleKey -scaleSpecifiedKeys 1 -time ":" -float ":" -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 -hierarchy none -controlPoints 0 -shape 1 ($inputsCurve[0]);
                      }
               }
        }  
  if($TpyeRotY==2){    
        string $att=".ry";
            int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
           string $inputsCurve[]=`listConnections -s 1 -d 0 ($otherSideObj+$att)`;
           int $ex=`objExists $inputsCurve[0]`;
           if($ex==1){
        select -r $inputsCurve[0];
        scaleKey -scaleSpecifiedKeys 1 -time ":" -float ":" -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 -hierarchy none -controlPoints 0 -shape 1 ($inputsCurve[0]);
                     }
               }
        }  
  if($TpyeRotZ==2){    
        string $att=".rz";
            int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
            string $inputsCurve[]=`listConnections -s 1 -d 0 ($otherSideObj+$att)`;
            int $ex=`objExists $inputsCurve[0]`;
           if($ex==1){
        select -r $inputsCurve[0];
        scaleKey -scaleSpecifiedKeys 1 -time ":" -float ":" -timeScale 1 -timePivot 0 -floatScale 1 -floatPivot 0 -valueScale -1 -valuePivot 0 -hierarchy none -controlPoints 0 -shape 1 ($inputsCurve[0]);       
                         }
                    }
                }  
            }        
        } 
    }
    
    if($TpyeRange==1){
        for($i=0;$i<size($sel);$i++){
        string $currentObj=$sel[$i];
        int $ex=`objExists ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0)continue;
        
        string $tempS[]=`listConnections -s 1 -d 1 ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        string $otherSideObj=$tempS[0];
        if($trs==1){
         string $attr[]={".tx",".ty",".tz"};
      for($j=0;$j<3;$j++){
          int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
        float $attrValue=`getAttr ($currentObj+$attr[$j])`;
        setAttr ($otherSideObj+$attr[$j]) $attrValue;
            }
         }
         
         if($rot==1){   
         string $attr[]={".rx",".ry",".rz"};
      for($j=0;$j<3;$j++){
          int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
        float $attrValue=`getAttr ($currentObj+$attr[$j])`;
        setAttr ($otherSideObj+$attr[$j]) $attrValue;
            }
         }   
         if($scl==1){
          string $attr[]={".sx",".sy",".sz"};
      for($j=0;$j<3;$j++){
          int $lock=`getAttr -l ($currentObj+$attr[$j])`;
        if($lock==1)continue;
        float $attrValue=`getAttr ($currentObj+$attr[$j])`;
        setAttr ($otherSideObj+$attr[$j]) $attrValue;
            }
        }   
        if($trs==1){ 
          if($TpyeTrsX==2){    
        string $att=".tx";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
        float $attrValue=`getAttr ($otherSideObj+$att)`;
        setAttr ($otherSideObj+$att) ($attrValue*-1);
              }
        }
  if($TpyeTrsY==2){    
        string $att=".ty";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
        float $attrValue=`getAttr ($otherSideObj+$att)`;
        setAttr ($otherSideObj+$att) ($attrValue*-1);
            }
        }        
  if($TpyeTrsZ==2){    
        string $att=".tz";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
                 float $attrValue=`getAttr ($otherSideObj+$att)`;
        setAttr ($otherSideObj+$att) ($attrValue*-1);
                }
            } 
        }
      if($rot==1){  
  if($TpyeRotX==2){    
        string $att=".rx";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
                 float $attrValue=`getAttr ($otherSideObj+$att)`;
        setAttr ($otherSideObj+$att) ($attrValue*-1);
            }
        }  
  if($TpyeRotY==2){    
        string $att=".ry";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
                 float $attrValue=`getAttr ($otherSideObj+$att)`;
        setAttr ($otherSideObj+$att) ($attrValue*-1);
            }
        }  
  if($TpyeRotZ==2){    
        string $att=".rz";
        int $lock=`getAttr -l ($otherSideObj+$att)`;
        if($lock==0){
                float $attrValue=`getAttr ($otherSideObj+$att)`;
        setAttr ($otherSideObj+$att) ($attrValue*-1); 
                    }  
                } 
            }          
        }  
    }
    select -r $sel;
}
/////////////////////
global proc gtCurveConMirrorShapeA(){
string $sel[]=`ls -sl`;
string $shape[];
string $oldshape[];
int $match;
for($i=0;$i<size($sel);$i++){    
     string $currentObj=$sel[$i];
        int $ex=`objExists ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        if($ex==0)continue;
        
        string $tempS[]=`listConnections -s 1 -d 1 ($currentObj+".gtAnimCuvreMirrorConnetAttr")`;
        string $aimobj=$tempS[0];
string $ttm="";
$match=`gmatch $currentObj "*_l*"`;
if($match==1)$ttm="l";
$match=`gmatch $currentObj "*_r*"`;
if($match==1)$ttm="r";

    select -r ($aimobj);
      duplicate -rr;
      rename ($sel[$i]+"temp");
     for($ii=0;$ii<12;$ii++){
   string $childs[]=`listRelatives -c -fullPath ($sel[$i]+"temp")`; 
   int $size=size($childs);
   if($size>1){
       select -r ($sel[$i]+"temp");
       pickWalk -d down;
       pickWalk -d left;
       string $s[]=`ls -sl`;
       string $transform=`objectType ($s[0])`;
       if($transform!="nurbsCurve"){ delete ;}
       }         
 }
     for($ii=0;$ii<12;$ii++){
   string $childs[]=`listRelatives -c ($sel[$i]+"temp")`; 
   int $size=size($childs);
   if($size>1){
       select -r ($sel[$i]+"temp");
       pickWalk -d down;
       string $s[]=`ls -sl`;
       string $transform=`objectType ($s[0])`;
       if($transform!="nurbsCurve"){ delete ;}
       } 
 }
    string $childs[]=`listRelatives -c -fullPath ($sel[$i]+"temp")`; 
    select -r ($childs[0]);
    rename ($sel[$i]+"tempShape");
    
setAttr -lock 0 ($sel[$i]+"temp.tx");
setAttr -lock 0 ($sel[$i]+"temp.ty");
setAttr -lock 0 ($sel[$i]+"temp.tz");
setAttr -lock 0 ($sel[$i]+"temp.rx");
setAttr -lock 0 ($sel[$i]+"temp.ry");
setAttr -lock 0 ($sel[$i]+"temp.rz");  
setAttr -lock 0 ($sel[$i]+"temp.sx");
setAttr -lock 0 ($sel[$i]+"temp.sy");
setAttr -lock 0 ($sel[$i]+"temp.sz");     
 select -r     ($sel[$i]+"temp");
 string $tempshap[]=`listRelatives -s ($sel[$i]+"temp")`;
for($ii=0;$ii<size($tempshap);$ii++){
select -r ($tempshap[$ii]);
 rename ($sel[$i]+"tempShape"+$ii);
 }
  select -r     ($sel[$i]+"temp");
      parent -world;
      select -cl;
      group -empty -n ($sel[$i]+"tempGrp");
      xform -os -piv 0 0 0;
      select -r ($sel[$i]+"tempGrp");
      select -add ($sel[$i]+"temp");
      delete`pointConstraint`;
         
      select -r ($sel[$i]+"temp");
        setAttr ($sel[$i]+"temp.scaleX") -1;
         setAttr ($sel[$i]+"temp.scaleY") -1;
        setAttr ($sel[$i]+"temp.scaleZ") -1;
       select -r ($sel[$i]);
      select -add ($sel[$i]+"temp");
      delete `parentConstraint`;
        select -r ($sel[$i]+"temp");
      makeIdentity -apply true -t 0 -r 0 -s 1 -n 0;
      
         string $shape[]=`listRelatives -s ($sel[$i]+"temp")`;
         string $oldshape[]=`listRelatives -s ($sel[$i])`;
for($ii=0;$ii<size($shape);$ii++){
string $inputv[]=`listConnections -s 1 -d 0 -p 1  -scn 1 ($oldshape[$ii]+".v")`;
string $inputlodv[]=`listConnections -s 1 -d 0 -p 1  -scn 1 ($oldshape[$ii]+".lodVisibility")`;
    if(size($inputv)>0){
     connectAttr -f ($inputv[0])  ($shape[$ii]+".v");
 }
  if(size($inputlodv)>0){
     connectAttr -f ($inputlodv[0])  ($shape[$ii]+".lodVisibility");
   }
}   
$oldshape=`listRelatives -s ($sel[$i])`;
select -r ($oldshape);
string $shapename[]=`ls -sl`;
delete;  

for($ii=0;$ii<size($shape);$ii++){
      select -r ($shape[$ii]);
      select -add ($sel[$i]);
      parent -r -s;
  }    
     select -r ($sel[$i]+"tempGrp");
     select -add ($sel[$i]+"temp");
     delete;
     
$shape=`listRelatives -s ($sel[$i])`;
for($ii=0;$ii<size($shape);$ii++){
select -r $shape[$ii];
rename ($shapename[$ii]);
 setAttr ($shapename[$ii]+".overrideEnabled") 1;
 if($ttm=="l"){
setAttr ($shapename[$ii]+".overrideColor") 22;
}else if($ttm=="r"){
setAttr ($shapename[$ii]+".overrideColor") 13;
             }
         }
    }
}
/////////////////////
//选择蒙皮关节绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSelectSkinJointWin(){
   if(`window -ex gtSelectSkinJointWin`) deleteUI -window gtSelectSkinJointWin;
    window -wh 300 200 -t "老船角色绑定-☆-批量隐藏/显示物体绑定工具!" gtSelectSkinJointWin;
    columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓" -h 30;
    button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1322\"";
        separator gtsep1;
      text -l  "选择一个绑定模型，点击工具按钮\n程序会自动查找该模型的蒙皮关节\n并选择蒙皮关节" -h 50;

    button -l "根据选择的物体选择绑定关节"   -c "gtSelectBindBnProc;" but7;
        separator gtsep2;  
    showWindow gtSelectSkinJointWin;   
}
///////////////////////////
global proc gtSelectBindBnProc(){
string $sel[]=`ls -sl`;
select -cl;
for($i=0;$i<size($sel);$i++){
string $skinClus[]=`listHistory $sel[$i]`;
string $skinCluster="";
	for ($y=0;$y<size($skinClus);$y++)
		if (`objectType $skinClus[$y]`=="skinCluster")
			{
			$skinCluster=$skinClus[$y];
			}	
int $ex=`objExists ($skinCluster+".matrix")`;
if($ex==1){
string $bn[]=`listConnections -s 1 -d 0 ($skinCluster+".matrix")`;
select -add ($bn);
    print "已经成功选择选择物体的蒙皮关节";
    }else{
    print "当前选择的物体没有骨骼蒙皮变形历史，请确认选择正确的物体";
        }
    }
}
/////////////////////////
//曲线骨骼绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
//////////////////////////////////////////////////////
global proc gtcurveBone(){
    
string $sel[]=`ls -sl`;
float $perlen=`floatSliderGrp -q -v gtfloatFcurve`;

for($k=0;$k<size($sel);$k++){
    float $len=`arclen ($sel[$k])`;
    int $pointnum=floor($len/$perlen);
    rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($pointnum) -d 3 -tol 0.01 ($sel[$k]);
    
select -r ($sel[$k]+".cv[0:1000]");
string $points[]=`ls -sl`;
string $tm[];
int $t=`tokenize ($points[0]) ":" $tm`;
string $tmm=$tm[1];
string $ttm[];
int $t=`tokenize ($tmm) "]" $ttm`;
int $pointnum=$ttm[0];

int $num=$pointnum-1;
    select -r ($sel[$k]+".cv[1]");
    select -add ($sel[$k]+".cv["+($num)+"]");
delete;

select -r ($sel[$k]+".cv[0]");
newCluster " -envelope 1";
rename ($sel[$k]+"cluster0");
spaceLocator -p 0 0 0;
rename ($sel[$k]+"loc0");
select -r ($sel[$k]+"cluster0");
select -add ($sel[$k]+"loc0");
parentConstraint;
float $p[]=`getAttr  ($sel[$k]+"loc0.translate")`;

select -cl;
joint -p ($p[0]) ($p[1]) ($p[2]) -n ($sel[$k]+"joint0");

select -r ($sel[$k]+"cluster0");
select -add ($sel[$k]+"loc0");
delete;

for($i=0;$i<($pointnum-2);$i++){
    $j=$i+1;
    select -r ($sel[$k]+".cv["+$j+"]");
newCluster " -envelope 1";
rename ($sel[$k]+"cluster"+$j);
spaceLocator -p 0 0 0;
rename ($sel[$k]+"loc"+$j);
select -r ($sel[$k]+"cluster"+$j);
select -add ($sel[$k]+"loc"+$j);
parentConstraint;
float $p[]=`getAttr  ($sel[$k]+"loc"+$j+".translate")`;
    
    
    select -r ($sel[$k]+"joint"+$i);
    joint -p ($p[0]) ($p[1]) ($p[2]) -n ($sel[$k]+"joint"+$j);
    select -r ($sel[$k]+"cluster"+$j);
    select -add ($sel[$k]+"loc"+$j);
    delete;
    select -cl;
       
    }
    
     select -r ($sel[$k]+"joint0");
    joint -e  -oj xyz -secondaryAxisOrient ydown -ch -zso;
    }
}
///////////////////////////////////////////

global proc gtcurveBrebulid(){

string $sel[]=`ls -sl`;
float $perlen=`floatSliderGrp -q -v gtfloatFcurve`;

for($k=0;$k<size($sel);$k++){
    float $len=`arclen ($sel[$k])`;
    int $pointnum=floor($len/$perlen);
    rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($pointnum) -d 3 -tol 0.01 ($sel[$k]);
    select -r ($sel[$k]+".cv[0:1000]");
string $points[]=`ls -sl`;
string $tm[];
int $t=`tokenize ($points[0]) ":" $tm`;
string $tmm=$tm[1];
string $ttm[];
int $t=`tokenize ($tmm) "]" $ttm`;
int $pointnum=$ttm[0];
int $num=$pointnum-1;
    select -r ($sel[$k]+".cv[1]");
    select -add ($sel[$k]+".cv["+($num)+"]");
delete;
    }    
}

///////////////////////////////////////////////////////////
global proc gtcurveBoneProc(){
string $sel[]=`ls -sl`;
for($k=0;$k<size($sel);$k++){
   
select -r ($sel[$k]+".cv[0:1000]");
string $points[]=`ls -sl`;
string $tm[];
int $t=`tokenize ($points[0]) ":" $tm`;
string $tmm=$tm[1];
string $ttm[];
int $t=`tokenize ($tmm) "]" $ttm`;
int $pointnum=$ttm[0];

select -r ($sel[$k]+".cv[0]");
newCluster " -envelope 1";
rename ($sel[$k]+"cluster0");
spaceLocator -p 0 0 0;
rename ($sel[$k]+"loc0");
select -r ($sel[$k]+"cluster0");
select -add ($sel[$k]+"loc0");
parentConstraint;
float $p[]=`getAttr  ($sel[$k]+"loc0.translate")`;

select -cl;
joint -p ($p[0]) ($p[1]) ($p[2]) -n ($sel[$k]+"joint0");

select -r ($sel[$k]+"cluster0");
select -add ($sel[$k]+"loc0");
delete;

for($i=0;$i<$pointnum;$i++){
    $j=$i+1;
    select -r ($sel[$k]+".cv["+$j+"]");
newCluster " -envelope 1";
rename ($sel[$k]+"cluster"+$j);
spaceLocator -p 0 0 0;
rename ($sel[$k]+"loc"+$j);
select -r ($sel[$k]+"cluster"+$j);
select -add ($sel[$k]+"loc"+$j);
parentConstraint;
float $p[]=`getAttr  ($sel[$k]+"loc"+$j+".translate")`;
    
    
    select -r ($sel[$k]+"joint"+$i);
    joint -p ($p[0]) ($p[1]) ($p[2]) -n ($sel[$k]+"joint"+$j);
    select -r ($sel[$k]+"cluster"+$j);
    select -add ($sel[$k]+"loc"+$j);
    delete;
    select -cl;
       
    }
    
    select -r ($sel[$k]+"joint0");
    joint -e  -oj xyz -secondaryAxisOrient ydown -ch -zso;
    }
}
//////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
global proc gtcurveBoneProcA(){
int $numJ=`intFieldGrp -q -v1 gtJiontNum`;
string $sel[]=`ls -sl`;

for($k=0;$k<size($sel);$k++){
string $path=$sel[$k];

for($i=0;$i<$numJ+1;$i++){
    float $perP=1.0/$numJ;
    select -cl;
    joint -p 0 0 0 -n ($path+"Joint"+$i) ;
    select -r ($path+"Joint"+$i) ;
    select -add $path;
   string $Path =`pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false `;
    	
    	string $input[]=`listConnections -s 1 -d 0 ($Path+".uValue")`;
		select -r $input[0];
		delete; 
   		float $offSet = ($i+0.000) / $numJ;
       setAttr ($Path+".uValue") $offSet;
    }
    select -r  ($path+"Joint0") ;
    DeleteMotionPaths;
    makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;

  for($i=1;$i<$numJ+1;$i++){
    int $j=$i-1;
    select -r  ($path+"Joint"+$i) ;
    DeleteMotionPaths;
    makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;

    select -add ($path+"Joint"+$j) ;
    parent;
    }  
    
    select -r  ($path+"Joint0") ;
    joint -e  -oj xyz -secondaryAxisOrient ydown -ch -zso;
    
    select -r ($path+"Joint"+($numJ-1)) ;
    select -add ($path+"Joint"+$numJ) ;
    delete`orientConstraint -offset 0 0 0 -weight 1`;
    select -r ($path+"Joint"+$numJ) ;  
    makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;
      
    }
}
/////////////////////////////////////////////////////////////////////////////////////////
global proc gtcurveBoneWin (){
	
	if (`window -q -ex gtcurveBoneWin`) deleteUI gtcurveBoneWin;
	
	window -title "老船角色绑定-☆-曲线关节绑定工具！" -w 400 -h 260 gtcurveBoneWin;	
	
    columnLayout -adj 1 dynChainColumn;
text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1332\"";
	floatSliderGrp -l "曲线点的间距："  -f 1 -v 1 -min 0.01 -max 50  gtfloatFcurve;
    setParent..;
	rowColumnLayout -nc 2 -cw 1 240 -cw 2 150;
	text "选择曲线，根据曲线点间距的数值，重建曲线";
	button -l "重建曲线" -c "gtcurveBrebulid;";
	separator -w 400;
    separator -w 400;
	text "选择曲线，程序会自动重建曲线，之后创建关节";
	button -l "重建曲线并创建关节" -c "gtcurveBone";
	separator -w 400;
    separator -w 400;
	text "选择曲线，不重建曲线，直接创建关节";
	button -l "根据选择的曲线创建关节" -c "gtcurveBoneProc;";
	separator -w 400;
    separator -w 400;

	intFieldGrp -l "关节数量" -v1 10 gtJiontNum;
	button -l "创建指定数量的关节" -c "gtcurveBoneProcA;";
	separator -w 400;
	separator -w 400;		
	showWindow gtcurveBoneWin;
}
////////////////////////////////////
//MAYA前台渲染动画工具
//该工具原始代码，来源与外国网站，老船工作室对其进行修改、汉化，方便使用
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////

global string $fr_window = "FrontBatchRender";
global string $fr_licensed = " V3.5";
global proc xl_BrowseCmd (string $xl_FileOrPath, string $xl_TextField, string $xl_WhichButton, int $xl_BrowseType)
{
	string $xl_CurrentProject = `workspace -q -rd`;
	workspace -dir $xl_CurrentProject;
	string $xl_Temp = "c:";
	fileBrowser $xl_Temp lx_P "" 0;
}

///////////////////////////////////////////////////////////////
proc string fr_Padding (float $n,int $i){
	string $strn = abs($n);
	string $buffer[];
	$numTokens = `tokenize $strn "." $buffer`;
	if ($n >= 0){
		while (size($buffer[0]) < $i)
			$buffer[0] = "0" + $buffer[0];	
	}
	else {
		while (size($buffer[0]) < $i - 1)
			$buffer[0] = "0" + $buffer[0];	
		$buffer[0] = "-" + $buffer[0];		
	}
	float $isf = `floatField -q -value fr_StartFrame`;
	float $ief = `floatField -q -value fr_EndFrame`;
	float $ibf = `floatField -q -value fr_ByFrame`;
	float $sf = abs($isf);
	float $ef = abs($ief);
	float $bf = abs($ibf);
	int $intn = $sf;
	$sf = $sf - $intn;	
	string $ssf = $sf;
	$sf = size($ssf);	

	int $intn = $ef;
	$ef = $ef - $intn;	
	string $sef = $ef;
	$ef = size($sef);	

	int $intn = $bf;
	$bf = $bf - $intn;	
	string $sbf = $bf;
	$bf = size($sbf);	

	$unit = max($sf,$ef);
	$unit = max($unit,$bf);
	$unit -= 2;
	if ($unit > 0){
		while(size($buffer[1]) < $unit)
			$buffer[1] = $buffer[1] + "0";
		$buffer[0] = $buffer[0] + "." + $buffer[1];
	}
	$fr_outPadding = $buffer[0];
	return  $fr_outPadding;
}

///////////////////////////////////////////////
global proc lxDoRender()
{
 float $if=`floatField -q -value fr_StartFrame`;
 float $e = `floatField -q -value fr_EndFrame`;
 float $s=  `floatField -q -value fr_ByFrame`;
    int $fp=`intField -q -value  fr_FramePadding`;
     string $ip=`textFieldButtonGrp -q -text fr_Path`;
      string $n=`textFieldGrp -q -tx fr_FileName`;
       int $t= `optionMenu -q -select fr_ImageFormatMode`;
        string $c= `text -q -l tRC`;
          int $reso= `radioButtonGrp -q -select fr_SR`;
           int $dy=`checkBox -q -v fr_Dynamics`;
            float $dsf=`floatField -q -v fr_DStartFrame`;

progressWindow
	-title "Ready to render..."
	-status "Ready to render..."
	-isInterruptable 1;

if ($dy == 1 && $dsf <= $if) $f = $dsf;
else $f = $if;
float $currentFtmp[];
float $currentF[];
float $doRender[];
int $renderKey[];
int $drn = 0;
int $cfn = 0;
for ($i = $if;$i <= $e;$i += $s) {
	$doRender[$drn] = $i;
	$drn++;
	}
$e = $doRender[size($doRender) - 1];
if ($dy == 1)
	for ($ci = $f;$ci <= $e;) {
		$currentFtmp[$cfn] = $ci;
		if ($s > 1) $ci += 1;
		else $ci += $s;
		$cfn++;
		}
else
	for ($ii = 0;$ii < size($doRender);$ii++)
		$currentFtmp[$ii] = $doRender[$ii];
if ($currentFtmp[size($currentFtmp) - 1] != $doRender[size($doRender) - 1]) $currentFtmp[size($currentFtmp)] = $doRender[size($doRender) - 1];


$cfn = 0;
$drn = 0;

for ($iii = 0;$iii < size($currentFtmp);){

float $a = $currentFtmp[$iii];
float $b = $doRender[$drn];
string $c;
if ($a < $b) $c = "1";
if ($a == $b) $c = "2";
if ($a > $b) $c = "3";

switch ($c){
	case "1":
		$currentF[$cfn] = $currentFtmp[$iii];
		$renderKey[$cfn] = 0;

		$iii++;
		$cfn++;
		break;
	case "2":
		$currentF[$cfn] = $currentFtmp[$iii];
		$renderKey[$cfn] = 1;

		$iii++;
		if ($drn != size($doRender) -1) $drn++;
		$cfn++;
		break;
	case "3":
		$currentF[$cfn] = $doRender[$drn];
		$renderKey[$cfn] = 1;

		if ($drn != size($doRender) -1) $drn++;
		$cfn++;
	}

}
print ("\n" + "List For Rendering" + "\n" + "---------------------------------------" + "\n");
for ($xxx = 0;$xxx < size($currentF);$xxx++) {
print (" RenderFrame " + $doRender[$xxx] + "\t\t");
print (" currentFrame " + $currentF[$xxx] + "\t\t");
print (" renderKey " + $renderKey[$xxx] + "\n");
}
print ("---------------------------------------" + "\n");

$cfn = 0;
$drn = 0;

if ($reso == 1) setTestResolutionVar(1);
if ($reso == 2) setTestResolutionVar(5);
if ($reso == 3) setTestResolutionVar(4);

string $allRLs[];
string $RLs[];
$allRLs = `ls -type renderLayer`;
int $RLsn = 0;
for ($allRL in $allRLs){
	if (`getAttr ($allRL + ".renderable")` == 1){
		$RLs[$RLsn] = $allRL;
		$RLsn++;
	}
}

int $proS = 0; 
int $proS1 = 0;

progressWindow -edit
	-maxValue `size($currentF)`
	-minValue 1
	-progress 1
	-title "Starting render..."
	-status "Starting render...";

///////////////////////////////////////////////
RenderViewWindow;
for ($i in $currentF)	
	{
	string $fi = fr_Padding ($i,$fp);

	$proS++;
       progressWindow -edit 
		-title "Current Frame..."
		-progress $proS
		-status ($fi + "   ( " + $proS1 + " / " + `size($doRender)` + " )");
	currentTime $i;
	if ($renderKey[$cfn] == 1)
		{
		$proS1++;
		for ($RL in $RLs)	
			{
			layerEditorLayerButtonSelect 0 $RL;	
			if ($RL == "defaultRenderLayer") $p = $ip;
			else $p = $ip + $RL + "\\";

           progressWindow -edit 
		 -title "Rendering..."
               -progress $proS
	      	-status ($fi + "   ( " + $proS1 + " / " + `size($doRender)` + " )   " + $RL);

			renderWindowRenderCamera render renderView $c;	

           if ( `progressWindow -query -isCancelled` ) break;
 

           progressWindow -edit 
			-title "Saveing..."
			-progress $proS
	      	-status ($fi + "   ( " + $proS1 + " / " + `size($doRender)` + " )   " + $RL);

			string $tmp = system("shell mkdir " + $p );
			switch ($t)
				{
				case 1:
					system ("del " + $p + $n + "." + $fi + ".iff");
					setAttr "defaultRenderGlobals.imageFormat" -lock 0 ;
					getAttr defaultRenderGlobals.imfkey;
					setAttr defaultRenderGlobals.outf 7;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					renderWindowSaveImageCallback "renderView" ($p + $n + "." + $fi + ".iff") "Maya IFF";
					print ("Frame saved: " + $p + $n + "." + $fi + ".iff" + "\n");
					break;
				case 2:
					setAttr "defaultRenderGlobals.imageFormat" -lock 0 ;
					getAttr defaultRenderGlobals.imfkey;
					setAttr defaultRenderGlobals.outf 7;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					setAttr defaultRenderGlobals.outf 3;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					setAttr defaultRenderGlobals.outf 3;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					renderWindowSaveImageCallback "renderView" ($p + $n + "." + $fi + ".tif") "Tiff";
					print ("Frame saved: " + $p + $n + "." + $fi + ".tif" + "\n");
					break;
				case 3:
					setAttr "defaultRenderGlobals.imageFormat" -lock 0 ;
					getAttr defaultRenderGlobals.imfkey;
					setAttr defaultRenderGlobals.outf 7;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					setAttr defaultRenderGlobals.outf 19;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					setAttr defaultRenderGlobals.outf 19;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					renderWindowSaveImageCallback "renderView" ($p + $n + "." + $fi + ".tga") "Targa";
					print ("Frame saved: " + $p + $n + "." + $fi + ".tga" + "\n");
					break;
				case 4:
					setAttr "defaultRenderGlobals.imageFormat" -lock 0 ;
					getAttr defaultRenderGlobals.imfkey;
					setAttr defaultRenderGlobals.outf 7;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					setAttr defaultRenderGlobals.outf 8;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					setAttr defaultRenderGlobals.outf 8;
					setAttr defaultRenderGlobals.imfkey -type "string" "";
					renderWindowSaveImageCallback "renderView" ($p + $n + "." + $fi + ".jpg") "JPEG";
					print ("Frame saved: " + $p + $n + "." + $fi + ".jpg" + "\n");
				case 5:
					setAttr "defaultRenderGlobals.imageFormat" -lock 0 ;
					getAttr defaultRenderGlobals.imfkey;
					setAttr defaultRenderGlobals.outf 7;
					setAttr defaultRenderGlobals.imfkey -type "string" "";

					renderWindowSaveImageCallback "renderView" ($p + $n + "." + $fi + ".png") "PNG";
					print ("Frame saved: " + $p + $n + "." + $fi + ".png" + "\n");
				}	
			}	
		}	
	$cfn++;
	if ( `progressWindow -query -isCancelled` ) {print("Rendering cancelled...\n"); break;}
	}	
progressWindow -edit
	-title "Rendering finish..." 
	-progress $proS
	-status ("Rendering finish: " + $proS1 + " / " + `size($doRender)`);
progressWindow -endProgress;
print("Rendering finish...\n");
clear $currentF;
clear $renderKey;
clear $RLs;
}

//////////////////////////////////////////////////////////
global proc fr_getPath ( string $path, string $mode )
{
	textFieldButtonGrp 	-e -text $path fr_Path;
	frInfo tPath;
}

//////////////////////////////////////////////////////
global proc frInfo (string $key)
{

	switch ($key)
	{
	case "tPath":
		string $tp = `textFieldButtonGrp -q -text fr_Path`;
		$tp = `strip $tp`;
		int $tpc = size($tp);
		string $tpe = `substring $tp $tpc $tpc`;
		if ($tpe != "\\" && $tpe != "/") $tp = $tp + "/";
		textFieldButtonGrp -edit -text $tp fr_Path;
		text -edit -l `textFieldButtonGrp -q -text fr_Path`  tPath;
		break;

	case "tFileName":
		if (`textFieldGrp -q -tx fr_FileName` == "")
		{
			string $b = `file -q -sn`;
			string $c = (`dirname $b` + "/");
			string $d = `substitute $c $b ""`;
			string $filename[] = stringToStringArray($d, ".");
			if($filename[0] == "") $filename[0] = "untitled";
			string $fn = $filename[0];
			textFieldGrp -edit -tx $fn fr_FileName;
		}
		textFieldGrp -e -tx (strip (`textFieldGrp -q -tx fr_FileName`)) fr_FileName;
		string $fn = `textFieldGrp -q -tx fr_FileName`;
		string $sf = fr_Padding (`floatField -q -value fr_StartFrame` ,`intField -q -value fr_FramePadding`);
		string $if = `optionMenu -q -select fr_ImageFormatMode`;
		switch ($if)
		{
		case "1":
			$if = "iff";
			break;
		case "2":
			$if = "tif";
			break;
		case "3":
			$if = "tga";
			break;
		case "4":
			$if = "jpg";
		case "5":
			$if = "png";
		}
		string $tfn = $fn + "." + $sf + "." + $if;
		text -edit -l $tfn tFileName;
		break;

	case "tTo":
		string $ef = fr_Padding (`floatField -q -value fr_EndFrame` ,`intField -q -value fr_FramePadding`);
		string $fn = `textFieldGrp -q -tx fr_FileName`;
		string $if = `optionMenu -q -select fr_ImageFormatMode`;
		switch ($if)
		{
		case "1":
			$if = "iff";
			break;
		case "2":
			$if = "tif";
			break;
		case "3":
			$if = "tga";
			break;
		case "4":
			$if = "jpg";
		case "5":
			$if = "png";	
		}
		string $tto = $fn + "." + $ef + "." + $if;
		text -edit -l $tto tTo;	
		break;

	case "tRC":

		string $frcams[] = `ls -type camera`;
		string $frcamnodes[] = `listRelatives -parent $frcams`;
		string $qtRC = `optionMenu -q -select fr_RC`;
		int $nqtRC = $qtRC;
		$nqtRC = $nqtRC - 1;
		text -edit -l $frcamnodes[$nqtRC] tRC;
		clear $frcams;
		break;

	case "tSize":
			int $sw = `text -q -l fr_SW`;
	int $sh = `text -q -l fr_SH`;
	
			int $r = `radioButtonGrp -q -select fr_SR`;
			float $d;
			if ($r == 1) $d = 1;		
			if ($r == 2) $d = 0.75;
			if ($r == 3) $d = 0.5;	
			int $w = $sw * $d;
			int $h = $sh * $d;
			text -edit -l ($w + " X " + $h) tSZ;
	}

}
/////////////////////////////////////////////////
proc fr_UI()
{
	global string $fr_window;
	global string $fr_licensed;

float $sf = `playbackOptions -q -min`;	

float $ef = `playbackOptions -q -max`;	

float $bf = 1.0;	

	int $isf = $sf;
	int $ief = $ef;
	string $ssf = $isf;
	string $sef = $ief;
	int $sfp1 = size($ssf);
	int $sfp2 = size($sef);
	int $sfp = max($sfp1,$sfp2);
float $fp = $sfp;	
if($fp < 3) $fp = 3;

	string $fr_CurrentProject = `workspace -q -rd`;		
	string $fr_CurrentImagesDir = $fr_CurrentProject + "images/";		
	string $fr_PutoutImages = $fr_CurrentImagesDir;		
	string $p = $fr_PutoutImages;	

	string $b = `file -q -sn`;
	string $c = (`dirname $b` + "/");
	string $d = `substitute $c $b ""`;
	string $filename[] = stringToStringArray($d, ".");
	if($filename[0] == "") $filename[0] = "untitled";
string $fn = $filename[0];	

	window
		-t "老船角色绑定-☆☆-MAYA前台渲染动画工具!" 
		-sizeable true
		-titleBar true
		-minimizeButton true
		-maximizeButton false
		-menuBarVisible false
		-widthHeight 450 500
		-tlc 240 60
		$fr_window;
	
 string $fr_form = `formLayout -numberOfDivisions 100`;

		columnLayout -adjustableColumn 1 Info;
		 text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1337\"";
			separator -h 10;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "路径:"
					-ann "Current path to save";
				text
					-l ""
					tPath;
				setParent ..;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "文件名称:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				text
					-l ""
					tFileName;
				setParent ..;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "输出到:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				text
					-l ""
					tTo;
				setParent ..;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "渲染相机:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				text
					-l ""
					tRC;
				setParent ..;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "分辨率:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				text
					-l ""
					tSZ;
				setParent ..;

			setParent ..;
	
	string $fr_scroll = `scrollLayout -hst 16 -vst 16 -childResizable true -minChildWidth 90`;

		columnLayout -adjustableColumn 1;
//////////////////////////////////
			rowLayout
				-numberOfColumns 1
				-cat 1 "left" 1
				-columnWidth 1 120;

				string $wsDir = dirname( `workspace -q -fn` );		
				if (`file -q -ex $wsDir`)
				{
					workspace -dir $wsDir;
				}
				
				string $pString = `workspace -q -rd`;
				string $bc = "fileBrowserDialog -m 4 -fc \"fr_getPath\" -ft \"directory\" -an \"(Current Project: " + $pString + ")\" -wt \"Set Path\"";
				textFieldButtonGrp 	-label "路径:" 
							-text $p
							-ed 1
							-buttonLabel "浏览..." 
							-adj 2 -cw 1 120 -cw 3 60 
							-cl3 right left center 
							-cc "frInfo tPath"
							-bc "gtRenderGetDir;"
							-ann "You are able to put the new folder here..."
							fr_Path;
				setParent ..;
			rowLayout
				-numberOfColumns 1
				-cat 1 "left" 1
				-columnWidth 1 120;
				textFieldGrp
					 -l "文件名称前缀:" 
					-tx $fn 
					-en 1 -cw2 120 240 
					-cl2 right left
					-cc "frInfo tFileName;frInfo tTo" 
					fr_FileName;
				setParent ..;
			rowLayout
				-numberOfColumns 3
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "图像格式:"
					-ann "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
				optionMenu
					-label ""
					-cc "frInfo tFileName;frInfo tTo"
					fr_ImageFormatMode;
					 	menuItem -label "Maya IFF (iff)";
						menuItem -label "Tiff (tif)";
					 	menuItem -label "Targa (tga)";
						menuItem -label "JPEG (jpg)";
						menuItem -label "PNG (png)";

				text
					-l "Only IFF support renderlayer..."
					-vis 0
					-ann "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
				setParent ..;
			separator -h 10;
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "开始帧:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				floatField
					-w 80
					-value $sf
					-precision 3
					-cc "frInfo tFileName;frInfo tTo"
					fr_StartFrame;
				setParent ..;
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "结束帧:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				floatField
					-w 80
					-value $ef
					-precision 3
					-cc "frInfo tFileName;frInfo tTo"
					fr_EndFrame;
				setParent ..;
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "间隔帧数:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				floatField
					-w 80
					-value $bf
					-minValue 0.001
					-precision 3
					-cc "frInfo tFileName;frInfo tTo"
					fr_ByFrame;
				setParent ..;
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "序号位数:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				intField
					-w 80
					-value $fp
					-maxValue 9
					-minValue 1
					-step 1
					-cc "frInfo tFileName;frInfo tTo"
					fr_FramePadding;
				setParent ..;
			separator -h 10;
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "渲染相机:"
					-ann "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
				optionMenu
					-label ""
					-cc "frInfo tRC"
					fr_RC;

			string $frcams[] = `ls -type camera`;
			string $frcamnodes[] = `listRelatives -parent $frcams`;
					for ($frcam in $frcamnodes)
					 	menuItem -label $frcam;
			clear $frcams;
				setParent ..;
			separator -h 10;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;

				text
					-l "宽度:"
					-ann "XXXXXXXXXXXXXXXXXXXX";

int $frWidth = `getAttr "defaultResolution.width"`;

				text
					-l $frWidth
					-ann "XXXXXXXXXXXXXXXXXXXX"
					fr_SW;
				setParent ..;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l "H高度:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
int $frHeight = `getAttr "defaultResolution.height"`;

				text
					-l $frHeight
					-ann "XXXXXXXXXXXXXXXXXXXX"
					fr_SH;

				setParent ..;
			rowLayout
					-numberOfColumns 2
					-cat 1 "right" 5
					-columnWidth 1 120
					-columnWidth 2 120;
					text
						-label "分辨率:";

					radioButtonGrp
						-numberOfRadioButtons 3
						-cw 1 100
						-cw 2 105
						-labelArray3 "100%" "75%" "50%"
						-select 1
						-cc "frInfo tSize"
						fr_SR;
					setParent ..;
			separator -h 10;
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
				text
					-l ""
					-ann "XXXXXXXXXXXXXXXXXXXX";

				checkBox -l "动力学" -v 0 fr_Dynamics;
				setParent ..;

			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;

				text
					-l "开始帧:"
					-ann "XXXXXXXXXXXXXXXXXXXX";
				floatField
					-w 80
					-value 1
					-cc ""
					fr_DStartFrame;
				setParent ..;

string $RLs[];
$RLs = `ls -type renderLayer`;
if (size($RLs) > 1)
		{
			separator -h 10;
		int $f = 1;
		for ($RL in $RLs)
			{
			rowLayout
				-numberOfColumns 2
				-cat 1 "right" 5
				-columnWidth 1 120;
			if ($f == 1) $tl = "Render Layers:";
				else $tl = "";
				text
					-l $tl
					-ann "XXXXXXXXXXXXXXXXXXXX";
		int $Rv = `getAttr ($RL + ".renderable")`;
		string $CBN = $RL;
		if ($RL == "defaultRenderLayer") $CBN = "masterLayer";
				checkBox -l $CBN -v $Rv -en 1 -ofc "" -onc "" $CBN;
			$ofc = "setAttr " + $RL + ".renderable " + 0;
			$onc = "setAttr " + $RL + ".renderable " + 1;
				checkBox -e -ofc $ofc -onc $onc $CBN;
				setParent ..;
			$f++;
			}
		}

			setParent ..;
		setParent ..;
			button
				-label "恢复默认"
				-ann "Refresh all setup"
				-command "lxFrontBatchRender"
				fr_b1;

			button
				-label "渲染"
				-ann "Start render"
				-command "lxDoRender"
				fr_b2;

			button
				-label "关闭"
				-ann "Close window"
				-command "deleteUI $fr_window"
				fr_b3;

	formLayout -edit

		-attachForm Info "top" 2
		-attachForm Info "left" 2
		-attachForm Info "right" 2

		-attachControl $fr_scroll "top" 2 Info
		-attachForm $fr_scroll "left" 2
		-attachControl $fr_scroll "bottom" 2 fr_b1
		-attachForm $fr_scroll "right" 2

		-attachNone fr_b1 "top"
		-attachPosition fr_b1 "left" 2 0
		-attachForm fr_b1 "bottom" 2
		-attachPosition fr_b1 "right" 2 30

		-attachNone fr_b2 "top"
		-attachPosition fr_b2 "left" 2 30
		-attachForm fr_b2 "bottom" 2
		-attachPosition fr_b2 "right" 2 70

		-attachNone fr_b3 "top"
		-attachPosition fr_b3 "left" 2 70
		-attachForm fr_b3 "bottom" 2
		-attachPosition fr_b3 "right" 2 100
		$fr_form;

		frInfo tPath;
		frInfo tFileName;
		frInfo tTo;
		frInfo tRC;
		frInfo tSize;
		
		showWindow $fr_window;
}
////////////////////////////////////
global proc gtRenderGetDirName(string $dir){
				textFieldButtonGrp -e -tx ($dir+"/") fr_Path;
				text -e -l  ($dir+"/")	tPath;
}
//////////////////////////

global proc gtRenderGetDir(){
string $filename[] = `fileDialog2 -fileMode 3 -caption "Image"`;
if (1 == `size($filename)`)
    {
   gtRenderGetDirName($filename[0]);
    }
}
///////////////////////////////////////
global proc gtlxFrontBatchRender()
{
global string $fr_window;
RenderViewWindow;
if (`window -exists $fr_window` == true)
	deleteUI $fr_window;
	fr_UI();
}
/////////////
//批量属性编辑工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtPLAttributeWin(){
if(`window -ex gtPLAttributeWin`==1) deleteUI -window gtPLAttributeWin;
window -title "老船角色绑定-☆-批量属性编辑工具!" -wh 400 360 gtPLAttributeWin;
scrollLayout mainFrameL;

formLayout gtMainformL;
columnLayout -adj 1 gtFrameL;
text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1340\"";
frameLayout -cl 0 -cll 1 -l "一元属性" gtSFrameL;
columnLayout -adj 1;

rowLayout -nc 4 ;
text -l "" -w 60;
text -l "属性名称:";
textField -text "" -w 180 gtSTextF;
button -l "载入属性" -c "gtLoadChannelAttrProcA" -w 120 butAct1;
setParent..;
rowLayout -nc 4;
text -l "" -w 60;
text -l "属性数值:";
floatSliderGrp -v 0 -w 240 -f 1 gtSfloatF;

setParent..;
rowLayout -nc 4 ;
text -l "" -w 60;
text -l "属性名称:";
textField -text "" -w 180 gtSTextF2;
button -l "载入属性" -c "gtLoadChannelAttrProcA2" -w 120 butAct2;
setParent..;
rowLayout -nc 4;
text -l "" -w 60;
text -l "属性数值:";
floatSliderGrp -v 0 -w 240 -f 1 gtSfloatF2;

setParent..;
rowLayout -nc 4 ;
text -l "" -w 60;
text -l "属性名称:";
textField -text "" -w 180 gtSTextF3;
button -l "载入属性" -c "gtLoadChannelAttrProcA3" -w 120 butAct3;
setParent..;
rowLayout -nc 4;
text -l "" -w 60;
text -l "属性数值:";
floatSliderGrp -v 0 -w 240 -f 1 gtSfloatF3;

setParent..;
rowLayout -nc 4 ;
text -l "" -w 60;
text -l "属性名称:";
textField -text "" -w 180 gtSTextF4;
button -l "载入属性" -c "gtLoadChannelAttrProcA4" -w 120 butAct4;
setParent..;
rowLayout -nc 4;
text -l "" -w 60;
text -l "属性数值:";
floatSliderGrp -v 0 -w 240 -f 1 gtSfloatF4;

setParent..;
rowLayout -nc 4 ;
text -l "" -w 60;
text -l "属性名称:";
textField -text "" -w 180 gtSTextF5;
button -l "载入属性" -c "gtLoadChannelAttrProcA5" -w 120 butAct5;
setParent..;
rowLayout -nc 4;
text -l "" -w 60;
text -l "属性数值:";
floatSliderGrp -v 0 -w 240 -f 1 gtSfloatF5;

setParent..;
rowLayout -nc 2 ;
text -l "" -w 60;
button -l "应           用" -w 355 -c "gtSModifyAttribute;";

setParent..;
setParent..;
setParent..;

frameLayout -cl 1 -cll 1 -l "二元属性"  gtDFrameL;
columnLayout -adj 1;
rowLayout -nc 3;
text -l "" -w 60;
text -l "属性名称:";
textField -text "attr" -w 300 gtDTextF;

setParent..;
rowLayout -nc 3 -cw3 60 60 240;
text -l "" -w 60;
text -l "属性数值:";
floatFieldGrp -nf 2 -v1 0.00  -v2 0.00  -cw2 120 120 gtDfloatF;
setParent..;
rowLayout -nc 2 -cw4 60 110 110 110;
text -l "" -w 60;
button -l "应           用" -w 355 -c "gtDModifyAttribute;";

setParent..;
setParent..;
setParent..;

frameLayout -cl 1 -cll 1 -l "三元属性"  gtTFrameL;
columnLayout -adj 1;
rowLayout -nc 3;
text -l "" -w 60;
text -l "属性名称:";
textField -text "attr" -w 300 gtTTextF;

setParent..;
rowLayout -nc 3 -cw3 60 60 240;
text -l "" -w 60;
text -l "属性数值:";
floatFieldGrp -nf 3 -v1 0.00  -v2 0.00 -v3 0.00 -w 240 gtTfloatF;
setParent..;
rowLayout -nc 2;
text -l "" -w 60;
button -l "应           用" -w 355 -c "gtTModifyAttribute;";
setParent..;
setParent..;
setParent..;

formLayout -e
 -af gtFrameL left 12 -af gtFrameL right 12 -af gtFrameL top 12 -af gtFrameL bottom 12 gtMainformL;
showWindow gtPLAttributeWin;
}
////////////////////
global proc gtLoadChannelAttrProcA(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textField -e -text ($sel) gtSTextF;
}
///////////
global proc gtLoadChannelAttrProcA2(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textField -e -text ($sel) gtSTextF2;
}
///////////
global proc gtLoadChannelAttrProcA3(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textField -e -text ($sel) gtSTextF3;
}
///////////

global proc gtLoadChannelAttrProcA4(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textField -e -text ($sel) gtSTextF4;
}
///////////

global proc gtLoadChannelAttrProcA5(){
string $sel[]=`channelBox -q -sma mainChannelBox`;
int $size=size($sel);
if($size>1) error "只能选择一个属性";
textField -e -text ($sel) gtSTextF5;
}
////////////////
global proc gtSModifyAttribute(){
string $sel[]=`ls -sl`;
string $name=`textField -q -text gtSTextF`;
float $value=`floatSliderGrp -q -v gtSfloatF`;

string $name2=`textField -q -text gtSTextF2`;
float $value2=`floatSliderGrp -q -v gtSfloatF2`;

string $name3=`textField -q -text gtSTextF3`;
float $value3=`floatSliderGrp -q -v gtSfloatF3`;

string $name4=`textField -q -text gtSTextF4`;
float $value4=`floatSliderGrp -q -v gtSfloatF4`;

string $name5=`textField -q -text gtSTextF5`;
float $value5=`floatSliderGrp -q -v gtSfloatF5`;

int $size=`size($sel)`;
if($size==0) error "为选择物体";

for($i=0;$i<$size;$i++){
    
string $attrName=($sel[$i]+"."+$name);
int $exists=`objExists $attrName`;
if($exists==1&&$name!=""){
setAttr $attrName $value;
        }
string $attrName=($sel[$i]+"."+$name2);
int $exists=`objExists $attrName`;
if($exists==1&&$name2!=""){
setAttr $attrName $value2;
        }        
 string $attrName=($sel[$i]+"."+$name3);
int $exists=`objExists $attrName`;
if($exists==1&&$name3!=""){
setAttr $attrName $value3;
        }  
string $attrName=($sel[$i]+"."+$name4);
int $exists=`objExists $attrName`;
if($exists==1&&$name4!=""){
setAttr $attrName $value4;
        }          
string $attrName=($sel[$i]+"."+$name5);
int $exists=`objExists $attrName`;
if($exists==1&&$name5!=""){
setAttr $attrName $value5;
        }                 
    }
}
////////////////////
global proc gtTModifyAttribute(){
string $sel[]=`ls -sl`;
string $name=`textField -q -text gtTTextF`;
float $value1=`floatFieldGrp -q -v1 gtTfloatF`;
float $value2=`floatFieldGrp -q -v2 gtTfloatF`;
float $value3=`floatFieldGrp -q -v3 gtTfloatF`;
int $size=`size($sel)`;
if($size==0) error "nothing selected";

for($i=0;$i<$size;$i++){
string $attrName=($sel[$i]+"."+$name);
int $exists=`objExists $attrName`;
if($exists){
setAttr $attrName $value1 $value2 $value3;
        }
    }
}
////////////////////////
global proc gtDModifyAttribute(){
string $sel[]=`ls -sl`;
string $name=`textField -q -text gtDTextF`;
float $value1=`floatFieldGrp -q -v1 gtDfloatF`;
float $value2=`floatFieldGrp -q -v2 gtDfloatF`;
int $size=`size($sel)`;
if($size==0) error "nothing selected";

for($i=0;$i<$size;$i++){
string $attrName=($sel[$i]+"."+$name);
int $exists=`objExists $attrName`;
if($exists){
setAttr $attrName $value1 $value2;
        }
    }
}
/////////////////////////////
//汽车载具轮胎自动转动绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
//////////////////////////////////ttg////////////////////////////////////
global proc gtVehicleSetUpWin(){
if(`window -ex gtVehicleSetUpWin`) deleteUI -window gtVehicleSetUpWin;
window -wh 500 300 -t "老船角色绑定-☆-汽车载具轮胎自动转动绑定工具!!!" gtVehicleSetUpWin;
columnLayout -adj 1;
      text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1343\"";
frameLayout -l "载具装配工具说明" -cl 1 -cll 1 gtFramLaya;
text -l "------------------载具装配说明------------------\n老船载具绑定工具：可以装配轮胎类型载具角色" -h 45 -bgc 0 0.4 0.5;
setParent..;
formLayout gtFormC;
textFieldGrp -l "车牌" -tx  "carName" carTextF1;
button -l "载入" -c "gtCarLaodName" butC;
formLayout -e
-af carTextF1 left 5 -af carTextF1 top 5 -ap carTextF1 right 0 75
-ac butC left 5  carTextF1 -af butC top 5 -af butC right 5  gtFormC;
setParent..;

rowColumnLayout -nc 2 -cw 1 490 -cw 2 10 ;

intSliderGrp -l "轮胎数量(单位：双）" -f 1 -v 2 -min 1 -max 10 gtintNum;
text -l "";

setParent..;

button -l "创建载具关节" -c "gtVehicleBoneProc" butBone;

	rowColumnLayout -nc 3 -cw 1 100 -cw 2 180  -cw 3 180 ;
text -l "";
checkBox -l "创建路径动画" -v 1  gtCarPathCurve;
checkBox -l "车体颠簸" -v 1  gtCarUpDown;

setParent..;
separator -style "double" ;
	rowColumnLayout -nc 3 -cw 1 100 -cw 2 180  -cw 3 180;
text -l "";
string $onA="checkBox -e -en 1  gtCargroudAttach;";
string $ofA="checkBox -e -v 0 -en 0 gtCargroudAttach;";
checkBox -l "创建地面物体" -v 1 -ofc $ofA -onc  $onA gtCargroudPlane;
checkBox -l "轮胎附着地面" -v 1  gtCargroudAttach;

setParent..;

button -l "创建一个车体引擎" -c "gtVehicleSetUpProcA"  carBut;
text -l "载入路径曲线，选择两个前轮胎曲线控制器";
	rowColumnLayout -nc 2 -cw 1 390 -cw 2 100 ;

textFieldGrp -l "路径曲线" -tx  "" carPathCurve;
button -l "载入" -c "gtCarLaodNameA" butCa;

setParent..;
button -l "创建前轮胎转向绑定" -c "gtVehicleTireOrientProc"  carButa;

showWindow gtVehicleSetUpWin;
}

/////////////////////////////////////////////////
global proc gtCarLaodName(){
string $sel[]=`ls -sl`;
string $carName[];
int $t=`tokenize ($sel[0]) "_" $carName`;
if($t==1){
    textFieldGrp -e -text ($sel[0]) carTextF1;
}else if($t>1){
    textFieldGrp -e -text ($carName[0]) carTextF1;
    }
}
//////////////////////////////////////////////
global proc gtCarLaodNameA(){
string $sel[]=`ls -sl`;
textFieldGrp -e -text ($sel[0]) carPathCurve;
}
///////////////////

global proc gtVehicleBoneProc(){
string $carN=`textFieldGrp -q -tx carTextF1`;
int $tireNum=`intSliderGrp -q -v gtintNum`;

$carN=($carN+"_");
circle -ch 0 -o on -nr 0 1 0 -r 5 -n ($carN+"con");
group -n ($carN+"conGrpA");
group -n ($carN+"conGrp");

select -r ($carN+"con.cv[7]") ;
select -tgl ($carN+"con.cv[5]") ;
select -tgl ($carN+"con.cv[3]") ;
select -tgl ($carN+"con.cv[1]") ;
move -r 0 0.5 0;

string $shap[]=`listRelatives -s ($carN+"con")`;
setAttr ($shap[0]+".overrideEnabled") 1;
setAttr ($shap[0]+".overrideColor") 6;

select -cl;
joint -p 0 0 0 -n ($carN+"rootBn"); 
joint -p 0 2 0 -n ($carN+"bodyBn"); 
joint -p 0 4 0 -n ($carN+"bodyBnEnd"); 
select -r ($carN+"rootBn"); 
joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;

select -r ($carN+"rootBn");
select -add  ($carN+"con");
parent;


float $perTireDis;
if($tireNum>1)$perTireDis=4;
float $backPos=0-(($tireNum-1)*$perTireDis*0.5);

for($i=0;$i<$tireNum;$i++){
    
    select -r ($carN+"rootBn");
    joint -p 2 1.0 ($backPos+$i*$perTireDis) -n ($carN+"l_tireBn"+$i);  
    joint -p 2 0 ($backPos+$i*$perTireDis) -n ($carN+"l_tireBnEnd"+$i);  
    select -r ($carN+"l_tireBn"+$i);
    joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;

    }

}
////////////////////////////
global proc gtVehicleSetUpProcA(){
string $carN=`textFieldGrp -q -tx carTextF1`;
int $tireNum=`intSliderGrp -q -v gtintNum`;
int $carUpDown=`checkBox -q -v gtCarUpDown`;
int $carPath=`checkBox -q -v gtCarPathCurve`;
int $carGroud=`checkBox -q -v gtCargroudPlane`;

    select -r ($carN+"_rootBn");
    parent -world;
    
    spaceLocator -p 0 0 0 -n ($carN+"_rootBnLoc");
    group -n ($carN+"_rootBnGrp");
    select -r ($carN+"_rootBn");
    select -add ($carN+"_rootBnGrp");
    delete`parentConstraint`;
    select -r ($carN+"_rootBn");
    select -add ($carN+"_rootBnLoc");   
    parent; 
    setAttr ($carN+"_rootBnLocShape.visibility") 0;
    setAttr -l true ($carN+"_rootBnLocShape.visibility") ;
    select -r ($carN+"_con") ;
    select -add ($carN+"_rootBnLoc") ;
    parentConstraint -mo;
    scaleConstraint;
    
    select -cl;
    group -empty -n ($carN+"_notMoveGrp");
    select -r ($carN+"_notMoveGrp");
    select -add ($carN+"_rootBnGrp");
    select -add ($carN+"_conGrp") ;
    group -n  ($carN+"_Grp"); 
    
if($carPath==1){

circle -ch 0 -o on -nr 0 1 0 -r 8 -n ($carN+"_conAll");
group -n ($carN+"_conAllGrpA");
group -n ($carN+"_conAllGrp");

select -r ($carN+"_conAll.cv[7]") ;
select -tgl ($carN+"_conAll.cv[5]") ;
select -tgl ($carN+"_conAll.cv[3]") ;
select -tgl ($carN+"_conAll.cv[1]") ;
move -r 0 0.5 0;

string $shap[]=`listRelatives -s ($carN+"_conAll")`;
setAttr ($shap[0]+".overrideEnabled") 1;
setAttr ($shap[0]+".overrideColor") 13;    
    
spaceLocator -p 0 0 0 -n ($carN+"_locMov");
group -n ($carN+"_locMovGrp");
select -r ($carN+"_conGrp");
select -add ($carN+"_locMov");
parent;

select -r ($carN+"_conAll");
select -add ($carN+"_locMov");
scaleConstraint;

curve -d 3 -p 0 0 0 -p 0 0 4 -p 0 0 8 -p 0 0 12 -p 0 0 16 -p 0 0 20 -p 0 0 24 -p 0 0 28 -p 0 0 32 -p 0 0 36 
-k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 7 -k 7 -n ($carN+"_pathCurve");
group -n ($carN+"_pathCurveGrp");
group -n ($carN+"_planePathCurveGrp");
xform -os -piv 0 0 0;
select -r ($carN+"_conAll");
select -add ($carN+"_planePathCurveGrp");
parentConstraint;
scaleConstraint;
select -r ($carN+"_planePathCurveGrp");
select -add ($carN+"_notMoveGrp");
parent;

textFieldGrp -e -text ($carN+"_pathCurve") carPathCurve;

rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 10 -d 3 -tol 0.01 ($carN+"_pathCurve");
select -cl;
string $shap[]=`listRelatives -s ($carN+"_pathCurve")`;
setAttr ($shap[0]+".overrideEnabled") 1;
setAttr ($shap[0]+".overrideColor") 12;


select -r ($carN+"_locMov");
select -tgl ($carN+"_pathCurve");
pathAnimation -fractionMode false -follow true -followAxis z -upAxis y -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject ($carN+"_conAll") 
-inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
string $pathShap[]=`listRelatives -s ($carN+"_pathCurve")`;
string $pathN[]=`listConnections -s 0 -d 1 ($pathShap[0]+".worldSpace[0]")`;

arcLengthDimension ($carN+"_pathCurve.u[0.0]") ;
string $disNam[]=`ls -sl`;
pickWalk -d down;
string $disN[]=`ls -sl`;
connectAttr -f ($pathN[0]+".uValue") ($disN[0]+".uParamValue");
setAttr ($disNam[0]+".visibility") 0;
setAttr -lock true ($disNam[0]+".visibility");

select -r ($carN+"_conAll");
addAttr -ln "dis"  -at double ;
addAttr -ln "showLoc"  -at bool -k 1;
connectAttr -f ($disN[0]+".arcLength") ($carN+"_conAll.dis");

string $shap[]=`listRelatives -s ($carN+"_locMov")`;
setAttr ($shap[0]+".v") 0;
setAttr -l true ($shap[0]+".v") ;

spaceLocator -p 0 0 0 -n ($carN+"_LocAll");
group -n ($carN+"_LocAllGrp");
setAttr ($carN+"_LocAllGrp.scaleZ") 5;
setAttr ($carN+"_LocAllGrp.scaleX") 5;
setAttr ($carN+"_LocAllGrp.scaleY") 5;

select -r ($carN+"_conAllGrp") ;
select -add ($carN+"_LocAll") ;
parent;

connectAttr -f  ($carN+"_conAll.showLoc") ($carN+"_LocAllShape.v");
select -r ($carN+"_LocAllGrp") ;
select -add ($carN+"_locMovGrp") ;
select -add ($carN+"_Grp");
parent;

}

///////////////
select -cl;
group -empty -n ($carN+"_tireRollNotMoveGrp");  
select -r ($carN+"_tireRollNotMoveGrp");  
select -add ($carN+"_notMoveGrp");  
parent;

for($i=0;$i<$tireNum;$i++){
  select -r ($carN+"_l_tireBn"+$i) ;
  mirrorJoint -mirrorYZ -searchReplace "l_" "r_";

string $side="_l_";
  circle -ch 0 -o on -nr  0 1 0 -r 1.0 -n ($carN+$side+"tireCon"+$i);
  group -n ($carN+$side+"tireConGrpA"+$i);
  group -n ($carN+$side+"tireConGrp"+$i);

  select -r  ($carN+$side+"tireCon"+$i);
  duplicate -rr;
    rename ($carN+$side+"tireAPcurve"+$i);
    select -r ($carN+$side+"tireAPcurve"+$i+".cv[2]") ;
    select -tgl ($carN+$side+"tireAPcurve"+$i+".cv[0]") ;
    select -tgl ($carN+$side+"tireAPcurve"+$i+".cv[4]") ;
    select -tgl ($carN+$side+"tireAPcurve"+$i+".cv[6]") ;
    scale -r -p 0cm 0cm 0cm 0 0 0 ;
     string $shap[]=`listRelatives -s ($carN+$side+"tireAPcurve"+$i)`;
     setAttr ($shap[0]+".overrideEnabled") 1;
     setAttr ($shap[0]+".overrideColor") 14;

  select -r ($carN+$side+"tireBn"+$i) ;
  select -add  ($carN+$side+"tireConGrp"+$i);
  delete`parentConstraint`;
  

  select -r ($carN+$side+"tireAPcurve"+$i);
  select -add  ($carN+$side+"tireCon"+$i);
  parent;
  select -r  ($carN+$side+"tireCon"+$i);
  addAttr -ln "showAPcurve"  -at bool -k 1; 
  string $shap[]=`listRelatives -s ($carN+$side+"tireAPcurve"+$i)`;    
  connectAttr -f ($carN+$side+"tireCon"+$i+".showAPcurve") ($shap[0]+".visibility");
    
  select -r ($carN+$side+"tireBn"+$i) ;
  duplicate -rr;
  rename ($carN+$side+"tireBnRot"+$i) ;
  select -r ($carN+$side+"tireBnRot"+$i) ;
  select -add ($carN+$side+"tireAPcurve"+$i);
  parent;
  select -r ($carN+$side+"tireBnRot"+$i) ;
  select -add ($carN+$side+"tireBn"+$i) ;
  parentConstraint;
  scaleConstraint;
  
  setAttr ($carN+$side+"tireBnRot"+$i+".radius") 0.01; 
  select -r ($carN+$side+"tireBnRot"+$i) ;
  pickWalk -d down;
  delete;
  
  string $shap[]=`listRelatives -s ($carN+$side+"tireCon"+$i)`;
  setAttr ($shap[0]+".overrideEnabled") 1;
  setAttr ($shap[0]+".overrideColor") 22;
  

  select -r ($carN+$side+"tireConGrp"+$i);
  select -add  ($carN+"_con") ;
  parent;

  float $diam=`getAttr ($carN+$side+"tireBnEnd"+$i+".tx")`;
  select -r ($carN+$side+"tireCon"+$i);
  addAttr -ln "diameter"  -at double  -min 0.01 -dv ($diam*2) -k 1;
  addAttr -ln "autoRoll"  -at bool  -dv 1 -k 1;
  addAttr -ln "prePosx"  -at double;
  addAttr -ln "prePosy"  -at double;
  addAttr -ln "prePosz"  -at double;
  select -cl;
  group -empty -n ($carN+$side+"nowPos"+$i);
  select -cl;
  group -empty -n ($carN+$side+"prePos"+$i); 
  
  select -cl;
  group -empty -n ($carN+$side+"prePosA"+$i); 
  select -r ($carN+$side+"prePosA"+$i); 
  select -add ($carN+$side+"tireCon"+$i);
  parent;
  setAttr ($carN+$side+"prePosA"+$i+".translateZ") 0;
  setAttr ($carN+$side+"prePosA"+$i+".translateX") 0;
  setAttr ($carN+$side+"prePosA"+$i+".translateY") 0;
  
  select -r ($carN+$side+"nowPos"+$i);
  select -add ($carN+$side+"prePos"+$i); 
  group -n ($carN+$side+"prePos"+$i+"Grp"); 
  select -r ($carN+$side+"prePos"+$i+"Grp"); 
  select -add ($carN+"_tireRollNotMoveGrp");  
  parent;

  select -r ($carN+$side+"tireCon"+$i);
  select -add ($carN+$side+"nowPos"+$i);
  pointConstraint;
  select -r ($carN+$side+"prePos"+$i); 
  select -add ($carN+$side+"prePosA"+$i); 
  pointConstraint;
  
string $exp="";
    $exp+="float $diameter=";
    $exp+=($carN+$side+"tireCon"+$i)+".diameter;\n";
    $exp+="float $autoRoll=";    
    $exp+=($carN+$side+"tireCon"+$i)+".autoRoll;\n";
    $exp+="float $prePosx=";     
    $exp+=($carN+$side+"tireCon"+$i)+".prePosx;\n";
    $exp+="float $prePosy=";        
    $exp+=($carN+$side+"tireCon"+$i)+".prePosy;\n";
    $exp+="float $prePosz=";        
    $exp+=($carN+$side+"tireCon"+$i)+".prePosz;\n\n";
    $exp+=($carN+$side+"prePos"+$i)+".tx=$prePosx;\n";
    $exp+=($carN+$side+"prePos"+$i)+".ty=$prePosy;\n";
    $exp+=($carN+$side+"prePos"+$i)+".tz=$prePosz;\n";
    $exp+="float $nowPosx=";
    $exp+=($carN+$side+"nowPos"+$i)+".tx;\n";
    $exp+="float $nowPosy=";
    $exp+=($carN+$side+"nowPos"+$i)+".ty;\n";    
    $exp+="float $nowPosz=";
    $exp+=($carN+$side+"nowPos"+$i)+".tz;\n\n";    
              
    $exp+="float $dis=mag(<<$nowPosx,$nowPosy,$nowPosz>>-<<$prePosx,$prePosy,$prePosz>>);\n";
    $exp+="float $curRoll=";
    $exp+=($carN+$side+"tireBnRot"+$i)+".rotateY;\n\n";

    $exp+="float $dirPreZ=";
    $exp+=($carN+$side+"prePosA"+$i)+".translateZ;\n";

    $exp+="int $dir=1;\n";
    $exp+="if($dirPreZ>0)\n";
    $exp+="$dir=-1;\n";
    $exp+="float $perimeter=3.1415926*$diameter;\n";
    
    $exp+=($carN+$side+"tireBnRot"+$i)+".rotateY=$curRoll+($dis/$perimeter)*360*$autoRoll*$dir;\n";
    $exp+=($carN+$side+"tireCon"+$i)+".prePosx=$nowPosx;\n";
    $exp+=($carN+$side+"tireCon"+$i)+".prePosy=$nowPosy;\n";
    $exp+=($carN+$side+"tireCon"+$i)+".prePosz=$nowPosz;\n";
    
expression -s ($exp)  -o ($carN+$side+"tireBnRot"+$i) -ae 1 -uc all -n ($carN+$side+"tireBnRot"+$i+"exp");  

////////////////////
string $side="_r_";
  
    circle -ch 0 -o on -nr  0 1 0 -r 1.0 -n ($carN+$side+"tireCon"+$i);
  group -n ($carN+$side+"tireConGrpA"+$i);
  group -n ($carN+$side+"tireConGrp"+$i);

  select -r  ($carN+$side+"tireCon"+$i);
  duplicate -rr;
    rename ($carN+$side+"tireAPcurve"+$i);
    select -r ($carN+$side+"tireAPcurve"+$i+".cv[2]") ;
    select -tgl ($carN+$side+"tireAPcurve"+$i+".cv[0]") ;
    select -tgl ($carN+$side+"tireAPcurve"+$i+".cv[4]") ;
    select -tgl ($carN+$side+"tireAPcurve"+$i+".cv[6]") ;
    scale -r -p 0cm 0cm 0cm 0 0 0 ;
     string $shap[]=`listRelatives -s ($carN+$side+"tireAPcurve"+$i)`;
     setAttr ($shap[0]+".overrideEnabled") 1;
     setAttr ($shap[0]+".overrideColor") 14;

  select -r ($carN+$side+"tireBn"+$i) ;
  select -add  ($carN+$side+"tireConGrp"+$i);
  delete`parentConstraint`;
  
  select -r ($carN+$side+"tireAPcurve"+$i);
  select -add  ($carN+$side+"tireCon"+$i);
  parent;
  select -r  ($carN+$side+"tireCon"+$i);
  addAttr -ln "showAPcurve"  -at bool -k 1; 
  string $shap[]=`listRelatives -s ($carN+$side+"tireAPcurve"+$i)`;    
  connectAttr -f ($carN+$side+"tireCon"+$i+".showAPcurve") ($shap[0]+".visibility");
    
  select -r ($carN+$side+"tireBn"+$i) ;
  duplicate -rr;
  rename ($carN+$side+"tireBnRot"+$i) ;
  select -r ($carN+$side+"tireBnRot"+$i) ;
  select -add ($carN+$side+"tireAPcurve"+$i);
  parent;
  select -r ($carN+$side+"tireBnRot"+$i) ;
  select -add ($carN+$side+"tireBn"+$i) ;
  parentConstraint;
  scaleConstraint;

  setAttr ($carN+$side+"tireBnRot"+$i+".radius") 0.01; 
  select -r ($carN+$side+"tireBnRot"+$i) ;
  pickWalk -d down;
  delete;
  
  string $shap[]=`listRelatives -s ($carN+$side+"tireCon"+$i)`;
  setAttr ($shap[0]+".overrideEnabled") 1;
  setAttr ($shap[0]+".overrideColor") 22;
  

  select -r ($carN+$side+"tireConGrp"+$i);
  select -add  ($carN+"_con") ;
  parent;

  float $diam=`getAttr ($carN+$side+"tireBnEnd"+$i+".tx")`;
  select -r ($carN+$side+"tireCon"+$i);
  addAttr -ln "diameter"  -at double  -min 0.01 -dv ($diam*2) -k 1;
  addAttr -ln "autoRoll"  -at bool  -dv 1 -k 1;
  addAttr -ln "prePosx"  -at double;
  addAttr -ln "prePosy"  -at double;
  addAttr -ln "prePosz"  -at double;
  select -cl;
  group -empty -n ($carN+$side+"nowPos"+$i);
  select -cl;
  group -empty -n ($carN+$side+"prePos"+$i); 
  
  select -cl;
  group -empty -n ($carN+$side+"prePosA"+$i); 
  select -r ($carN+$side+"prePosA"+$i); 
  select -add ($carN+$side+"tireCon"+$i);
  parent;
  setAttr ($carN+$side+"prePosA"+$i+".translateZ") 0;
  setAttr ($carN+$side+"prePosA"+$i+".translateX") 0;
  setAttr ($carN+$side+"prePosA"+$i+".translateY") 0;
  
  select -r ($carN+$side+"nowPos"+$i);
  select -add ($carN+$side+"prePos"+$i); 
  group -n ($carN+$side+"prePos"+$i+"Grp"); 
  select -r ($carN+$side+"prePos"+$i+"Grp"); 
  select -add ($carN+"_tireRollNotMoveGrp");  
  parent;

  select -r ($carN+$side+"tireCon"+$i);
  select -add ($carN+$side+"nowPos"+$i);
  pointConstraint;
  select -r ($carN+$side+"prePos"+$i); 
  select -add ($carN+$side+"prePosA"+$i); 
  pointConstraint;
  
string $exp="";
    $exp+="float $diameter=";
    $exp+=($carN+$side+"tireCon"+$i)+".diameter;\n";
    $exp+="float $autoRoll=";    
    $exp+=($carN+$side+"tireCon"+$i)+".autoRoll;\n";
    $exp+="float $prePosx=";     
    $exp+=($carN+$side+"tireCon"+$i)+".prePosx;\n";
    $exp+="float $prePosy=";        
    $exp+=($carN+$side+"tireCon"+$i)+".prePosy;\n";
    $exp+="float $prePosz=";        
    $exp+=($carN+$side+"tireCon"+$i)+".prePosz;\n\n";
    $exp+=($carN+$side+"prePos"+$i)+".tx=$prePosx;\n";
    $exp+=($carN+$side+"prePos"+$i)+".ty=$prePosy;\n";
    $exp+=($carN+$side+"prePos"+$i)+".tz=$prePosz;\n";
    $exp+="float $nowPosx=";
    $exp+=($carN+$side+"nowPos"+$i)+".tx;\n";
    $exp+="float $nowPosy=";
    $exp+=($carN+$side+"nowPos"+$i)+".ty;\n";    
    $exp+="float $nowPosz=";
    $exp+=($carN+$side+"nowPos"+$i)+".tz;\n\n";    
              
    $exp+="float $dis=mag(<<$nowPosx,$nowPosy,$nowPosz>>-<<$prePosx,$prePosy,$prePosz>>);\n";
    $exp+="float $curRoll=";
    $exp+=($carN+$side+"tireBnRot"+$i)+".rotateY;\n\n";

    $exp+="float $dirPreZ=";
    $exp+=($carN+$side+"prePosA"+$i)+".translateZ;\n";

    $exp+="int $dir=1;\n";
    $exp+="if($dirPreZ>0)\n";
    $exp+="$dir=-1;\n";
    $exp+="float $perimeter=3.1415926*$diameter;\n";
    
    $exp+=($carN+$side+"tireBnRot"+$i)+".rotateY=$curRoll+($dis/$perimeter)*360*$autoRoll*$dir;\n";
    $exp+=($carN+$side+"tireCon"+$i)+".prePosx=$nowPosx;\n";
    $exp+=($carN+$side+"tireCon"+$i)+".prePosy=$nowPosy;\n";
    $exp+=($carN+$side+"tireCon"+$i)+".prePosz=$nowPosz;\n";
    
expression -s ($exp)  -o ($carN+$side+"tireBnRot"+$i) -ae 1 -uc all -n ($carN+$side+"tireBnRot"+$i+"exp");  

  
}

if($carGroud==1){

nurbsPlane -ch on -o on -po 0 -ax 0 1 0 -w 50 -lr 1 -n ($carN+"_groudPlane");
setAttr ($carN+"_groudPlane.translateZ") 15;
string $shap[]=`listRelatives -s ($carN+"_groudPlane")`;
string $makePlane[]=`listConnections -s 1 -d 0 ($shap[0]+".create")`;
setAttr ($makePlane[0]+".patchesV") 30;
setAttr ($makePlane[0]+".patchesU") 30;
group -n ($carN+"_groudPlaneGrp");
select -r ($carN+"_groudPlaneGrp") ;
select -add ($carN+"_notMoveGrp");  
parent;
int $ex=`objExists ($carN+"_conAll")`;
if($ex==1){
    select -r ($carN+"_conAll");
    select -add ($carN+"_groudPlaneGrp") ;
    parentConstraint -mo;
    scaleConstraint;
}else{
        select -r ($carN+"_con");
    select -add ($carN+"_groudPlaneGrp") ;
    parentConstraint;
    scaleConstraint;    
    }
}
//////////////////////
select -cl;
joint -p -2 0 0  -n ($carN+"_bodyRootBn");
joint -p 2 0 0 -n ($carN+"_bodyEndBn");
joint -e -zso -oj xyz -sao yup ($carN+"_bodyRootBn");

select -r ($carN+"_bodyRootBn.rotatePivot") ;
select -add ($carN+"_bodyEndBn.rotatePivot") ;
ikHandle -sol ikRPsolver;
rename ($carN+"_bodyIkhandle");

curve -d 1 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 
-p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 
-p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 
-p 0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 
-k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19  -n   ($carN+"_bodySideConR");
group -n ($carN+"_bodySideConRGrp");
select -r ($carN+"_bodyRootBn");
select -add ($carN+"_bodySideConRGrp");
delete `pointConstraint`;

select -r ($carN+"_bodySideConR");
select -add ($carN+"_bodyRootBn");
parentConstraint -mo;

string $shape[]=`listRelatives -s ($carN+"_bodySideConR")`;
setAttr ($shape[0]+".overrideEnabled") 1;
setAttr ($shape[0]+".overrideColor") 14;

curve -d 1 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 
-p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 
-p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 
-p 0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 
-k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19  -n   ($carN+"_bodySideConL");
group -n ($carN+"_bodySideConLGrp");
select -r ($carN+"_bodyIkhandle");
select -add ($carN+"_bodySideConLGrp");
delete `pointConstraint`;

select -r ($carN+"_bodySideConL");
select -add ($carN+"_bodyIkhandle");
parentConstraint -mo;

string $shape[]=`listRelatives -s ($carN+"_bodySideConL")`;
setAttr ($shape[0]+".overrideEnabled") 1;
setAttr ($shape[0]+".overrideColor") 14;

distanceDimension -sp 0 -1 0 -ep 0 1 0 ;
string $disnam[]=`ls -sl`;
select -r $disnam[0];
pickWalk -d up;
rename ($carN+"_bodyDisLoc1");
select -r  $disnam[1];
rename ($carN+"_bodyDis");
string $disShape[]=`listRelatives -s ($carN+"_bodyDis")`;
string $loc[]=`listConnections -s 1 -d 0  ($disShape[0]+".startPoint")`;
rename ($loc[0]) ($carN+"_bodyDisLoc2");


select -r ($carN+"_bodySideConL");
select -add ($carN+"_bodyDisLoc1");
pointConstraint;

select -r ($carN+"_bodySideConR");
select -add ($carN+"_bodyDisLoc2");
pointConstraint;

shadingNode -asUtility multiplyDivide -n ($carN+"_bodyDidMulti");
connectAttr -f ($disShape[0]+".distance") ($carN+"_bodyDidMulti.input1X");
setAttr ($carN+"_bodyDidMulti.operation") 2;

shadingNode -asUtility multiplyDivide -n ($carN+"_bodyStrechMulti");

int $ex=`objExists ($carN+"_conAll")`;
if($ex==1){connectAttr -f ($carN+"_conAll.scaleX") ($carN+"_bodyStrechMulti.input1X");
}else{setAttr ($carN+"_bodyStrechMulti.input1X") 1;}

connectAttr -f ($carN+"_con.scaleX") ($carN+"_bodyStrechMulti.input2X");

shadingNode -asUtility multiplyDivide -n ($carN+"_bodyStrechMultiB");
connectAttr -f ($carN+"_bodyStrechMulti.outputX") ($carN+"_bodyStrechMultiB.input1X");
int $ex=`objExists ($carN+"_LocAll")`;
if($ex==1)connectAttr -f ($carN+"_LocAll.scaleX") ($carN+"_bodyStrechMultiB.input2X");

shadingNode -asUtility multiplyDivide -n ($carN+"_bodyStrechMultiA");
connectAttr -f ($carN+"_bodyStrechMultiB.outputX") ($carN+"_bodyStrechMultiA.input1X");
setAttr ($carN+"_bodyStrechMultiA.input2X") 4;

connectAttr -f ($carN+"_bodyStrechMultiA.outputX") ($carN+"_bodyDidMulti.input2X");
connectAttr -f ($carN+"_bodyDidMulti.outputX") ($carN+"_bodyRootBn.scaleX");

select -r ($carN+"_bodyDisLoc1") ($carN+"_bodyDisLoc2") ($carN+"_bodyDis") ;
select -add ($carN+"_bodyIkhandle");
group -n ($carN+"_bodyDonotMoveGrp");
setAttr ($carN+"_bodyDonotMoveGrp.visibility") 0;
setAttr -lock true ($carN+"_bodyDonotMoveGrp.v");

curve -d 1 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 
-p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 
-p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 
-p 0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 
-k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19  -n   ($carN+"_bodyCon");
group -n ($carN+"_bodyConGrpA");
group -n ($carN+"_bodyConGrp");
select -r ($carN+"_bodyConGrp");
select -add  ($carN+"_con");
parent;

select -r  ($carN+"_bodyCon");
addAttr -ln "showCon"  -at bool -k 1 -dv 1;
 
string $shape[]=`listRelatives -s ($carN+"_bodySideConL")`;
connectAttr -f ($carN+"_bodyCon.showCon")  ($shape[0]+".v");

string $shape[]=`listRelatives -s ($carN+"_bodySideConR")`;
connectAttr -f ($carN+"_bodyCon.showCon")  ($shape[0]+".v");

spaceLocator -p 0 0 0 -n  ($carN+"_bodyConLocP");
select -add ($carN+"_bodyRootBn");
parent;
setAttr ($carN+"_bodyConLocP.visibility") 0;
setAttr -lock true ($carN+"_bodyConLocP.v");

select -r ($carN+"_bodySideConLGrp");
select -add  ($carN+"_con");
parent;
select -r ($carN+"_bodySideConRGrp");
select -add  ($carN+"_con");
parent;

select -r ($carN+"_bodyRootBn");
select -add  ($carN+"_rootBn");
parent;
setAttr ($carN+"_bodyRootBn.visibility") 0;
setAttr -lock true ($carN+"_bodyRootBn.v");

string $shape[]=`listRelatives -s ($carN+"_bodyCon")`;
setAttr ($shape[0]+".overrideEnabled") 1;
setAttr ($shape[0]+".overrideColor") 6;
select -r ($carN+"_bodyCon.cv[0:19]") ;
scale -r -p 0cm 0cm 0cm 2 2 2 ;


if($carUpDown==1){
    select -cl;
    for($ii=0;$ii<$tireNum;$ii++){
        select -add  ($carN+"_l_tireAPcurve"+$ii);
    }
    select -add ($carN+"_bodySideConLGrp");
    pointConstraint  -weight 1;
    select -cl;
    for($ii=0;$ii<$tireNum;$ii++){
        select -add  ($carN+"_r_tireAPcurve"+$ii);
    }
    select -add ($carN+"_bodySideConRGrp");
    pointConstraint  -weight 1;
    
    spaceLocator -p 0 0 0 -n ($carN+"_BodyUpDownAimLoc");
    group  -n ($carN+"_BodyUpDownAimLocGrp");
    
    select -r ($carN+"_l_tireAPcurve0") ;
    select -add ($carN+"_r_tireAPcurve0") ;
    select -add ($carN+"_BodyUpDownAimLocGrp");
    delete` pointConstraint -offset 0 0 0 -weight 1`;
    
    select -r ($carN+"_l_tireAPcurve0") ;
    select -add ($carN+"_r_tireAPcurve0") ;
    select -add ($carN+"_BodyUpDownAimLocGrp");    
    pointConstraint  -weight 1;
select -r ($carN+"_BodyUpDownAimLocGrp") ;
select -add ($carN+"_bodyDonotMoveGrp") ;
parent;

select -r ($carN+"_bodyConLocP") ;
parent -world;

select -r ($carN+"_BodyUpDownAimLoc") ;
select -add ($carN+"_bodyIkhandle") ;
poleVectorConstraint -weight 1;
select -r ($carN+"_bodyConLocP") ;
select -add ($carN+"_bodyRootBn") ;
parent;

}

select -r ($carN+"_bodyDonotMoveGrp") ;
select -add ($carN+"_notMoveGrp");  
parent;

select -r ($carN+"_bodyConLocP");
select -add ($carN+"_bodyConGrp");
pointConstraint;
orientConstraint -offset 0 0 0  -weight 1;

select -r ($carN+"_bodyBn") ;
select -add ($carN+"_bodyConGrpA");
delete`parentConstraint`;

select -r ($carN+"_bodyCon");
select -add ($carN+"_bodyBn") ;
parentConstraint;
setAttr ($carN+"_bodyCon.showCon") 0;


int $carAP=`checkBox -q -v gtCargroudAttach`;

if($carAP==1){
select -cl;
    for($i=0;$i<$tireNum;$i++){
string $side="_l_";
select -add  ($carN+$side+"tireCon"+$i);
string $side="_r_";
select -add  ($carN+$side+"tireCon"+$i);
        }
    gtCarPlaceTyreDoA;    
    }    
    if($tireNum>1){
    select -r ($carN+"_l_tireCon"+($tireNum-1));
    select -add ($carN+"_r_tireCon"+($tireNum-1));
    gtVehicleTireOrientProc;
    }
select -r ($carN+"_con");
cycleCheck -e off;
}

////////////////////////////////////////////////////////////////////

global proc gtCarPlaceTyreDoA(){
string $carN=`textFieldGrp -q -tx carTextF1`;
string $floor=($carN+"_groudPlane");

string $sel[]=`ls -sl`; 
                   
string $groupPlane=$floor;                   

int $ex=`objExists ($carN+"_conAll.startFrame")`;
if($ex==0){
    addAttr -ln "startFrame"  -at long  -dv 1 -k 1 ($carN+"_conAll");
}

for($jj=0;$jj<size($sel);$jj++){
    string $con=($sel[$jj]);
string $tm[];
int $t=`tokenize ($con) "_" $tm`;
string $aa=$tm[1];

int $ex=`objExists ($con+".stickGround")`;
if($ex==0){
select -r $con;
    addAttr -ln "stickGround"  -at long  -dv 10 -min 0 -max 10 -k 1;
    addAttr -ln "nostickGround"  -at long  -dv 10 -min 0 -max 10 ;
   
    shadingNode -asUtility setRange -n ($con+"setRangeStick");
    connectAttr -f ($con+".stickGround") ($con+"setRangeStick.valueX");
    setAttr ($con+"setRangeStick.maxX") 1;
    setAttr ($con+"setRangeStick.oldMaxX") 10;
    shadingNode -asUtility reverse -n ($con+"reverseStick");
connectAttr -f ($con+"setRangeStick.outValueX") ($con+"reverseStick.inputX");
connectAttr -f ($con+"reverseStick.outputX") ($con+".nostickGround");   
    }
                                                
 spaceLocator -p 0 0 0 -n ($sel[$jj]+"Loc");
 select -r ($sel[$jj]);                             
 select -add ($sel[$jj]+"Loc");           
 delete `parentConstraint`;                        
 select -r $groupPlane ($sel[$jj]+"Loc");  
 delete ` geometryConstraint -weight 1`;            
 select -r ($sel[$jj]+"Loc");             
 makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;     
 select -r ($sel[$jj]+"Loc");             
 duplicate -rr;                                     
 rename ($sel[$jj]+"LocA");              
 duplicate -rr;                                     
 rename ($sel[$jj]+"LocB");  
 
 select -cl;
 group -empty -n  ($sel[$jj]+"ApGrp");            
 select -r ($sel[$jj]);  
select -add ($sel[$jj]+"ApGrp"); 
delete `parentConstraint`;
string $parent[]=`listRelatives -p ($sel[$jj])`;  
  
select -r ($sel[$jj]+"ApGrp"); 
select -add ($parent[0]);
parent;
select -r ($sel[$jj]);  
select -add ($sel[$jj]+"ApGrp"); 
parent;
  select -r ($sel[$jj]+"LocB");  
  select -add   ($sel[$jj]+"ApGrp");             
 pointConstraint -mo -skip y -skip z -weight 1;     
 select -r $groupPlane ($sel[$jj]+"Loc");
 string $geometry[]=` geometryConstraint -weight 1`;
 select -r ($sel[$jj]+"Loc") ($sel[$jj]+"LocA") ($sel[$jj]+"LocB"); 
 string $pointC[]=` pointConstraint`; 
 connectAttr -f ($con+".stickGround") ($pointC[0]+"."+$sel[$jj]+"LocW0");  
 connectAttr -f ($con+".nostickGround") ($pointC[0]+"."+$sel[$jj]+"LocAW1"); 
 select -r ($sel[$jj]+"Loc") ($sel[$jj]+"LocA") ($sel[$jj]+"LocB"); 
 group -n ($sel[$jj]+"LocGrp"); 
 select -add ($parent[0]);   
 parent;  
 setAttr ($sel[$jj]+"LocGrp.visibility") 0;
 setAttr -lock true ($sel[$jj]+"LocGrp.visibility");
     
 string $exp="";                                               
     $exp+="if(frame==";
     $exp+=($carN);
     $exp+="_conAll.startFrame){\n";              
     $exp+="setAttr (\"";
     $exp+=($sel[$jj]);
     $exp+="Loc.tx\") 0;\n";    
     $exp+="setAttr (\"";
     $exp+=($sel[$jj]);
     $exp+="Loc.ty\") 0;\n";    
     $exp+="setAttr (\"";
     $exp+=($sel[$jj]);
     $exp+="Loc.tz\") 0;}\n";    
expression -s $exp  -ae 1 -uc all -n ($sel[$jj]+"LocExp") ;   
    }
    select -r ($sel);
}

/////////////////////////////////////////////////////
global proc gtVehicleTireOrientProc(){
string $pathCurve=`textFieldGrp -q -tx carPathCurve`;
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size!=2)error "需要选择两个前轮胎曲线控制器";
string $carN=`textFieldGrp -q -tx carTextF1`;
int $ex=`objExists ($carN+"_conAll")`;
string $conAll;
if($ex==1)$conAll=($carN+"_conAll");

string $con=($carN+"_con");

curve -d 1 -p 0 0 -2 -p 0 0 2 -k 0 -k 1 -n ($sel[0]+"orientFixCurve") ;
circle -ch 0 -o on -nr 0 1 0 -r 2.5 -n ($carN+"_steerCon") ;
group -n ($carN+"_steerConGrpA");
group -n ($carN+"_steerConGrp");
select -add ($con);
parent;

select -r ($sel[0]+"orientFixCurve") ;
select -add ($carN+"_steerCon") ;
parent;

select -cl;
for($i=0;$i<size($sel);$i++){
    select -add ($sel[$i]);
}

select -add ($carN+"_steerConGrp");
delete `pointConstraint`;
select -r ($carN+"_steerConGrp");
move -r 0 2 0;

select -r ($sel[0]+"orientFixCurve") ;
move -r 0 -2 0;

setAttr ($sel[0]+"orientFixCurve.visibility") 0;
setAttr -lock true ($sel[0]+"orientFixCurve.v");

setAttr -lock true ($carN+"_steerCon.tx");
setAttr -lock true ($carN+"_steerCon.ty");
setAttr -lock true ($carN+"_steerCon.tz");
setAttr -lock true ($carN+"_steerCon.sx");
setAttr -lock true ($carN+"_steerCon.sy");
setAttr -lock true ($carN+"_steerCon.sz");
setAttr -lock true ($carN+"_steerCon.rx");
setAttr -lock true ($carN+"_steerCon.rz");
setAttr -lock true ($carN+"_steerCon.v");

string $shape[]=`listRelatives -s ($carN+"_steerCon")`;
setAttr ($shape[0]+".overrideEnabled") 1;
setAttr ($shape[0]+".overrideColor") 13;

select -r ($carN+"_steerCon.cv[4]") ;
move -r  1.5 0 0 ;
select -r ($carN+"_steerCon.cv[6]") ;
move -r  -1.5 0 0 ;

select -r $con;
addAttr -ln "autoSteer"  -at double  -min 0 -max 10 -dv 10 -k 1;
addAttr -ln "showSteerCon"  -at bool -k 1 -dv 1 ;
string $shap[]=`listRelatives -s ($carN+"_steerCon")`;
connectAttr -f ($con+".showSteerCon") ($shap[0]+".v");

shadingNode -asUtility setRange -n ($sel[0]+"setRangeSteer");
connectAttr -f ($con+".autoSteer") ($sel[0]+"setRangeSteer.valueX");
setAttr ($sel[0]+"setRangeSteer.maxX") 1;
setAttr ($sel[0]+"setRangeSteer.oldMaxX") 10;
shadingNode -asUtility reverse -n ($sel[0]+"reverseSteer");
connectAttr -f ($sel[0]+"setRangeSteer.outValueX") ($sel[0]+"reverseSteer.inputX");

for($i=0;$i<size($sel);$i++){  

select -r ($sel[$i]);
pickWalk -d up;
string $parent[]=`ls -sl`;
select -r ($sel[0]+"orientFixCurve") ;
select -add  $pathCurve;
select -add $parent[0];
string $constraint[]=`tangentConstraint -weight 1 -aimVector 0 0 -1 -upVector -1 0 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $conAll`;
connectAttr -f ($sel[0]+"setRangeSteer.outValueX") ($constraint[0]+"."+$pathCurve+"W1");
connectAttr -f ($sel[0]+"reverseSteer.outputX") ($constraint[0]+"."+$sel[0]+"orientFixCurveW0");
select -r ($carN+"_steerCon");
    }
}
////////////////////////////////
//单段双控制器IK绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtsingleBoneIKConWin(){
   if(`window -ex gtsingleBoneIKConWin`) deleteUI -window gtsingleBoneIKConWin;
    window -wh 400 200 -t "老船角色绑定-☆-单段双控制器IK绑定工具!" gtsingleBoneIKConWin;
    columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1352\"";
        separator gtsep1;
        rowColumnLayout -nc 3 -cw 1 100 -cw 2 150 -cw 3 150;
text -l "   "  -h 24  textConName;
textField -text ""  ttgRigConSingleBoneName;

button -l "载入总控制器" -c  "ttgLaodSingleBnConNamProc;"   ;
setParent..;
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtSingleConradius;
  rowColumnLayout -nc 2 -cw 1 250 -cw 2 150 ;
    text -l "选择关节，创建单段骨骼IK绑定";

    button -l "创建单段骨骼IK绑定"   -c "gtVehicleIkStrechProc;" but7;
   
    showWindow gtsingleBoneIKConWin;   
}

/////////////////////////
global proc ttgLaodSingleBnConNamProc(){
string $sel[]=`ls -sl`;
textField  -e -text $sel[0] ttgRigConSingleBoneName;
}
//////////////
global proc gtVehicleIkStrechProc(){
string $carN=`textField -q -tx ttgRigConSingleBoneName`;
float $scale=`floatSliderGrp -q -v gtSingleConradius`;

string $sel[]=`ls -sl`;

for($i=0;$i<size($sel);$i++){
    select -r ($sel[$i]);
    pickWalk -d down;
    string $endBn[]=`ls -sl`;
    string $tm[];
int $t=`tokenize ($sel[$i]) "_" $tm`;
string $aa=$tm[1];
if($aa!="r"||$aa!="l"){
    $aa="m";}

select -r ($sel[$i]+".rotatePivot") ;
select -add ($endBn[0]+".rotatePivot") ;
ikHandle -sol ikRPsolver;
rename ($sel[$i]+"_"+$aa+"_BnIkhandle");

curve -d 1 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 
-p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 
-p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 
-p 0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 
-k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19  -n   ($sel[$i]+"_"+$aa+"_con0");

group -n ($sel[$i]+"_"+$aa+"_con0Grp");
scale -r $scale $scale $scale;
makeIdentity -apply true -t 0 -r 0 -s 1 -n 0;

select -r ($sel[$i]);
select -add ($sel[$i]+"_"+$aa+"_con0Grp");
delete `parentConstraint`;

select -r ($sel[$i]+"_"+$aa+"_con0");
select -add ($sel[$i]);
parentConstraint -mo;

string $shape[]=`listRelatives -s ($sel[$i]+"_"+$aa+"_con0")`;
setAttr ($shape[0]+".overrideEnabled") 1;
if($aa=="l"){setAttr ($shape[0]+".overrideColor") 22;}
else if ($aa=="r"){setAttr ($shape[0]+".overrideColor") 13;}
else{setAttr ($shape[0]+".overrideColor") 6;}

curve -d 1 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 
-p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 
-p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 
-p 0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 
-k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19  -n   ($sel[$i]+"_"+$aa+"_con1");

group -n ($sel[$i]+"_"+$aa+"_con1Grp");
scale -r $scale $scale $scale;
makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 -pn 0;
select -r ($sel[$i]+"_"+$aa+"_BnIkhandle");
select -add ($sel[$i]+"_"+$aa+"_con1Grp");
delete `parentConstraint`;

select -r ($sel[$i]);
select -add ($sel[$i]+"_"+$aa+"_con1Grp");
delete `orientConstraint`;


select -r ($sel[$i]+"_"+$aa+"_con1");
select -add ($sel[$i]+"_"+$aa+"_BnIkhandle");
parentConstraint -mo;

string $shape[]=`listRelatives -s ($sel[$i]+"_"+$aa+"_con1")`;
setAttr ($shape[0]+".overrideEnabled") 1;
if($aa=="l"){setAttr ($shape[0]+".overrideColor") 22;}
else if ($aa=="r"){setAttr ($shape[0]+".overrideColor") 13;}
else{setAttr ($shape[0]+".overrideColor") 6;}

distanceDimension -sp 0.1 -1 0.1 -ep 0.1 1 0.1 ;
string $disnam[]=`ls -sl`;
select -r $disnam[0];
pickWalk -d up;
rename ($sel[$i]+"_BnDisLoc1");
select -r  $disnam[1];
rename ($sel[$i]+"_BnDis");
string $disShape[]=`listRelatives -s ($sel[$i]+"_BnDis")`;
string $loc[]=`listConnections -s 1 -d 0  ($disShape[0]+".startPoint")`;
rename ($loc[0]) ($sel[$i]+"_BnDisLoc2");


select -r ($sel[$i]+"_"+$aa+"_con1");
select -add ($sel[$i]+"_BnDisLoc1");
pointConstraint;

select -r ($sel[$i]+"_"+$aa+"_con0");
select -add ($sel[$i]+"_BnDisLoc2");
pointConstraint;

shadingNode -asUtility multiplyDivide -n ($sel[$i]+"_BnDidMulti");
connectAttr -f ($disShape[0]+".distance") ($sel[$i]+"_BnDidMulti.input1X");
setAttr ($sel[$i]+"_BnDidMulti.operation") 2;

shadingNode -asUtility multiplyDivide -n ($sel[$i]+"_BnStrechMulti");
int $ex=`objExists ($carN)`;
if($ex==1){connectAttr -f ($carN+".scaleX") ($sel[$i]+"_BnStrechMulti.input1X");}
else{setAttr ($sel[$i]+"_BnStrechMulti.input1X") 1;}

shadingNode -asUtility multiplyDivide -n ($sel[$i]+"_BnStrechMultiB");
connectAttr -f ($sel[$i]+"_BnStrechMulti.outputX") ($sel[$i]+"_BnStrechMultiB.input1X");
int $ex=`objExists ($carN+"_LocAll")`;
if($ex==1)connectAttr -f ($carN+"_LocAll.scaleX") ($sel[$i]+"_BnStrechMultiB.input2X");

shadingNode -asUtility multiplyDivide -n ($sel[$i]+"_BnStrechMultiA");
connectAttr -f ($sel[$i]+"_BnStrechMultiB.outputX") ($sel[$i]+"_BnStrechMultiA.input1X");
float $dis=`getAttr ($disShape[0]+".distance")`;
setAttr ($sel[$i]+"_BnStrechMultiA.input2X") $dis;

connectAttr -f ($sel[$i]+"_BnStrechMultiA.outputX") ($sel[$i]+"_BnDidMulti.input2X");
select -r ($sel[$i]+"_"+$aa+"_con1");
addAttr -ln "strech"  -at double  -min 0.1 -max 10 -dv 5 -k 1;
addAttr -ln "strechLimit"  -at double  -min 0.01 -max 5 -dv 0.5 -k 1;

shadingNode -asUtility condition -n ($sel[$i]+"_BnStrechConditionA");
connectAttr -f ($sel[$i]+"_BnDidMulti.outputX")  ($sel[$i]+"_BnStrechConditionA.firstTerm");
connectAttr -f ($sel[$i]+"_BnDidMulti.outputX")  ($sel[$i]+"_BnStrechConditionA.colorIfTrueR");
connectAttr -f ($sel[$i]+"_"+$aa+"_con1.strech") ($sel[$i]+"_BnStrechConditionA.secondTerm");
connectAttr -f ($sel[$i]+"_"+$aa+"_con1.strech") ($sel[$i]+"_BnStrechConditionA.colorIfFalseR");
setAttr ($sel[$i]+"_BnStrechConditionA.operation") 4;

shadingNode -asUtility condition -n ($sel[$i]+"_BnStrechConditionB");
connectAttr -f ($sel[$i]+"_BnStrechConditionA.outColorR")  ($sel[$i]+"_BnStrechConditionB.firstTerm");
connectAttr -f ($sel[$i]+"_BnStrechConditionA.outColorR")  ($sel[$i]+"_BnStrechConditionB.colorIfTrueR");
connectAttr -f ($sel[$i]+"_"+$aa+"_con1.strechLimit") ($sel[$i]+"_BnStrechConditionB.secondTerm");
connectAttr -f ($sel[$i]+"_"+$aa+"_con1.strechLimit") ($sel[$i]+"_BnStrechConditionB.colorIfFalseR");
setAttr ($sel[$i]+"_BnStrechConditionB.operation") 2;

connectAttr -f ($sel[$i]+"_BnStrechConditionB.outColorR") ($sel[$i]+".scaleX");
select -r ($sel[$i]+"_BnDisLoc1") ($sel[$i]+"_BnDisLoc2") ($sel[$i]+"_BnDis") ;
select -add ($sel[$i]+"_"+$aa+"_BnIkhandle");
group -n ($sel[$i]+"_BnDonotMoveGrp");
setAttr ($sel[$i]+"_BnDonotMoveGrp.visibility") 0;
setAttr -lock true ($sel[$i]+"_BnDonotMoveGrp.v");
    }
}
/////////////////////////////////
//位移延迟表达式动画窗口
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtTrsDelayExpressionWin(){
if(`window -ex gtTrsDelayExpressionWin`) deleteUI -window gtTrsDelayExpressionWin;
window -wh 400 400 -title "老船动画吧-位移延迟表达式动画窗口" gtTrsDelayExpressionWin;
columnLayout -adj 1 gtColL;

text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1359\"";
formLayout gtform;
string $onc="intSliderGrp -e -en 1 gtfloatF3";
string $ofc="intSliderGrp -e -en 0 gtfloatF3";
text -l "轴向："  gttexta;
checkBox -l "X" -v 0 checkB3;
checkBox -l "Y" -v 0 checkB4;
checkBox -l "Z" -v 0 checkB5;

floatSliderGrp -l "最小随机值"  -v 1 -min 0.1 -max 10 -fmn 0.01 -fmx 10000 -f 1 floatF1;
floatSliderGrp -l "最大随机值"  -v 1 -min 0.1 -max 10 -fmn 0.01 -fmx 10000 -f 1 floatF2;

button -l "创建位移延迟表达式" -c "gtTrsWave" but1;
frameLayout -l "使用说明" -cll 1 -cl 1 gtFrameLayout;

///////////////////////////////////////
string $shuoming="";
    $shuoming+="延迟表达式：X/Y/Z复选框\n确定需要制作延迟表达式动画的属性；\n需要按顺序选择制作位移延迟表达式的物体\n";
   
text -l ($shuoming) text1;
//help frameLayout;
formLayout -e
-af gttexta left 5 -af gttexta right 5 -af gttexta top 10 

-af checkB3 left 50 -ap checkB3 right 0 43 -ac checkB3 top 5 gttexta
-ac checkB4 left 4 checkB3 -ap checkB4 right 0 70 -ac checkB4 top 5 gttexta
-ac checkB5 left 4 checkB4 -af checkB5 right 10 -ac checkB5 top 5 gttexta

-af floatF1 left 10 -af floatF1 right 10 -ac floatF1 top 5 checkB3
-af floatF2 left 10 -af floatF2 right 10 -ac floatF2 top  5 floatF1

-af but1 left 10 -af but1 right 10 -ac but1 top  5 floatF2

-af gtFrameLayout left 10 -af gtFrameLayout right 10 -ac gtFrameLayout top 4 but1 
  gtform;

showWindow gtTrsDelayExpressionWin;
}
//////////////
global proc gtTrsWave(){

float $min=`floatSliderGrp -q -v floatF1`;
float $max=`floatSliderGrp -q -v floatF2`;
int $x=`checkBox -q -v checkB3`;
int $y=`checkBox -q -v checkB4`;
int $z=`checkBox -q -v checkB5`;

/////////////////////////////////////
string $sel[]=`ls -sl`;

//////////////////////////////    
int $state=`objExists ($sel[0]+".trsDelay")`;
if($state!=1)addAttr -ln "trsDelay" -k 1 -at double  $sel[0];

int $state=`objExists ($sel[0]+".trsDelay_bias")`;
if($state!=1)addAttr -ln "trsDelay_bias" -at double -dv -0.005 -min -0.05 -max 0.05 $sel[0];

int $state=`objExists ($sel[0]+".extraTrs")`;
if($state!=1)addAttr -ln "extraTrs" -k 1 -at double -dv 0 $sel[0];

int $state=`objExists ($sel[0]+".delayExpressionTrsOn")`;
if($state!=1)addAttr -ln "delayExpressionTrsOn" -k 1 -at bool -dv 1 $sel[0];

shadingNode -asUtility condition -n ($sel[0]+"conditionexpTrs");
connectAttr -f  ($sel[0]+".delayExpressionTrsOn") ($sel[0]+"conditionexpTrs.firstTerm");
setAttr ($sel[0]+"conditionexpTrs.secondTerm") 1;

for($i=1;$i<size($sel);$i++){
float $noise=rand($min,$max);
select -r ($sel[$i]);
group -n ($sel[$i]+"TrsGrp");
float $pivot[]=`xform -q -ws -t ($sel[$i])`;
move -a ($pivot[0]) ($pivot[1]) ($pivot[2]) ($sel[$i]+"TrsGrp.scalePivot") ($sel[$i]+"TrsGrp.rotatePivot") ;

string $exp="int $time=`currentTime  -q`;\nfloat $delay=`getAttr ";
	$exp+=($sel[0]);
	$exp+=".trsDelay`;\nfloat $delay_b=`getAttr ";
	$exp+=($sel[0]);
	$exp+=".trsDelay_bias`;\nfloat $extrarot=`getAttr ";
	$exp+=($sel[0]);
	$exp+=".extraTrs`;\nfloat $t[]=`getAttr -t ($time-$delay*(";
	$exp+=($i);
	$exp+="+";
	$exp+=($i);
	$exp+="*";
	$exp+=($i);
	$exp+="*$delay_b";
	$exp+=")) ";
	$exp+=($sel[0]);
	$exp+=".translate`;\n";
		
if($x==1){
	$exp+=($sel[$i]);
	$exp+="TrsGrp.tx=$t[0]*(1+$extrarot*";
	$exp+=($i);
	$exp+=")*";
	$exp+=($noise);
	$exp+=";\n";
	}
if($y==1){
	$exp+=($sel[$i]);
	$exp+="TrsGrp.ty=$t[1]*(1+$extrarot*";
	$exp+=($i);
	$exp+=")*";
	$exp+=($noise);
	$exp+=";\n";
	}
if($z==1){
	$exp+=($sel[$i]);
	$exp+="TrsGrp.tz=$t[2]*(1+$extrarot*";
	$exp+=($i);
	$exp+=")*";
	$exp+=($noise);
	$exp+=";\n";
	}
expression -s $exp -ae 1 -uc all -n ($sel[0]+"_exp_trs"+$i);
connectAttr -f ($sel[0]+"conditionexpTrs.outColorR") ($sel[0]+"_exp_trs"+$i+".nodeState");
            }  
}
//////////////////////////////
//弹簧生成器绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSpringCreateWin(){
   if(`window -ex gtSpringCreateWin`) deleteUI -window gtSpringCreateWin;
    window -wh 400 200 -t "老船角色绑定-☆-弹簧生成器绑定工具!" gtSpringCreateWin;
    columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1362\"";
        separator gtsep1;
        rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

      text -l "点击工具按钮，创建弹簧定位器\n编辑定位器弹簧生成属性";

    button -l "创建竖直弹簧"   -c "gtVehicleCurveSpringProc;" -h 40 but7;
    setParent..;
    
        separator gtsep2;
            rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

      text -l "选择曲线，沿曲线创建弹簧曲线\n编辑定位器弹簧生成属性";

    button -l "创建曲线路径弹簧"   -c "gtVehicleCurveSpringProcA;" -h 40 but8;
    setParent..;
    
        separator gtsep3;
            rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

      text -l "播放动画，弹簧曲线达到预期要求\n复制曲线，然后点击按钮删除表达式";

    button -l "删除弹簧曲线表达式"   -c "gtDeleteCurveSpringExp;" -h 40 but9;
    setParent..;
    
        separator gtsep4;
   
    showWindow gtSpringCreateWin;   
}
/////////////////////////
global proc gtDeleteCurveSpringExp(){
select -r "*gtSpringCurveExp";
string $expNode[]=`ls -sl -type "expression"`;
delete $expNode;
}
////////////////////////////
global proc gtVehicleCurveSpringProc(){

float $scale=1;
spaceLocator -p 0 0 0;
string $loc[]=`ls -sl`;
addAttr -ln "gtRadius"  -at double  -min 0.001 -max 1000 -dv 1 -k 1;
addAttr -ln "gtGrow"  -at double  -min 0.001 -max 1000 -dv 1 -k 1;
addAttr -ln "gtSpeed"  -at double  -min 0.001 -max 1000 -dv 1 -k 1;

string $exp="";
    $exp+=$loc[0]+".tx=sin(time*5*"+($loc[0])+".gtSpeed)*"+($loc[0])+".gtRadius*"+$scale+";\n";
    $exp+=$loc[0]+".tz=cos(time*5*"+($loc[0])+".gtSpeed)*"+($loc[0])+".gtRadius*"+$scale+";\n";
    $exp+=$loc[0]+".ty=time*0.5*"+($loc[0])+".gtGrow*"+$scale+";\n";
	expression -s $exp  -ae 1 -uc all -n ($loc[0]+"springLocExp");
	float $p[]=`getAttr ($loc[0]+".translate")`;
	select -cl;
curve -d 1 -p 0 0 0 -p ($p[0]) ($p[1]) ($p[2]) -k 0 -k 1 ;
string $c[]=`ls -sl`;
string $exp="";
    $exp+="if(frame==1){select -r ";
    $exp+=($c[0]);
    $exp+=".cv[1:10000000];\ndelete;}\n";
    $exp+="float $p[]=`getAttr (\""+$loc[0]+".translate\")`;\n";
    $exp+="curve -a  -p ($p[0]) ($p[1]) ($p[2]) (\"";
    $exp+=($c[0]);
    $exp+="\");\n";
	expression -s $exp  -ae 1 -uc all -n ($loc[0]+"gtSpringCurveExp");	
	select -r ($loc[0]);
}
/////////////////////////////

global proc gtVehicleCurveSpringProcA(){
string $curve[]=`ls -sl`;
int $endF=`playbackOptions -q -max`;
if($endF<200)
playbackOptions -e -min 1 -max 200;

for($i=0;$i<size($curve);$i++){
    
spaceLocator -p 0 0 0;
string $locA[]=`ls -sl`;

addAttr -ln "gtRadius"  -at double  -min 0.001 -max 1000 -dv 1 -k 1;
addAttr -ln "gtSpeed"  -at double  -min 0.001 -max 1000 -dv 3 -k 1;
select -r ($locA[0]);
group -n ($locA[0]+"RotGrp");
group -n ($locA[0]+"Grp");

select -r ($locA[0]+"Grp");
select -add ($curve[$i]);

string $animP=`pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU 1 -endTimeU 200`;
connectAttr -f ($locA[0]+".gtRadius") ($locA[0]+".translateZ");
string $inputs[]=`listConnections -s 1 -d 0 ($animP+".uValue")`;
select -r $inputs[0];
keyTangent -itt linear -ott linear $inputs[0];

string $exp="";
      $exp+=$locA[0]+"RotGrp.rotateX=frame*10*"+$locA[0]+".gtSpeed;\n";
	expression -s $exp  -ae 1 -uc all -o ($locA[0]) -n ($locA[0]+"springLocExp");
	
spaceLocator -p 0 0 0;
string $loc[]=`ls -sl`;
select -r ($locA[0]);
select -add ($loc[0]);
pointConstraint;
select -r ($locA[0]+"Grp");
select -add ($loc[0]);
group -n ($curve[$i]+"notMoveGrp");
setAttr ($loc[0]+".visibility") 0;
setAttr -lock true ($loc[0]+".visibility");

	currentTime -e 1;
	float $p[]=`getAttr ($loc[0]+".translate")`;
	select -cl;
curve -d 1 -p 0 0 0 -p ($p[0]) ($p[1]) ($p[2]) -k 0 -k 1 ;
string $c[]=`ls -sl`;
string $exp="";
    $exp+="if(frame==1){select -r ";
    $exp+=($c[0]);
    $exp+=".cv[1:10000000];\ndelete;}\n";
    $exp+="float $p[]=`getAttr (\""+$loc[0]+".translate\")`;\n";
    $exp+="curve -a  -p ($p[0]) ($p[1]) ($p[2]) (\"";
    $exp+=($c[0]);
    $exp+="\");\n";
	expression -s $exp  -ae 1 -uc all -o ($c[0]) -n ($loc[0]+"gtSpringCurveExp");	
	select -r ($locA[0]);
    }
}
/////////////////////////
//简单样条IK骨骼拉伸绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSimpleSplineIksetupWin(){

if(`window -ex gtSimpleSplineIksetupWin`) deleteUI  -window gtSimpleSplineIksetupWin;
window -wh 400 200 -title "老船动画吧-简单样条IK骨骼拉伸绑定工具" gtSimpleSplineIksetupWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1365\"";
	rowColumnLayout -nc 3 -cw 1 100 -cw 2 150 -cw 3 150;
text -l "   "  -h 24  textConName;
textField -text ""  ttgRigConName;

button -l "载入总控制器" -c  "ttgLaodConNamProc;"   loadConNamBut;
setParent..;
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtConradius;
	separator -style double;
	
	radioButtonGrp -en 1 -bgc 0.3 0.4 0.5 -l "控制器数量：" -nrb  4 -la4 "二" "三" "四" "五"  -cw5 120 80 80 80 80  -select 2 gtsplineConTypeBox;
	button  -l "创建自动曲线样条绑定" -c "gtSimpleiksplinesetup" gtIntsecoundBnButA;
	
separator -style double;	
showWindow gtSimpleSplineIksetupWin;
}
///////////////////////////
global proc ttgLaodConNamProc(){

string $gtCname="";
string $sel[]=`ls -sl`;
string $teststring=$sel[0];
$gtCname=$teststring;
textField  -e -text $gtCname ttgRigConName;
}
//////////////////////////
global proc  gtSimpleiksplinesetup(){
    float $scl=`floatSliderGrp -q -v gtConradius`;
    
string $sel[]=`ls -sl`;

for($ii=0;$ii<size($sel);$ii++){
    
string $gttextm[];
int $gttextnum=`tokenize ($sel[$ii]) "_" $gttextm`;
string $gtside=($gttextm[1]);

string $childs[]=`listRelatives -c -ad ($sel[$ii])`;
int $segment=size($childs);
string $endbn=$childs[0];
select -r $childs[1];
select -add $endbn;
delete `orientConstraint`;
select -r $endbn;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
string $basebn=$sel[$ii];

select -r ($basebn);
    
string $iksel[]=`ls -sl`;
    $basebn=$iksel[0];
    select -r ($basebn);
    pickWalk -d down;
    string $elbowbn[]=`ls -sl`;
    for($i=1;$i<$segment;$i++){
            pickWalk -d down;
    }
    string $end[]=`ls -sl`;
    string $endbn=$end[0];

int $cv=`radioButtonGrp -q -sl gtsplineConTypeBox`;

select -r ($basebn+".rotatePivot") ;
select -add ($endbn+".rotatePivot") ;
ikHandle -sol ikSplineSolver -pcv false -ns ($cv);

string $ikhandle[]=`ls -sl`;
select -r ($ikhandle[0]);
rename ($sel[$ii]+"ikhandle");

string $endEffector[]=`listConnections -s 1 -d 0 ($sel[$ii]+"ikhandle.endEffector")`;
setAttr ($endEffector[0]+".visibility") 0;
setAttr -lock true ($endEffector[0]+".v");

string $curve[]=`listConnections -d 0 -s 1 ($sel[$ii]+"ikhandle.inCurve")`;
select -r ($curve[0]);
//////////////////////////
if($cv==1){
    group -em; xform -os -piv 0 0 0;
rename ($curve[0]+"ikConGrp");

select -r ($curve[0]+".cv[0:1]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc0");
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
delete `parentConstraint`;
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
parent;


curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con0");
group -n ($curve[0]+"ConGrp0");
group -n ($curve[0]+"ConGrpA0");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA0.sz") -1;
    setAttr ($curve[0]+"ConGrpA0.sx") -1;
    setAttr ($curve[0]+"ConGrpA0.sy") -1;
}
select -r ($basebn);
select -add ($curve[0]+"ConGrpA0");
delete `parentConstraint`;
select -r ($curve[0]+"loc0");
select -add ($curve[0]+"Con0");
parent;


select -r ($curve[0]+"ConGrpA0");
select -add ($curve[0]+"ikConGrp");
parent;
setAttr ($curve[0]+"loc0.visibility") 0;
setAttr -lock true ($curve[0]+"loc0.v");

setAttr -lock true ($curve[0]+"Con0.sx");
setAttr -lock true ($curve[0]+"Con0.sy");
setAttr -lock true ($curve[0]+"Con0.sz");
setAttr -lock true ($curve[0]+"Con0.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con0")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
 ///////////////// 
 
 select -r ($curve[0]+".cv[2:3]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster1");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc1");
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
delete `parentConstraint`;
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con1");
group -n ($curve[0]+"ConGrp1");
group -n ($curve[0]+"ConGrpA1");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA1.sz") -1;
    setAttr ($curve[0]+"ConGrpA1.sy") -1;
    setAttr ($curve[0]+"ConGrpA1.sx") -1;
}
select -r ($endbn);
select -add ($curve[0]+"ConGrpA1");
delete `parentConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"Con1");
parent;

select -r ($curve[0]+"ConGrpA1");
select -add ($curve[0]+"Con0");
parent;
setAttr ($curve[0]+"loc1.visibility") 0;
setAttr -lock true ($curve[0]+"loc1.v");

setAttr -lock true ($curve[0]+"Con1.sx");
setAttr -lock true ($curve[0]+"Con1.sy");
setAttr -lock true ($curve[0]+"Con1.sz");
setAttr -lock true ($curve[0]+"Con1.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con1")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }           
}

//////////////////////////////////////////
if($cv==2){
 
 select -r ($curve[0]);
duplicate -rr;
rename ($curve[0]+"temp");

select -r ($curve[0]+"temp.cv[2]") ;
newCluster " -envelope 1";

rename ($curve[0]+"clusterTemp0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"locTemp0");
select -r ($curve[0]+"clusterTemp0");
select -add ($curve[0]+"locTemp0");
delete `parentConstraint`;

float $pos1[]=`xform -q -ws -t ($basebn)`;
float $pos2[]=`xform -q -ws -t ($curve[0]+"locTemp0")`;
float $pos3[]=`xform -q -ws -t ($endbn)`;
select -cl;
joint -p $pos1[0] $pos1[1] $pos1[2] -n ($curve[0]+"tempBn0") ;
joint -p $pos2[0] $pos2[1] $pos2[2] -n ($curve[0]+"tempBn1") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn0") ;
joint -p $pos3[0] $pos3[1] $pos3[2] -n ($curve[0]+"tempBn2") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn1") ; ;

group -em; xform -os -piv 0 0 0;
rename ($curve[0]+"ikConGrp");

select -r ($curve[0]+".cv[0:1]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc0");
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
delete `parentConstraint`;
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
parent;


curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con0");
group -n ($curve[0]+"ConGrp0");
group -n ($curve[0]+"ConGrpA0");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA0.sz") -1;
    setAttr ($curve[0]+"ConGrpA0.sx") -1;
    setAttr ($curve[0]+"ConGrpA0.sy") -1;
    select -r ($curve[0]+"tempBn0") ; 
    rename ($curve[0]+"tempBnA0") ; 
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBnB0") ; 
    joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBn0") ;    
    select -r ($curve[0]+"tempBnA0") ($curve[0]+"tempBnB0"); 
    delete;
}
select -r ($curve[0]+"tempBn0") ; 
select -add ($curve[0]+"ConGrpA0");
delete `parentConstraint`;
select -r ($curve[0]+"loc0");
select -add ($curve[0]+"Con0");
parent;


select -r ($curve[0]+"ConGrpA0");
select -add ($curve[0]+"ikConGrp");
parent;
setAttr ($curve[0]+"loc0.visibility") 0;
setAttr -lock true ($curve[0]+"loc0.v");

setAttr -lock true ($curve[0]+"Con0.sx");
setAttr -lock true ($curve[0]+"Con0.sy");
setAttr -lock true ($curve[0]+"Con0.sz");
setAttr -lock true ($curve[0]+"Con0.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con0")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
 ///////////////// 
 select -r ($curve[0]+".cv[2]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster1");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc1");
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
delete `parentConstraint`;
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con1");
group -n ($curve[0]+"ConGrp1");
group -n ($curve[0]+"ConGrpA1");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA1.sz") -1;
    setAttr ($curve[0]+"ConGrpA1.sx") -1;
    setAttr ($curve[0]+"ConGrpA1.sy") -1;
}
select -r ($curve[0]+"tempBn0") ; 
select -add ($curve[0]+"tempBn1") ; 
select -add ($curve[0]+"ConGrpA1");
delete `parentConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"ConGrpA1");
delete `pointConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"Con1");
parent;

select -r ($curve[0]+"ConGrpA1");
select -add ($curve[0]+"Con0");
parent;
setAttr ($curve[0]+"loc1.visibility") 0;
setAttr -lock true ($curve[0]+"loc1.v");

setAttr -lock true ($curve[0]+"Con1.sx");
setAttr -lock true ($curve[0]+"Con1.sy");
setAttr -lock true ($curve[0]+"Con1.sz");
setAttr -lock true ($curve[0]+"Con1.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con1")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }    
///////////////////////////////////////////

   select -r ($curve[0]+".cv[3:4]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster2");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc2");
select -r ($curve[0]+"cluster2");
select -add ($curve[0]+"loc2");
delete `parentConstraint`;
select -r ($curve[0]+"cluster2");
select -add ($curve[0]+"loc2");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con2");
group -n ($curve[0]+"ConGrp2");
group -n ($curve[0]+"ConGrpA2");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA2.sz") -1;
    setAttr ($curve[0]+"ConGrpA2.sx") -1;
    setAttr ($curve[0]+"ConGrpA2.sy") -1;
}
select -r ($endbn);
select -add ($curve[0]+"ConGrpA2");
delete `parentConstraint`;

select -r ($curve[0]+"loc2");
select -add ($curve[0]+"Con2");
parent;


select -r ($curve[0]+"ConGrpA2");
select -add ($curve[0]+"Con1");
parent;
setAttr ($curve[0]+"loc2.visibility") 0;
setAttr -lock true ($curve[0]+"loc2.v");

setAttr -lock true ($curve[0]+"Con2.sx");
setAttr -lock true ($curve[0]+"Con2.sy");
setAttr -lock true ($curve[0]+"Con2.sz");
setAttr -lock true ($curve[0]+"Con2.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con2")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
select -r ($curve[0]+"tempBn0") ;   
select -add ($curve[0]+"temp") ;  
select -add   ($curve[0]+"locTemp0") ; 
delete;                      
}

//////////////////////////////////////////
if($cv==3){
select -r ($curve[0]);
duplicate -rr;
rename ($curve[0]+"temp");

select -r ($curve[0]+"temp.cv[2]") ;
newCluster " -envelope 1";

rename ($curve[0]+"clusterTemp0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"locTemp0");
select -r ($curve[0]+"clusterTemp0");
select -add ($curve[0]+"locTemp0");
delete `parentConstraint`;

select -r ($curve[0]+"temp.cv[3]") ;
newCluster " -envelope 1";

rename ($curve[0]+"clusterTemp1");
spaceLocator -p 0 0 0;
rename ($curve[0]+"locTemp1");
select -r ($curve[0]+"clusterTemp1");
select -add ($curve[0]+"locTemp1");
delete `parentConstraint`;

float $pos1[]=`xform -q -ws -t ($basebn)`;
float $pos2[]=`xform -q -ws -t ($curve[0]+"locTemp0")`;
float $pos3[]=`xform -q -ws -t ($curve[0]+"locTemp1")`;
float $pos4[]=`xform -q -ws -t ($endbn)`;
select -cl;
joint -p $pos1[0] $pos1[1] $pos1[2] -n ($curve[0]+"tempBn0") ;
joint -p $pos2[0] $pos2[1] $pos2[2] -n ($curve[0]+"tempBn1") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn0") ;
joint -p $pos3[0] $pos3[1] $pos3[2] -n ($curve[0]+"tempBn2") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn1") ; ;
joint -p $pos4[0] $pos4[1] $pos4[2] -n ($curve[0]+"tempBn3") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn2") ; 

////////////////////////
group -em; xform -os -piv 0 0 0;
rename ($curve[0]+"ikConGrp");

select -r ($curve[0]+".cv[0:1]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc0");
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
delete `parentConstraint`;
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
parent;


curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con0");
group -n ($curve[0]+"ConGrp0");
group -n ($curve[0]+"ConGrpA0");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA0.sz") -1;
    setAttr ($curve[0]+"ConGrpA0.sx") -1;
    setAttr ($curve[0]+"ConGrpA0.sy") -1;
       select -r ($curve[0]+"tempBn0") ; 
    rename ($curve[0]+"tempBnA0") ; 
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBnB0") ; 
    joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBn0") ;    
    select -r ($curve[0]+"tempBnA0") ($curve[0]+"tempBnB0"); 
    delete;
}
select -r ($curve[0]+"tempBn0") ;  
select -add ($curve[0]+"ConGrpA0");
delete `parentConstraint`;
select -r ($curve[0]+"loc0");
select -add ($curve[0]+"Con0");
parent;

select -r ($curve[0]+"ConGrpA0");
select -add ($curve[0]+"ikConGrp");
parent;
setAttr ($curve[0]+"loc0.visibility") 0;
setAttr -lock true ($curve[0]+"loc0.v");

setAttr -lock true ($curve[0]+"Con0.sx");
setAttr -lock true ($curve[0]+"Con0.sy");
setAttr -lock true ($curve[0]+"Con0.sz");
setAttr -lock true ($curve[0]+"Con0.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con0")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
 ///////////////// 
 
 select -r ($curve[0]+".cv[2]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster1");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc1");
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
delete `parentConstraint`;
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con1");
group -n ($curve[0]+"ConGrp1");
group -n ($curve[0]+"ConGrpA1");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA1.sz") -1;
     setAttr ($curve[0]+"ConGrpA1.sx") -1;
      setAttr ($curve[0]+"ConGrpA1.sy") -1;
}
select -r ($curve[0]+"tempBn0") ; 
select -add ($curve[0]+"tempBn1") ; 
select -add ($curve[0]+"ConGrpA1");
delete `parentConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"ConGrpA1");
delete `pointConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"Con1");
parent;

select -r ($curve[0]+"ConGrpA1");
select -add ($curve[0]+"Con0");
parent;
setAttr ($curve[0]+"loc1.visibility") 0;
setAttr -lock true ($curve[0]+"loc1.v");

setAttr -lock true ($curve[0]+"Con1.sx");
setAttr -lock true ($curve[0]+"Con1.sy");
setAttr -lock true ($curve[0]+"Con1.sz");
setAttr -lock true ($curve[0]+"Con1.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con1")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
/////////////////////////////////////
 select -r ($curve[0]+".cv[3]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster2");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc2");
select -r ($curve[0]+"cluster2");
select -add ($curve[0]+"loc2");
delete `parentConstraint`;
select -r ($curve[0]+"cluster2");
select -add ($curve[0]+"loc2");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con2");
group -n ($curve[0]+"ConGrp2");
group -n ($curve[0]+"ConGrpA2");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA2.sz") -1;
    setAttr ($curve[0]+"ConGrpA2.sx") -1;
    setAttr ($curve[0]+"ConGrpA2.sy") -1;
}
select -r ($curve[0]+"tempBn1") ; 
select -add ($curve[0]+"tempBn2") ; 
select -add ($curve[0]+"ConGrpA2");
delete `parentConstraint`;

select -r ($curve[0]+"loc2");
select -add ($curve[0]+"ConGrpA2");
delete `pointConstraint`;

select -r ($curve[0]+"loc2");
select -add ($curve[0]+"Con2");
parent;

select -r ($curve[0]+"ConGrpA2");
select -add ($curve[0]+"Con1");
parent;
setAttr ($curve[0]+"loc2.visibility") 0;
setAttr -lock true ($curve[0]+"loc2.v");

setAttr -lock true ($curve[0]+"Con2.sx");
setAttr -lock true ($curve[0]+"Con2.sy");
setAttr -lock true ($curve[0]+"Con2.sz");
setAttr -lock true ($curve[0]+"Con2.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con2")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }      
      
///////////////////////////////////////////

   select -r ($curve[0]+".cv[4:5]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster3");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc3");
select -r ($curve[0]+"cluster3");
select -add ($curve[0]+"loc3");
delete `parentConstraint`;
select -r ($curve[0]+"cluster3");
select -add ($curve[0]+"loc3");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con3");
group -n ($curve[0]+"ConGrp3");
group -n ($curve[0]+"ConGrpA3");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA3.sz") -1;
    setAttr ($curve[0]+"ConGrpA3.sx") -1;
    setAttr ($curve[0]+"ConGrpA3.sy") -1;
}
select -r ($endbn);
select -add ($curve[0]+"ConGrpA3");
delete `parentConstraint`;

select -r ($curve[0]+"loc3");
select -add ($curve[0]+"Con3");
parent;

select -r ($curve[0]+"ConGrpA3");
select -add ($curve[0]+"Con2");
parent;
setAttr ($curve[0]+"loc3.visibility") 0;
setAttr -lock true ($curve[0]+"loc3.v");

setAttr -lock true ($curve[0]+"Con3.sx");
setAttr -lock true ($curve[0]+"Con3.sy");
setAttr -lock true ($curve[0]+"Con3.sz");
setAttr -lock true ($curve[0]+"Con3.v");

string $shape[]=`listRelatives -s ($curve[0]+"Con3")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }   
    
select -r ($curve[0]+"tempBn0") ;   
select -add ($curve[0]+"temp") ;  
select -add   ($curve[0]+"locTemp0") ; 
select -add   ($curve[0]+"locTemp1") ; 
delete;        
}
/////////////////////////
if($cv==4){
select -r ($curve[0]);
duplicate -rr;
rename ($curve[0]+"temp");

select -r ($curve[0]+"temp.cv[2]") ;
newCluster " -envelope 1";

rename ($curve[0]+"clusterTemp0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"locTemp0");
select -r ($curve[0]+"clusterTemp0");
select -add ($curve[0]+"locTemp0");
delete `parentConstraint`;

select -r ($curve[0]+"temp.cv[3]") ;
newCluster " -envelope 1";

rename ($curve[0]+"clusterTemp1");
spaceLocator -p 0 0 0;
rename ($curve[0]+"locTemp1");
select -r ($curve[0]+"clusterTemp1");
select -add ($curve[0]+"locTemp1");
delete `parentConstraint`;

select -r ($curve[0]+"temp.cv[4]") ;
newCluster " -envelope 1";

rename ($curve[0]+"clusterTemp2");
spaceLocator -p 0 0 0;
rename ($curve[0]+"locTemp2");
select -r ($curve[0]+"clusterTemp2");
select -add ($curve[0]+"locTemp2");
delete `parentConstraint`;

float $pos1[]=`xform -q -ws -t ($basebn)`;
float $pos2[]=`xform -q -ws -t ($curve[0]+"locTemp0")`;
float $pos3[]=`xform -q -ws -t ($curve[0]+"locTemp1")`;
float $pos4[]=`xform -q -ws -t ($curve[0]+"locTemp2")`;
float $pos5[]=`xform -q -ws -t ($endbn)`;
select -cl;
joint -p $pos1[0] $pos1[1] $pos1[2] -n ($curve[0]+"tempBn0") ;
joint -p $pos2[0] $pos2[1] $pos2[2] -n ($curve[0]+"tempBn1") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn0") ;
joint -p $pos3[0] $pos3[1] $pos3[2] -n ($curve[0]+"tempBn2") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn1") ; ;
joint -p $pos4[0] $pos4[1] $pos4[2] -n ($curve[0]+"tempBn3") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn2") ; 
joint -p $pos4[0] $pos4[1] $pos4[2] -n ($curve[0]+"tempBn4") ; 
joint -e -zso -oj xyz -sao yup ($curve[0]+"tempBn3") ;  
   
////////////////////// 
group -em; xform -os -piv 0 0 0;
rename ($curve[0]+"ikConGrp");

select -r ($curve[0]+".cv[0:1]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc0");
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
delete `parentConstraint`;
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
parent;

curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con0");
group -n ($curve[0]+"ConGrp0");
group -n ($curve[0]+"ConGrpA0");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA0.sz") -1;
    setAttr ($curve[0]+"ConGrpA0.sx") -1;
    setAttr ($curve[0]+"ConGrpA0.sy") -1;
       select -r ($curve[0]+"tempBn0") ; 
    rename ($curve[0]+"tempBnA0") ; 
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBnB0") ; 
    joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBn0") ;    
    select -r ($curve[0]+"tempBnA0") ($curve[0]+"tempBnB0"); 
    delete;
}
select -r ($curve[0]+"tempBn0") ;
select -add ($curve[0]+"ConGrpA0");
delete `parentConstraint`;
select -r ($curve[0]+"loc0");
select -add ($curve[0]+"Con0");
parent;


select -r ($curve[0]+"ConGrpA0");
select -add ($curve[0]+"ikConGrp");
parent;
setAttr ($curve[0]+"loc0.visibility") 0;
setAttr -lock true ($curve[0]+"loc0.v");

setAttr -lock true ($curve[0]+"Con0.sx");
setAttr -lock true ($curve[0]+"Con0.sy");
setAttr -lock true ($curve[0]+"Con0.sz");
setAttr -lock true ($curve[0]+"Con0.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con0")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
 /////////////////  
 select -r ($curve[0]+".cv[2]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster1");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc1");
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
delete `parentConstraint`;
select -r ($curve[0]+"cluster1");
select -add ($curve[0]+"loc1");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con1");
group -n ($curve[0]+"ConGrp1");
group -n ($curve[0]+"ConGrpA1");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA1.sz") -1;
    setAttr ($curve[0]+"ConGrpA1.sy") -1;
    setAttr ($curve[0]+"ConGrpA1.sx") -1;
}
select -r ($curve[0]+"tempBn0") ; 
select -add ($curve[0]+"tempBn1") ; 
select -add ($curve[0]+"ConGrpA1");
delete `parentConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"ConGrpA1");
delete `pointConstraint`;

select -r ($curve[0]+"loc1");
select -add ($curve[0]+"Con1");
parent;


select -r ($curve[0]+"ConGrpA1");
select -add ($curve[0]+"Con0");
parent;
setAttr ($curve[0]+"loc1.visibility") 0;
setAttr -lock true ($curve[0]+"loc1.v");

setAttr -lock true ($curve[0]+"Con1.sx");
setAttr -lock true ($curve[0]+"Con1.sy");
setAttr -lock true ($curve[0]+"Con1.sz");
setAttr -lock true ($curve[0]+"Con1.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con1")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }   
/////////////////////////////////////
 select -r ($curve[0]+".cv[3]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster2");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc2");
select -r ($curve[0]+"cluster2");
select -add ($curve[0]+"loc2");
delete `parentConstraint`;
select -r ($curve[0]+"cluster2");
select -add ($curve[0]+"loc2");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con2");
group -n ($curve[0]+"ConGrp2");
group -n ($curve[0]+"ConGrpA2");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA2.sz") -1;
    setAttr ($curve[0]+"ConGrpA2.sx") -1;
    setAttr ($curve[0]+"ConGrpA2.sy") -1;
}
select -r ($curve[0]+"tempBn1") ; 
select -add ($curve[0]+"tempBn2") ; 
select -add ($curve[0]+"ConGrpA2");
delete `parentConstraint`;

select -r ($curve[0]+"loc2");
select -add ($curve[0]+"ConGrpA2");
delete `pointConstraint`;

select -r ($curve[0]+"loc2");
select -add ($curve[0]+"Con2");
parent;

select -r ($curve[0]+"ConGrpA2");
select -add ($curve[0]+"Con1");
parent;
setAttr ($curve[0]+"loc2.visibility") 0;
setAttr -lock true ($curve[0]+"loc2.v");

setAttr -lock true ($curve[0]+"Con2.sx");
setAttr -lock true ($curve[0]+"Con2.sy");
setAttr -lock true ($curve[0]+"Con2.sz");
setAttr -lock true ($curve[0]+"Con2.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con2")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }      
/////////////////////////
 select -r ($curve[0]+".cv[4]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster3");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc3");
select -r ($curve[0]+"cluster3");
select -add ($curve[0]+"loc3");
delete `parentConstraint`;
select -r ($curve[0]+"cluster3");
select -add ($curve[0]+"loc3");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con3");
group -n ($curve[0]+"ConGrp3");
group -n ($curve[0]+"ConGrpA3");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA3.sz") -1;
    setAttr ($curve[0]+"ConGrpA3.sx") -1;
    setAttr ($curve[0]+"ConGrpA3.sy") -1;
}
select -r ($curve[0]+"tempBn2") ; 
select -add ($curve[0]+"tempBn3") ; 
select -add ($curve[0]+"ConGrpA3");
delete `parentConstraint`;

select -r ($curve[0]+"loc3");
select -add ($curve[0]+"ConGrpA3");
delete `pointConstraint`;

select -r ($curve[0]+"loc3");
select -add ($curve[0]+"Con3");
parent;

select -r ($curve[0]+"ConGrpA3");
select -add ($curve[0]+"Con2");
parent;
setAttr ($curve[0]+"loc3.visibility") 0;
setAttr -lock true ($curve[0]+"loc3.v");

setAttr -lock true ($curve[0]+"Con3.sx");
setAttr -lock true ($curve[0]+"Con3.sy");
setAttr -lock true ($curve[0]+"Con3.sz");
setAttr -lock true ($curve[0]+"Con3.v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con3")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }        
///////////////////////////////////////////
   select -r ($curve[0]+".cv[5:6]") ;
newCluster " -envelope 1";

rename ($curve[0]+"cluster4");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc4");
select -r ($curve[0]+"cluster4");
select -add ($curve[0]+"loc4");
delete `parentConstraint`;
select -r ($curve[0]+"cluster4");
select -add ($curve[0]+"loc4");
parent;

 curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con4");
group -n ($curve[0]+"ConGrp4");
group -n ($curve[0]+"ConGrpA4");

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA4.sz") -1;
    setAttr ($curve[0]+"ConGrpA4.sx") -1;
    setAttr ($curve[0]+"ConGrpA4.sy") -1;
}
select -r ($endbn);
select -add ($curve[0]+"ConGrpA4");
delete `parentConstraint`;

select -r ($curve[0]+"loc4");
select -add ($curve[0]+"Con4");
parent;

select -r ($curve[0]+"ConGrpA4");
select -add ($curve[0]+"Con3");
parent;
setAttr ($curve[0]+"loc4.visibility") 0;
setAttr -lock true ($curve[0]+"loc4.v");

setAttr -lock true ($curve[0]+"Con4.sx");
setAttr -lock true ($curve[0]+"Con4.sy");
setAttr -lock true ($curve[0]+"Con4.sz");
setAttr -lock true ($curve[0]+"Con4.v");

string $shape[]=`listRelatives -s ($curve[0]+"Con4")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }    
select -r ($curve[0]+"tempBn0") ;   
select -add ($curve[0]+"temp") ;  
select -add   ($curve[0]+"locTemp0") ; 
select -add   ($curve[0]+"locTemp1") ; 
select -add   ($curve[0]+"locTemp2") ; 

delete;                
}
/////////////////////////////////////////////
select -r ($curve[0]);
arclen -ch 1;

string $shapeAA[]=`listRelatives -s ($curve[0])`;
string $infoA[]=`listConnections -s 0 -d 1 ($shapeAA[0]+".worldSpace[0]")`;
float $legUplen=`getAttr ($infoA[0]+".arcLength")`;

shadingNode -asUtility multiplyDivide -n ($curve[0]+"disMulF") ;

string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
    connectAttr -f ($conN+".sy") ($curve[0]+"disMulF.input1X");
}else{
setAttr ($curve[0]+"disMulF.input1X") 1;}

setAttr ($curve[0]+"disMulF.input2X") $legUplen ;

shadingNode -asUtility multiplyDivide -n ($curve[0]+"disMul") ;
shadingNode -asUtility condition -n ($curve[0]+"disCnd") ;
connectAttr -f ($infoA[0]+".arcLength") ($curve[0]+"disMul.input1X");
setAttr ($curve[0]+"disMul.operation") 2;

connectAttr -f  ($curve[0]+"disMulF.outputX") ($curve[0]+"disMul.input2X");

connectAttr -f ($curve[0]+"disMul.outputX") ($curve[0]+"disCnd.firstTerm");
connectAttr -f ($curve[0]+"disMul.outputX") ($curve[0]+"disCnd.colorIfTrueR");

setAttr ($curve[0]+"disCnd.secondTerm") 1;
setAttr ($curve[0]+"disCnd.operation") 2;

shadingNode -asUtility condition -n ($curve[0]+"disclampCnd") ;
connectAttr -f ($curve[0]+"disCnd.outColorR")  ($curve[0]+"disclampCnd.firstTerm");
connectAttr -f ($curve[0]+"disCnd.outColorR")  ($curve[0]+"disclampCnd.colorIfTrueR");

setAttr ($curve[0]+"disclampCnd.operation") 4;

select -r ($curve[0]);
addAttr -ln "strech"  -at double  -min 1 -max 10 -dv 1.2 -k 1;
addAttr -ln "shortlength"  -at double  -min 0.01 -max 10 -dv 1 -k 1;

connectAttr -f ($curve[0]+".shortlength") ($curve[0]+"disCnd.secondTerm");
connectAttr -f ($curve[0]+".shortlength") ($curve[0]+"disCnd.colorIfFalseR");

connectAttr -f ($curve[0]+".strech")  ($curve[0]+"disclampCnd.secondTerm");
connectAttr -f ($curve[0]+".strech")  ($curve[0]+"disclampCnd.colorIfFalseR");
string $ik[]=`listConnections -s 0 -d 1 ($shapeAA[0]+".worldSpace[0]")`;

string $ikHandle=$ik[1];
string $startjoint[]=`listConnections -s 1 -d 0 ($ikHandle+".startJoint")`;
string $endeffector[]=`listConnections -s 1 -d 0 ($ikHandle+".endEffector")`;
select -r ($endeffector);
pickWalk -d up;
string $endjoint[]=`ls -sl`;

string $curentjoint=($startjoint[0]);
string $selectbn="select -r ";
while($curentjoint != $endjoint[0]){
    $selectbn+=($curentjoint+" ");
    select -r $curentjoint;
    pickWalk -d down;
    string $joint[]=`ls -sl`;
    $curentjoint=$joint[0];
}
    $selectbn+=($endjoint[0]+";");
eval $selectbn;
string $bn[]=`ls -sl`;
for($i=0;$i<size($bn);$i++){
    connectAttr -f ($curve[0]+"disclampCnd.outColorR") ($bn[$i]+".scaleX");
}
/////////////////////////
if($cv==1){
select -r ($curve[0]+"Con1");     
}
if($cv==2){
select -r ($curve[0]+"Con2"); }
if($cv==3){
select -r ($curve[0]+"Con3"); }
if($cv==4){
select -r ($curve[0]+"Con4"); }

string $rollCon[]=`ls -sl`;
setAttr -lock 0 ($rollCon[0]+".rx");
setAttr -lock 0 ($rollCon[0]+".ry");
setAttr -lock 0 ($rollCon[0]+".rz");
select -r ($rollCon[0]);

addAttr -ln "twistMulti"  -at double  -min 0.1 -max 5 -dv 1 -k 0;
addAttr -ln "strech"  -at double  -min 1 -max 10 -dv 1.2 -k 1;
addAttr -ln "shortlength"  -at double  -min 0.01 -max 10 -dv 1 -k 1;

shadingNode -asUtility plusMinusAverage -n  ($sel[$ii]+"iksplinetwistPlus");
connectAttr -f ($rollCon[0]+".rx") ($sel[$ii]+"iksplinetwistPlus.input1D[0]");
print ($cv);
for($j=1;$j<$cv;$j++){
    connectAttr -f ($curve[0]+"Con"+$j+".rx") ($sel[$ii]+"iksplinetwistPlus.input1D["+$j+"]");
}
shadingNode -asUtility multiplyDivide -n ($sel[$ii]+"iksplinetwistmul");
connectAttr -f  ($sel[$ii]+"iksplinetwistPlus.output1D") ($sel[$ii]+"iksplinetwistmul.input1X");
connectAttr -f ($rollCon[0]+".twistMulti") ($sel[$ii]+"iksplinetwistmul.input2X");
connectAttr -f ($sel[$ii]+"iksplinetwistmul.outputX") ($ikHandle+".twist");
connectAttr -f   ($curve[0]+"Con0.rx") ($ikHandle+".roll");
connectAttr -f ($rollCon[0]+".strech") ($curve[0]+".strech");
connectAttr -f ($rollCon[0]+".shortlength") ($curve[0]+".shortlength");
///////////////////
select -r ($ikHandle) ;
select -add ($curve[0]) ;
group -n ($sel[$ii]+"iksplineGrp");
group -n  ($sel[$ii]+"DonotmoveConGrp");
setAttr ($sel[$ii]+"iksplineGrp.visibility") 0;
setAttr -lock true ($sel[$ii]+"iksplineGrp.v");
    }    
print "......................IK CON DONW...........................";
}
/////////////////////////
//老船IKFK无缝切换绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtIkfkAutoSwitchProcWin(){
if(`window -ex gtIkfkAutoSwitchProcWin`) deleteUI -window gtIkfkAutoSwitchProcWin;
window -wh 400 450 -t "老船角色绑定-☆-老船IKFK无缝切换绑定工具!!!"  gtIkfkAutoSwitchProcWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1384\"";
separator -style single;
separator -style single;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "属性……" -bgc 0.2 0.15 0.1  ;
text -l "" -bgc 0.2 0.15 0.1  ;
textFieldGrp  -cw2 100 130 -l "控制器" -tx "" -ed 0 gtIKFKconText;
button -l "载入" -c "gtIkfkLoadikfkConProc" ;

textFieldGrp  -cw2 100 130 -l "属性" -tx "" -ed 0 gtIKFKattraText;
button -l "载入" -c "gtIkfkLoadikfkAttraProc" ;
setParent..;
separator -style single;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "IK……"  -bgc 0.2 0.15 0.1  ;
text -l "" -bgc 0.2 0.15 0.1  ;
textFieldGrp  -cw2 100 130 -l "IK" -tx "" -ed 0 gtIKconText;
button -l "载入" -c "gtIkfkLoadikConProc";
textFieldGrp  -cw2 100 130 -l "极向量" -tx "" -ed 0 gtPolerconText;
button -l "载入" -c "gtIkfkLoadPolerConProc";

setParent..;
separator -style single;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "FK……" -bgc 0.2 0.15 0.1  ;
text -l "" -bgc 0.2 0.15 0.1  ;
textFieldGrp  -cw2 100 130 -l "控制器一" -tx "" -ed 0 gtshoulderFKconText;
button -l "载入" -c "gtIkfkLoadFkShoulderConProc";

textFieldGrp  -cw2 100 130 -l "控制器二" -tx "" -ed 0 gtelbowFKconText;
button -l "载入" -c "gtIkfkLoadFkElbowConProc";

textFieldGrp  -cw2 100 130 -l "控制器三" -tx "" -ed 0 gtwristFKconText;
button -l "载入" -c "gtIkfkLoadFkWristConProc";

setParent..;
separator -style single;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "关节……" -bgc 0.2 0.15 0.1  ;
text -l ""  -bgc 0.2 0.15 0.1  ;
textFieldGrp  -cw2 100 130 -l "关节一" -tx "" -ed 0 gtIKFKBoneText;
button -l "载入" -c "gtIkfkLoadikfkBoneProc" ;

textFieldGrp  -cw2 100 130 -l "关节二" -tx "" -ed 0 gtIKFKBoneElbowText;
button -l "载入" -c "gtIkfkLoadikfkBoneElbowProc" ;

textFieldGrp  -cw2 100 130 -l "关节三" -tx "" -ed 0 gtIKFKBoneWristText;
button -l "载入" -c "gtIkfkLoadikfkBoneWristProc" ;
setParent..;
separator -style single;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "----选择IKFK切换控制器----"; 
button -l "载入-ADV-名称预设" -c "gtIkfkLoadADVikfkConProc";
textFieldGrp  -cw2 100 130 -l "角色名称：" -tx "" -ed 1 gtIKFKCnameText;
button -l "创建IKFK无缝切换绑定" -c "ttgIkfkAutoSwitchProc";
setParent..;
showWindow  gtIkfkAutoSwitchProcWin;
}
////////////////////
global proc gtIkfkLoadikfkConProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtIKFKconText;
}
////////////////////
global proc gtIkfkLoadikfkAttraProc(){
    string $sel[]=`channelBox -q -sma mainChannelBox`;
    textFieldGrp  -e -tx  $sel[0] gtIKFKattraText;
}
////////////////////
global proc gtIkfkLoadikfkBoneProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtIKFKBoneText;
}
////////////////////
global proc gtIkfkLoadikfkBoneElbowProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtIKFKBoneElbowText;
}
////////////////////
global proc gtIkfkLoadikfkBoneWristProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtIKFKBoneWristText;
}
////////////////////
global proc gtIkfkLoadikConProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtIKconText;
}
////////////////////
global proc gtIkfkLoadPolerConProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtPolerconText;
}
////////////////////
global proc gtIkfkLoadFkShoulderConProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtshoulderFKconText;
}
////////////////////
global proc gtIkfkLoadFkElbowConProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtelbowFKconText;
}
////////////////////
global proc gtIkfkLoadFkWristConProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtwristFKconText;
}
/////////////////////
global proc gtIkfkLoadADVikfkConProc(){
    string $sel[]=`ls -sl`;
    string $armL[]={"IKArm_L","PoleArm_L","FKShoulder_L","FKElbow_L","FKWrist_L","Shoulder_L","Elbow_L","Wrist_L"};
    string $armR[]={"IKArm_R","PoleArm_R","FKShoulder_R","FKElbow_R","FKWrist_R","Shoulder_R","Elbow_R","Wrist_R"};
    string $legL[]={"IKLeg_L","PoleLeg_L","FKHip_L","FKKnee_L","FKAnkle_L","Hip_L","Knee_L","Ankle_L"};
    string $legR[]={"IKLeg_R","PoleLeg_R","FKHip_R","FKKnee_R","FKAnkle_R","Hip_R","Knee_R","Ankle_R"};
       
    textFieldGrp  -e -tx  $sel[0] gtIKFKconText;
    textFieldGrp  -e -tx  "FKIKBlend" gtIKFKattraText;
    string $conNam[];
    if($sel[0]=="FKIKArm_L")$conNam=$armL;
    if($sel[0]=="FKIKArm_R")$conNam=$armR;
    if($sel[0]=="FKIKLeg_L")$conNam=$legL;
    if($sel[0]=="FKIKLeg_R")$conNam=$legR;
    textFieldGrp  -e -tx  $conNam[0] gtIKconText;
    textFieldGrp  -e -tx  $conNam[1] gtPolerconText;

    textFieldGrp  -e -tx  $conNam[2] gtshoulderFKconText;
    textFieldGrp  -e -tx  $conNam[3] gtelbowFKconText;
    textFieldGrp  -e -tx  $conNam[4] gtwristFKconText; 
       
    textFieldGrp  -e -tx  $conNam[5] gtIKFKBoneText;
    textFieldGrp  -e -tx  $conNam[6] gtIKFKBoneElbowText;
    textFieldGrp  -e -tx  $conNam[7] gtIKFKBoneWristText; 
}
////////////////
global proc ttgIkfkAutoSwitchProc(){
    string $pref=`textFieldGrp  -q -tx gtIKFKCnameText`;
    string $ikfkCon=`textFieldGrp  -q -tx gtIKFKconText`;
    string $ikCon=`textFieldGrp  -q -tx gtIKconText`;
    string $polerCon=`textFieldGrp  -q -tx gtPolerconText`;
    string $fkShoulderCon=`textFieldGrp  -q -tx gtshoulderFKconText`;
    string $fkElbowCon=`textFieldGrp  -q -tx gtelbowFKconText`;
    string $fkWristCon=`textFieldGrp  -q -tx gtwristFKconText`;

    string $bindBn=`textFieldGrp  -q -tx gtIKFKBoneText`;
    string $switchAttr=`textFieldGrp  -q -tx gtIKFKattraText`;
    
    string $elbowBn=`textFieldGrp  -q -tx gtIKFKBoneElbowText`;
    string $wristBn=`textFieldGrp  -q -tx gtIKFKBoneWristText`;
        
    select -r $ikfkCon;
    addAttr -ln "ikfkSwitch"  -at "enum" -en "ik:fk:" ;
    setAttr -cb 1 ($ikfkCon+".ikfkSwitch");
    
    spaceLocator -p 0 0 0 -n ($ikfkCon+"loc");
    select -r ($ikfkCon+"loc");
    select -add ($ikfkCon);
    parent;
    setAttr ($ikfkCon+"loc.translateZ") 0;
    setAttr ($ikfkCon+"loc.translateY") 0;
    setAttr ($ikfkCon+"loc.translateX") 0;

    setAttr ($ikfkCon+"loc.visibility") 0;
    setAttr -lock true ($ikfkCon+"loc.v");
    addAttr -ln ($ikfkCon+"gtState"+$pref) -at bool ($ikfkCon+"loc");

    select -r $ikCon;
    addAttr -ln "gtWristIk"  -at bool ;    
    select -r $ikfkCon;
    addAttr -ln "gtWristIk"   -at bool ;
    connectAttr -f ($ikfkCon+".gtWristIk") ($ikCon+".gtWristIk");
    
    select -r $polerCon;
    addAttr -ln "gtPolerIk"  -at bool ;    
    select -r $ikfkCon;
    addAttr -ln "gtPolerIk"   -at bool ;
    connectAttr -f ($ikfkCon+".gtPolerIk") ($polerCon+".gtPolerIk");

    select -r $fkShoulderCon;
    addAttr -ln "gtShoulderFk"  -at bool ;    
    select -r $ikfkCon;
    addAttr -ln "gtShoulderFk"   -at bool ;
    connectAttr -f ($ikfkCon+".gtShoulderFk") ($fkShoulderCon+".gtShoulderFk");
    
    select -r $fkElbowCon;
    addAttr -ln "gtElbowFk"  -at bool ;    
    select -r $ikfkCon;
    addAttr -ln "gtElbowFk"   -at bool ;
    connectAttr -f ($ikfkCon+".gtElbowFk") ($fkElbowCon+".gtElbowFk");  
      
    select -r $fkWristCon;
    addAttr -ln "gtWristFk"  -at bool ;    
    select -r $ikfkCon;
    addAttr -ln "gtWristFk"   -at bool ;
    connectAttr -f ($ikfkCon+".gtWristFk") ($fkWristCon+".gtWristFk");        
                
    select -r $ikCon;
    select -add $polerCon;
    select -add $fkShoulderCon;
    select -add $fkElbowCon;  
    select -add $fkWristCon;     
    string $conA[]=`ls -sl`;
 for($i=0;$i<size($conA);$i++){
    select -r $conA[$i];
    duplicate -rr;
    rename ($conA[$i]+"AimXform");
    select -r $conA[$i];
    addAttr -ln ("aimXformObj")  -at bool ;
    select -r ($conA[$i]+"AimXform");
    addAttr -ln ("aimXformObj")  -at bool ;
    connectAttr -f ($conA[$i]+".aimXformObj") ($conA[$i]+"AimXform.aimXformObj");
    setAttr -lock 0  ($conA[$i]+"AimXform.v");
    setAttr ($conA[$i]+"AimXform.v") 0;
        setAttr -lock 0  ($conA[$i]+"AimXform.tx");
        setAttr -lock 0  ($conA[$i]+"AimXform.ty");
        setAttr -lock 0  ($conA[$i]+"AimXform.tz");
        setAttr -lock 0  ($conA[$i]+"AimXform.rx");
        setAttr -lock 0  ($conA[$i]+"AimXform.ry");
        setAttr -lock 0  ($conA[$i]+"AimXform.rz");
        
    setAttr -lock 1 ($conA[$i]+"AimXform.v");  
    string $childs[]=`listRelatives -c -fullPath -type "transform" ($conA[$i]+"AimXform")`; 
    int $size=size($childs);
    if($size>0)delete $childs;  
    } 
    spaceLocator -p 0 0 0 -n ($polerCon+"IkfkSwitchLoc"); 
    group -n ($polerCon+"IkfkSwitchLocGrp"); 
    select -r $fkElbowCon;
    select -add ($polerCon+"IkfkSwitchLocGrp");
    delete`parentConstraint`;
    select -r ($polerCon+"IkfkSwitchLocGrp");
    select -add $fkElbowCon;
    parent;

    string $aimObj[]=`listConnections -s 0 -d 1 ($polerCon+".aimXformObj")`;
    select -r ($polerCon+"IkfkSwitchLoc");    
    select -add  ($aimObj[0]);  
    parentConstraint;
    setAttr ($polerCon+"IkfkSwitchLocGrp.visibility") 0;
    setAttr -lock true ($polerCon+"IkfkSwitchLocGrp.visibility");
    
    string $aimObj[]=`listConnections -s 0 -d 1 ($ikCon+".aimXformObj")`;
    select -r $wristBn;    
    select -add  ($aimObj[0]);  
    parentConstraint -mo;    
    
    string $aimObj[]=`listConnections -s 0 -d 1 ($fkShoulderCon+".aimXformObj")`;
    select -r $bindBn;    
    select -add  ($aimObj[0]);  
    parentConstraint  -mo;     
    
    string $aimObj[]=`listConnections -s 0 -d 1 ($fkElbowCon+".aimXformObj")`;
    select -r $elbowBn;    
    select -add  ($aimObj[0]);  
    parentConstraint  -mo; 
    
    string $aimObj[]=`listConnections -s 0 -d 1 ($fkWristCon+".aimXformObj")`;
    select -r $wristBn;    
    select -add  ($aimObj[0]);  
    parentConstraint  -mo; 
    
    float $pa[]=`xform -q -a -ws -t $wristBn`;
    float $pb[]=`xform -q -a -ws -t $elbowBn`;
    float $dis=mag(<<$pa[0],$pa[1],$pa[2]>>-<<$pb[0],$pb[1],$pb[2]>>);
    float $conSize=$dis*0.05;
        
    circle -ch 0 -o on -nr 0 1 0 -r $conSize -n ($bindBn+"IKFKAutoCon") ;
    group -n ($bindBn+"IKFKAutoConGrp") ;
    
    select -r ($bindBn+"IKFKAutoCon.cv[0]") ($bindBn+"IKFKAutoCon.cv[2]") ($bindBn+"IKFKAutoCon.cv[4]") ($bindBn+"IKFKAutoCon.cv[6]");
    scale -r -p 0cm 0cm 0cm 0.2 0.2 0.2 ;
    string $shape[]=`listRelatives -s ($bindBn+"IKFKAutoCon")`;
    setAttr ($shape[0]+".overrideEnabled") 1;
    setAttr ($shape[0]+".overrideColor") 22;
        
    select -r ($ikfkCon+".cv[0:10000]");
    newCluster " -envelope 1";
    rename ($bindBn+"IKFKAutoConGrpTemp") ;
    select -r ($bindBn+"IKFKAutoConGrpTemp") ;
    select -add ($bindBn+"IKFKAutoConGrp") ;
    delete`parentConstraint`;
    delete  ($bindBn+"IKFKAutoConGrpTemp") ;
    select -r ($ikfkCon);
    select -add ($bindBn+"IKFKAutoConGrp") ;
    parentConstraint -mo;
    scaleConstraint;
    
    select -r ($bindBn+"IKFKAutoCon") ;
    addAttr -ln ($bindBn+"gtIkfkState")  -at bool ;
    select -r $ikfkCon;
    addAttr -ln ($bindBn+"gtIkfkStateABC")   -at bool ;
    connectAttr -f ($ikfkCon+"."+$bindBn+"gtIkfkStateABC") ($bindBn+"IKFKAutoCon."+$bindBn+"gtIkfkState");     

string $gtScript="";
       $gtScript+="string $ikCnam=\"";
       $gtScript+=$ikfkCon+"gtState"+$pref+"\";\n";
       
       $gtScript+="string $gtIkFkJob=`scriptJob  -e \"SelectionChanged\" (\""+$bindBn+"IKFKAutoCon\") -kws`;\n";
       
       $gtScript+="global proc "+$bindBn+"IKFKAutoCon(){\n";
       $gtScript+="string $ikFkSel[]=`ls -type \"transform\" -sl`;\n";
       $gtScript+="if(size($ikFkSel)==0) {return;}\n";
       $gtScript+=" $gtstate=`objExists  ($ikFkSel[0]+\"."+$bindBn+"gtIkfkState\")`;\n";
       $gtScript+=" if($gtstate==1){\n";
       $gtScript+=" string $ikfkC[]=`listConnections -s 1 -d 0  ($ikFkSel[0]+\"."+$bindBn+"gtIkfkState\")`;\n";      
       $gtScript+="select -r $ikfkC[0];\n";
       $gtScript+="int $state=`getAttr  ($ikfkC[0]+\".\"+\""+$switchAttr+"\")`;\n";
       $gtScript+="if($state<5){\n";
       $gtScript+=$bindBn+"gtSnapeIkToFk;}\n";
       $gtScript+="if($state>=5){\n";
       $gtScript+=$bindBn+"gtSnapeFkToIk;\n";
       $gtScript+="}}}\n";
       
       $gtScript+="string $gtIKFKlocA[]=`ls -type \"locator\"`;\n";
       $gtScript+="string $gtIKFKlocP=\"\";\n";
       $gtScript+="for($i=0;$i<size($gtIKFKlocA);$i++){\n";
       $gtScript+="string $parent[]=`listRelatives -p ($gtIKFKlocA[$i])`;\n";
       $gtScript+="int $ex=`objExists ($parent[0]+\".\"+$ikCnam)`;\n";
       $gtScript+="if($ex==1){\n";
       $gtScript+="string $ikfkC[]=`listRelatives -p $parent[0]`;\n";
       $gtScript+="$gtIKFKlocP=$ikfkC[0];}}\n";

       $gtScript+="$gtAttrIkFkJobs=`scriptJob  -attributeChange ($gtIKFKlocP+\".ikfkSwitch\") \""+$bindBn+"GtIKFKProc\" -kws`;\n";
      
       $gtScript+="global proc "+$bindBn+"GtIKFKProc(){\n";
       $gtScript+="string $selIkfk[]=`ls -sl`;\n";
       $gtScript+="int $ikfk=`getAttr ($selIkfk[0]+\".ikfkSwitch\")`;\n";
       $gtScript+="if($ikfk==0){\n";
       $gtScript+=$bindBn+"gtSnapeIkToFk;}\n";
       $gtScript+="else{\n";
       $gtScript+=$bindBn+"gtSnapeFkToIk;\n";
       $gtScript+="}}\n";
              
       $gtScript+="global proc "+$bindBn+"gtSnapeIkToFk(){\n";
       $gtScript+="string $ikFkSel[]=`ls -type \"transform\" -sl`;\n";
              
       $gtScript+="string $handIk[] =`listConnections -s 0 -d 1 ($ikFkSel[0] +\".gtWristIk\")`;\n";
       $gtScript+="string $polerIk[] =`listConnections -s 0 -d 1 ($ikFkSel[0] +\".gtPolerIk\")`;\n";
       
       $gtScript+="string $handIkConXform[] =`listConnections -s 0 -d 1 ($handIk[0] +\".aimXformObj\")`;\n";
       $gtScript+="string $polerConXform[] =`listConnections -s 0 -d 1 ($polerIk[0] +\".aimXformObj\")`;\n";
       $gtScript+="float $handIkPos[]=`xform -q -a -ws -t $handIkConXform[0]`;\n";
       $gtScript+="float $handIkRot[]=`getAttr ($handIkConXform[0]+\".rotate\")`;\n";
       $gtScript+="setAttr -type float3 ($handIk[0] +\".r\") ($handIkRot[0]) ($handIkRot[1]) ($handIkRot[2]);\n";
       $gtScript+="xform -a -ws -t  $handIkPos[0] $handIkPos[1] $handIkPos[2] ($handIk[0]);\n";

       $gtScript+="float $polerIkPos[]=`xform -q -a -ws -t $polerConXform[0]`;\n";
       $gtScript+="xform -a -ws -t  $polerIkPos[0] $polerIkPos[1] $polerIkPos[2] ($polerIk[0]);\n";
       $gtScript+="setAttr ($ikFkSel[0]+\"."+$switchAttr+"\") 10;\n}\n";

       $gtScript+="global proc "+$bindBn+"gtSnapeFkToIk(){\n";
       $gtScript+="string $ikFkSel[]=`ls -type \"transform\" -sl`;\n";

       $gtScript+="string $shoulderFk[] =`listConnections -s 0 -d 1 ($ikFkSel[0] +\".gtShoulderFk\")`;\n";
       $gtScript+="string $elbowFk[] =`listConnections -s 0 -d 1 ($ikFkSel[0] +\".gtElbowFk\")`;\n";
       $gtScript+="string $handFk[] =`listConnections -s 0 -d 1 ($ikFkSel[0] +\".gtWristFk\")`;\n";
       
       $gtScript+="string $shoulerFkXform[] =`listConnections -s 0 -d 1 ($shoulderFk[0] +\".aimXformObj\")`;\n";
       $gtScript+="string $elbowFkXform[] =`listConnections -s 0 -d 1 ($elbowFk[0] +\".aimXformObj\")`;\n";
       $gtScript+="string $handFkXform[] =`listConnections -s 0 -d 1 ($handFk[0] +\".aimXformObj\")`; \n";      
       $gtScript+="float $rot[]=`getAttr ($shoulerFkXform[0]+\".rotate\")`;\n";
       $gtScript+="setAttr -type float3 ($shoulderFk[0]+\".r\") ($rot[0]) ($rot[1]) ($rot[2]);\n";
       $gtScript+="float $rot[]=`getAttr ($elbowFkXform[0]+\".rotate\")`;\n";
       $gtScript+="setAttr -type float3 ($elbowFk[0]+\".r\") ($rot[0]) ($rot[1]) ($rot[2]);\n";       
       $gtScript+="float $rot[]=`getAttr ($handFkXform[0]+\".rotate\")`;\n";
       $gtScript+="setAttr -type float3 ($handFk[0]+\".r\") ($rot[0]) ($rot[1]) ($rot[2]); \n";       
       $gtScript+="setAttr ($ikFkSel[0]+\"."+$switchAttr+"\") 0;\n}\n";       
       
       scriptNode  -beforeScript  $gtScript -n  ($bindBn+"gtIkFkScript");
       setAttr ($bindBn+"gtIkFkScript.scriptType")  1;                     
}
/////////////////////////////
//老船ADV手掌IK控制器轴向编辑绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtAdvHandOrientProcWin(){
if(`window -ex gtAdvHandOrientProcWin`) deleteUI -window gtAdvHandOrientProcWin;
window -wh 400 250 -t "老船角色绑定-☆-老船ADV手掌IK控制器轴向编辑绑定工具!!!"  gtAdvHandOrientProcWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1389\"";
separator -style single;
text -l "如果IK手柄不是IK控制器的子物体，需要手动载入IK手柄\n--------每次只能编辑一个IK控制器---------" -h 35 ;
separator -style single;
string $onM="checkBox -e -v 1 -en 1  gtIKhandleMirror;";
string $ofM="checkBox -e -v 0 -en 0 gtIKhandleMirror;";
radioButtonGrp -en 1  -l "编辑方式" -nrb  2 -la2 "局部坐标" "世界坐标" -on1 ($onM) -of1 ($ofM) -cw3 120 120 120  -select 1 gtIkHandleType;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
textFieldGrp  -cw2 100 130 -l "IK手柄" -tx "" -ed 0 gtIKhandleText;
button -l "载入IK手柄" -c "gtIkHandleLoadProc" ;
setParent..;

rowColumnLayout -nc 4 -cw 1 40 -cw 2  100 -cw 3 100 -cw 4 140;
text -l "";
checkBox -l "位移反向对称" -v 0  gtIKhandleMirror;
checkBox -l "adv专用" -v 0  gtIKhandleAdv;
button -l "编辑选择IK控制器轴向" -c "gtAdvHandOrientProc" ;
setParent..;
separator -style single;
floatSliderGrp -l "当前控制器缩放比例："  -f 1 -v 1 -min 0.02 -max 5  gtAddConradius;

rowColumnLayout -nc 2 -cw 1 240 -cw 2  140 ;
text -l "选择总控制器……";
button -l "添加两个总控制器" -c "gtAddThreeConProc" ;
setParent..;
separator -style single;
showWindow  gtAdvHandOrientProcWin;
}
/////////////////
global proc gtIkHandleLoadProc(){
    string $sel[]=`ls -sl`;
    textFieldGrp  -e -tx  $sel[0] gtIKhandleText;
}
////////////////////

global proc gtAdvHandOrientProc(){
int $style=`radioButtonGrp -q  -select  gtIkHandleType`;
string $ik=`textFieldGrp  -q -tx gtIKhandleText`;
int $mirror=`checkBox -q -v gtIKhandleMirror`;
int $advA=`checkBox -q -v gtIKhandleAdv`;

string $sel[]=`ls -sl`;
int $num;
if($ik==""){
    $num=size($sel);
}else{
    $num=1;
}

for($i=0;$i<$num;$i++){
    string $con=$sel[$i];
    string $childs[]=`listRelatives -c -type "transform" ($con)`;
    int $ex=`objExists ($con+"childsGrp")`;
    if($ex==0){
    select -r $childs;
    group -n ($con+"childsGrp");
    parent -world;
    select -r $childs;
    }else{
    select -r ($con+"childsGrp");
    parent -world;
    string $childs[]=`listRelatives -c -type "transform" ($con+"childsGrp")`;
    select -r $childs;
    }
    string $childs[]=`ls -sl`;
    
    if($ik==""){
    string $ikHandle="";
    for($j=0;$j<size($childs);$j++){
        string $type=`nodeType ($childs[$j])`;
        if($type=="ikHandle")$ikHandle=($childs[$j]);
    }
    if($ikHandle!=""){
        select -r $ikHandle;
    }
    }else{
     select -r $ik;
    }
    string $ikH[]=`ls -sl`;
    int $size=size($ikH);
    if($size==0)error "没有找到IK手柄";
    
    if($advA==1){
        string $outputs[]=`listConnections -s 0 -d 1 ($con+".rotate")`;  
        int $ex=`objExists ($outputs[0]+".target[0].targetTranslate")`;
        if($ex==1){
        string $inputB[]=`listConnections -s 1 -d 0 ($outputs[0]+".target[0].targetTranslate")`; 
        string $switchA[]=`listConnections -s 1 -d 0 -p 1 ($outputs[0]+"."+$inputB[0]+"W0")`; 
        string $switchB[]=`listConnections -s 1 -d 0 -p 1 ($outputs[0]+"."+$con+"W1")`;
        string $consObj[]=`listConnections -s 0 -d 1 ($outputs[0]+".constraintRotateX")`;
 
        select -r ($con);
            addAttr -ln ("inputB")  -dt "string" ;
            setAttr -type "string" ($con+".inputB") ($inputB[0]);
            addAttr -ln ("switchA")  -dt "string" ;
            setAttr -type "string" ($con+".switchA") ($switchA[0]);            
            addAttr -ln ("switchB")  -dt "string" ;
            setAttr -type "string" ($con+".switchB") ($switchB[0]);
            
            addAttr -ln ("consObj")  -dt "string" ;
            setAttr -type "string" ($con+".consObj") ($consObj[0]);
            } else{
           string $consObj[]=`listConnections -s 0 -d 1 ($outputs[0]+".constraintRotateX")`;
            select -r ($con);
            addAttr -ln ("consObj")  -dt "string" ;
            setAttr -type "string" ($con+".consObj") ($consObj[0]);
                
            }         
            select -r ($outputs[0]);
            delete;                             
    }
    else
    {
    string $outputs[]=`listConnections -s 0 -d 1 ($con+".rotate")`;
    
    int $ex=size($outputs);
    if($ex>0){
        for($j=0;$j<size($outputs);$j++){
            string $consType=`nodeType ($outputs[$j])`;

            string $consObj[]=`listConnections -s 0 -d 1 ($outputs[$j]+".constraintRotateX")`;
            if($consType=="parentConstraint"){
            select -r ($con);
            addAttr -ln ("gtIkHandleParentConstraint"+$j)  -dt "string" ;
            
            setAttr -type "string" ($con+".gtIkHandleParentConstraint"+$j) ($consObj[0]);
            select -r ($outputs[$j]);
            delete;
            }
            if($consType=="orientConstraint"){
            select -r ($con);
            addAttr -ln ("gtIkHandleOreintConstraint"+$j)  -dt "string" ;
            
            setAttr -type "string" ($con+".gtIkHandleOreintConstraint"+$j) ($consObj[0]);
            select -r ($outputs[$j]);
            delete;    
                }
            }
        }
    } 
       
    string $endEffector[]=`listConnections -s 1 -d 0 ($ikH[0]+".endEffector")`;
    string $endBone[]=`listConnections -s 1 -d 0 ($endEffector[0]+".tx")`;
    
    int $ex=`objExists ($con+"rotOffsetGrp")`;
    if($ex==0){
    select -r ($con);
    group -n ($con+"rotOffsetGrp");
    }
    
    spaceLocator -p 0 0 0 -n ($con+"gtTempHandRotLoc");

    select -r $endBone[0];
    select -add ($con+"gtTempHandRotLoc");    
    if($style==1)
    delete`parentConstraint`;
    else
    delete`pointConstraint`;
    
    select -r ($con+"gtTempHandRotLoc"); 
    select -add ($con+"rotOffsetGrp");
    delete `orientConstraint`;
    delete  ($con+"gtTempHandRotLoc");
    if($mirror==1){
        setAttr ($con+"rotOffsetGrp.scaleZ") -1;
        setAttr ($con+"rotOffsetGrp.scaleX") -1;
        setAttr ($con+"rotOffsetGrp.scaleY") -1; 
    }else{
        setAttr ($con+"rotOffsetGrp.scaleZ") 1;
        setAttr ($con+"rotOffsetGrp.scaleX") 1;
        setAttr ($con+"rotOffsetGrp.scaleY") 1;         
    }
    
    select -r  ($con+"childsGrp");
    select -add ($con); 
    parent;
    
    string $attr[]=`listAttr -ud $con`;
    for($j=0;$j<size($attr);$j++){
        int $macth=`gmatch ($attr[$j]) "gtIkHandleParentConstraint*" `;
        if($macth==1){
            string $conObj=`getAttr ($con+"."+$attr[$j])`;
            select -r ($con);
            select -add $conObj;
            parentConstraint -mo;
            deleteAttr ($con+"."+$attr[$j]);
        }
    }
    
    for($j=0;$j<size($attr);$j++){
        int $macth=`gmatch ($attr[$j]) "gtIkHandleOreintConstraint*" `;
        if($macth==1){
            string $conObj=`getAttr ($con+"."+$attr[$j])`;
            select -r ($con);
            select -add $conObj;
            orientConstraint -mo;
            deleteAttr ($con+"."+$attr[$j]);
            }
        } 
        
    if($advA==1){
        int $exs=`objExists ($con+".inputB")`;
        string $conObj=`getAttr ($con+".consObj")`;
if($exs==1){       
        string $inputBb=`getAttr ($con+".inputB")`;
        string $switchAa=`getAttr ($con+".switchA")`;
        string $switchBb=`getAttr ($con+".switchB")`;
      int $ex=`objExists ($inputBb+"A")`;
      if($ex==0){
          select -cl;
          group -empty -n ($inputBb+"A");
          select -r ($inputBb);
          select -add ($inputBb+"A");
          delete`parentConstraint`;
          string $parent[]=`listRelatives -p ($inputBb)`;
                   
          select -r ($inputBb+"A");
          select -add $parent[0];
          parent;
          select -r ($inputBb);
          select -add ($inputBb+"A");
          parent;          
      }
     int $ex=`objExists ($conObj+"A")`;
      if($ex==0){
          select -cl;
          group -empty -n ($conObj+"A");
          select -r ($conObj);
          select -add ($conObj+"A");
          delete`parentConstraint`;
          string $parent[]=`listRelatives -p ($conObj)`;
                   
          select -r ($conObj+"A");
          select -add $parent[0];
          parent;
          select -r ($conObj);
          select -add ($conObj+"A");
          parent;          
      }
      
        if($mirror==1){                 

          setAttr ($conObj+"A.scaleY") -1;   
          setAttr ($conObj+"A.scaleX") -1;   
          setAttr ($conObj+"A.scaleZ") -1;   
      
          setAttr ($inputBb+"A.scaleZ") -1;
          setAttr ($inputBb+"A.scaleX") -1;
          setAttr ($inputBb+"A.scaleY") -1; 
          select -r $con;
          select -add  ($inputBb+"A");  
          delete`orientConstraint`;
               
    }else{
          setAttr ($inputBb+"A.scaleZ") 1;
          setAttr ($inputBb+"A.scaleX") 1;
          setAttr ($inputBb+"A.scaleY") 1;
          setAttr ($inputBb+"A.rx") 0;
          setAttr ($inputBb+"A.ry") 0;
          setAttr ($inputBb+"A.rz") 0; 
          setAttr ($conObj+"A.scaleY") 1;   
          setAttr ($conObj+"A.scaleX") 1;   
          setAttr ($conObj+"A.scaleZ") 1;     
    }                  
        select -r $inputBb;
        select -add $con;
        select -add $conObj;
        string $parentCons[]=`parentConstraint -mo`;
        connectAttr -f ($switchAa) ($parentCons[0]+"."+$inputBb+"W0");
        connectAttr -f ($switchBb) ($parentCons[0]+"."+$con+"W1");
        
        deleteAttr ($con+".consObj");
        deleteAttr ($con+".inputB");
        deleteAttr ($con+".switchA");
        deleteAttr ($con+".switchB"); 
        
        int $ex=`objExists ($conObj+"B")`;
        if($ex==0){
        select -r $conObj;
        pickWalk -d down;
        group -n  ($conObj+"B");
        }
         
        if($mirror==1){  
        setAttr ($conObj+"B.scaleY") -1;
        setAttr ($conObj+"B.scaleZ") -1;            
        }else{
        setAttr ($conObj+"B.scaleY") 1;
        setAttr ($conObj+"B.scaleZ") 1;        
        }                                                
}else{
    
 int $ex=`objExists ($conObj+"A")`;
      if($ex==0){
          select -cl;
          group -empty -n ($conObj+"A");
          select -r ($conObj);
          select -add ($conObj+"A");
          delete`parentConstraint`;
          string $parent[]=`listRelatives -p ($conObj)`;
                   
          select -r ($conObj+"A");
          select -add $parent[0];
          parent;            
      }
      
        if($mirror==1){                 
          setAttr ($conObj+"A.scaleY") -1;   
          setAttr ($conObj+"A.scaleX") -1;   
          setAttr ($conObj+"A.scaleZ") -1;                        
    }else{
          setAttr ($conObj+"A.scaleY") 1;   
          setAttr ($conObj+"A.scaleX") 1;   
          setAttr ($conObj+"A.scaleZ") 1;     
    }           
    
     select -r ($conObj);
     parent -world;  
                 
        select -r $con;
        select -add ($conObj+"A");
        string $parentCons[]=`orientConstraint -mo`;
       
        deleteAttr ($con+".consObj");
         select -r ($conObj);
         select -add ($conObj+"A");
         parent;                            
            }            
        } 
    }     
    select -r ($sel);
}
//////////////////////////////////////////
//缩放延迟表达式动画窗口
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSclDelayExpressionWin(){
if(`window -ex gtSclDelayExpressionWin`) deleteUI -window gtSclDelayExpressionWin;
window -wh 400 300 -title "老船动画吧-缩放延迟表达式动画窗口" gtSclDelayExpressionWin;
columnLayout -adj 1 gtColL;

text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1419\"";
formLayout gtform;
string $onc="intSliderGrp -e -en 1 gtfloatF3";
string $ofc="intSliderGrp -e -en 0 gtfloatF3";
text -l "轴向："  gttexta;
checkBox -l "X" -v 1 checkB3;
checkBox -l "Y" -v 1 checkB4;
checkBox -l "Z" -v 1 checkB5;

floatSliderGrp -l "最小随机值"  -v 1 -min 0.1 -max 10 -fmn 0.01 -fmx 10000 -f 1 floatF1;
floatSliderGrp -l "最大随机值"  -v 1 -min 0.1 -max 10 -fmn 0.01 -fmx 10000 -f 1 floatF2;

button -l "创建缩放延迟表达式" -c "gtSclWave" but1;
frameLayout -l "使用说明" -cll 1 -cl 1 gtFrameLayout;

///////////////////////////////////////
string $shuoming="";
    $shuoming+="缩放延迟表达式动画:访问老船动画吧/老群qq技术交流群：130930540";
   
text -l ($shuoming) -h 30 text1;
//help frameLayout;
formLayout -e
-af gttexta left 5 -af gttexta right 5 -af gttexta top 10 

-af checkB3 left 50 -ap checkB3 right 0 43 -ac checkB3 top 5 gttexta
-ac checkB4 left 4 checkB3 -ap checkB4 right 0 70 -ac checkB4 top 5 gttexta
-ac checkB5 left 4 checkB4 -af checkB5 right 10 -ac checkB5 top 5 gttexta

-af floatF1 left 10 -af floatF1 right 10 -ac floatF1 top 5 checkB3
-af floatF2 left 10 -af floatF2 right 10 -ac floatF2 top  5 floatF1

-af but1 left 10 -af but1 right 10 -ac but1 top  5 floatF2

-af gtFrameLayout left 10 -af gtFrameLayout right 10 -ac gtFrameLayout top 4 but1 
  gtform;

showWindow gtSclDelayExpressionWin;
}
//////////////
global proc gtSclWave(){

float $min=`floatSliderGrp -q -v floatF1`;
float $max=`floatSliderGrp -q -v floatF2`;
int $x=`checkBox -q -v checkB3`;
int $y=`checkBox -q -v checkB4`;
int $z=`checkBox -q -v checkB5`;

/////////////////////////////////////
string $sel[]=`ls -sl`;

////////////////////////////////   
int $state=`objExists ($sel[0]+".sclDelay")`;
if($state!=1)addAttr -ln "sclDelay" -k 1 -at double -dv 1 $sel[0];

int $state=`objExists ($sel[0]+".extraScl")`;
if($state!=1)addAttr -ln "extraScl" -k 1 -at double -dv 0 $sel[0];

int $state=`objExists ($sel[0]+".sclDelayExpressionOn")`;
if($state!=1)addAttr -ln "sclDelayExpressionOn" -k 1 -at bool -dv 1 $sel[0];

shadingNode -asUtility condition -n ($sel[0]+"sclconditionexp");
connectAttr -f  ($sel[0]+".sclDelayExpressionOn") ($sel[0]+"sclconditionexp.firstTerm");
setAttr ($sel[0]+"sclconditionexp.secondTerm") 1;

for($i=1;$i<size($sel);$i++){
float $noise=rand($min,$max);
select -r ($sel[$i]);
group -n ($sel[$i]+"SclGrp");
xform -os -piv 0 0 0;
float $pivot[]=`xform -q -ws -t ($sel[$i])`;
move -a ($pivot[0]) ($pivot[1]) ($pivot[2]) ($sel[$i]+"SclGrp.scalePivot") ($sel[$i]+"SclGrp.rotatePivot") ;

string $exp="int $time=`currentTime  -q`;\nfloat $delay=`getAttr ";
	$exp+=($sel[0]);
	$exp+=".sclDelay`;\nfloat $extrascl=`getAttr ";
	$exp+=($sel[0]);
	$exp+=".extraScl`;\nfloat $r[]=`getAttr -t ($time-$delay*";
	$exp+=($i);
	$exp+=") ";
	$exp+=($sel[0]);
	$exp+=".scale`;\n";
if($x==1){
	$exp+=($sel[$i]);
	$exp+="SclGrp.sx=$r[0]*(1+$extrascl*";
	$exp+=($i);
	$exp+=")*";
	$exp+=($noise);
	$exp+=";\n";
	}
if($y==1){
	$exp+=($sel[$i]);
	$exp+="SclGrp.sy=$r[1]*(1+$extrascl*";
	$exp+=($i);
	$exp+=")*";
	$exp+=($noise);
	$exp+=";\n";
	}
if($z==1){
	$exp+=($sel[$i]);
	$exp+="SclGrp.sz=$r[2]*(1+$extrascl*";
	$exp+=($i);
	$exp+=")*";
	$exp+=($noise);
	$exp+=";\n";
	}
expression -s $exp -ae 1 -uc all -n ($sel[0]+"_exp_scl"+$i);
connectAttr -f ($sel[0]+"sclconditionexp.outColorR") ($sel[0]+"_exp_scl"+$i+".nodeState");

    }
}
//////////////////////////////
//批量隐藏/显示物体绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtShowHideObjWin(){
   if(`window -ex gtShowHideObjWin`) deleteUI -window gtShowHideObjWin;
    window -wh 500 200 -t "老船角色绑定-☆-批量隐藏/显示物体绑定工具!" gtShowHideObjWin;
    columnLayout -adj 1 mainColumnattr;
      text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1422\"";

    formLayout  gtCOTAF;
   
    text -l "勾选该选项将隐藏/显示物体的形节点" tgtextTempC;
    checkBox -l "应用到形节点"  gtLoarSkinObjC;
    text -l "勾选该选项将锁定显示属性" tgtextTempA;

    checkBox -l "锁定显示属性"  -v 1 gtLoarSkinObjD;

    button -l "隐藏显示选择的物体"   -c "gtVisbleAndLockProc" but6;
    
    formLayout -e

     -af tgtextTempC left 5 -af tgtextTempC top 5  -ap tgtextTempC right 0 50
    -ac gtLoarSkinObjC left 5 tgtextTempC -af gtLoarSkinObjC top 5 -af gtLoarSkinObjC right 5
    
    -af tgtextTempA left 5 -ac tgtextTempA top 5 tgtextTempC -ap tgtextTempA right 0 50
    -ac gtLoarSkinObjD left 5 tgtextTempA -ac gtLoarSkinObjD top 5 tgtextTempC -ap gtLoarSkinObjD right 0 50
    
    -af but6 left 5  -ac but6 top 5 tgtextTempA -af but6 right 5
    
    gtCOTAF;     
    showWindow gtShowHideObjWin;   
}
/////////////////////////
global proc gtVisbleAndLockProc(){
    int $shapV=`checkBox -q -v gtLoarSkinObjC`;
    int $lock=`checkBox -q -v gtLoarSkinObjD`;

    string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
    if($shapV==1){
    string $shape[]=`listRelatives -s ($sel[$i])`;
    for($j=0;$j<size($shape);$j++){
        setAttr -lock 0 ($shape[$j]+".v");
        int $stat=`getAttr ($shape[$j]+".v")`;
        if($stat==0){
           setAttr ($shape[$j]+".v") 1;
        }else{
          setAttr ($shape[$j]+".v") 0;  
        }
        if($lock==1){
          setAttr -lock 1 ($shape[$j]+".v");  
            }
        }
    }else{
       
        setAttr -lock 0 ($sel[$i]+".v");
         int $stat=`getAttr ($sel[$i]+".v")`;
        if($stat==0){
           setAttr ($sel[$i]+".v") 1;
        }else{
          setAttr ($sel[$i]+".v") 0;  
        }
        if($lock==1){
          setAttr -lock 1 ($sel[$i]+".v");  
            }
        }
    }
}
/////////////////////
//物体附着模型表面绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtPlaceToModelFollicleWin(){
if(`window -ex gtPlaceToModelFollicleWin`) deleteUI  -window gtPlaceToModelFollicleWin;
window -wh 200 200 -title "老船角色绑定-☆-毛囊附着模型表面绑定工具！" gtPlaceToModelFollicleWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1478\"";
		text -l "说明：附着模型可以是多边形和曲面" -h 20 ;

	separator -style double;
	textFieldButtonGrp -cw3 80 200 65 -l (" 附着模型:") -text "需要载入附着模型" -bl   "载    入" -bc "gtloadcPlaneName;" gtTextFieldplaneN;
	//separator -style double;
	rowColumnLayout -nc 3 -cw 1 50 -cw 2 100 -cw 3 200;
	text -l "";
	checkBox -l "保持原位置" -v 1 gtSingleChk;

	button -label "创建简单父子约束附着毛囊" -c "gtplaceObjToPlaneByFollicle";
		separator -style double;
	separator -style double;
		separator -style double;
	
showWindow gtPlaceToModelFollicleWin;
}
////////////////////////
global proc gtloadcPlaneName(){
string $sel[]=`ls -sl`;
textFieldButtonGrp -e -tx $sel[0] gtTextFieldplaneN;
}
////////////////////////

global proc gtplaceObjToPlaneByFollicle(){
int $stat=`checkBox -q -v gtSingleChk`;  
string $plane=`textFieldButtonGrp -q -tx gtTextFieldplaneN`;
int $ex=`objExists $plane`;
if($ex==0)error "请载入附着模型";
string $sel[]=`ls -sl`;

string $bigManM= $plane;
string $shape[]=`listRelatives -s $bigManM`;

string $type=`objectType  $shape[0]`;
if($type!="mesh"&&$type!="nurbsSurface")error "需要多边形或者曲面作为固定的面";

int $exsit=`objExists ($bigManM+"follicleGrp")`;

if($exsit==0){
group -em -n ($bigManM+"follicleGrp");
}

for($i=0;$i<size($sel);$i++){
spaceLocator -p 0 0 0 -n ($sel[$i]+"Loc");

group -n ($sel[$i]+"LocGrp");

select -r ($sel[$i]);
select -add ($sel[$i]+"LocGrp");
delete `parentConstraint`;
select -r ($sel[$i]+"Loc");
select -add ($sel[$i]);
parentConstraint -mo;
string $shap[]=`listRelatives -s ($sel[$i]+"Loc")`;
setAttr ($shap[0]+".localScaleZ") 0.01;
setAttr ($shap[0]+".localScaleX") 0.01;
setAttr ($shap[0]+".localScaleY") 0.01;

float $pos[]=`xform -q -a -ws -t ($sel[$i]+"Loc")`;
string $type=`objectType  $shape[0]`;

////////////////////////
if($type=="mesh"){
createNode closestPointOnMesh -n ($sel[$i]+"cpom"+$i);
connectAttr -f ($bigManM+".outMesh") ($sel[$i]+"cpom"+$i+".inMesh");

setAttr ($sel[$i]+"cpom"+$i+".inPositionX") $pos[0] ;
setAttr ($sel[$i]+"cpom"+$i+".inPositionY") $pos[1] ;
setAttr ($sel[$i]+"cpom"+$i+".inPositionZ") $pos[2] ;
float $u=`getAttr ($sel[$i]+"cpom"+$i+".parameterU")`;
float $v=`getAttr ($sel[$i]+"cpom"+$i+".parameterV")`;

createNode follicle -n ($sel[$i]+"follicleShape"+$i);
select -r ($sel[$i]+"follicleShape"+$i);
pickWalk -d up;
rename ($sel[$i]+"follicle"+$i);
connectAttr -f ($bigManM+".outMesh") ($sel[$i]+"follicleShape"+$i+".inputMesh");
connectAttr -f ($bigManM+".worldMatrix[0]") ($sel[$i]+"follicleShape"+$i+".inputWorldMatrix");

connectAttr -f ($sel[$i]+"follicleShape"+$i+".outTranslate") ($sel[$i] +"follicle"+$i+".translate");
connectAttr -f ($sel[$i]+"follicleShape"+$i+".outRotate") ($sel[$i]+"follicle"+$i+".rotate");

setAttr  ($sel[$i]+"follicleShape"+$i+".parameterU") $u;
setAttr  ($sel[$i]+"follicleShape"+$i+".parameterV") $v;

select -r ($sel[$i]+"follicle"+$i);
select -add ($bigManM+"follicleGrp");
parent;
select -r ($sel[$i]+"cpom"+$i);
delete;
}
else
{
createNode closestPointOnSurface -n ($sel[$i]+"cpom"+$i);
string $shape[]=`listRelatives -s $bigManM`;
connectAttr -f ($shape[0]+".worldSpace") ($sel[$i]+"cpom"+$i+".inputSurface");

setAttr ($sel[$i]+"cpom"+$i+".inPositionX") $pos[0] ;
setAttr ($sel[$i]+"cpom"+$i+".inPositionY") $pos[1] ;
setAttr ($sel[$i]+"cpom"+$i+".inPositionZ") $pos[2] ;
float $u=`getAttr ($sel[$i]+"cpom"+$i+".parameterU")`;
float $v=`getAttr ($sel[$i]+"cpom"+$i+".parameterV")`;

createNode follicle -n ($sel[$i]+"follicleShape"+$i);
select -r ($sel[$i]+"follicleShape"+$i);
pickWalk -d up;
rename ($sel[$i]+"follicle"+$i);
connectAttr -f ($shape[0]+".local") ($sel[$i]+"follicleShape"+$i+".inputSurface");
connectAttr -f ($shape[0]+".worldMatrix[0]") ($sel[$i]+"follicleShape"+$i+".inputWorldMatrix");

connectAttr -f ($sel[$i]+"follicleShape"+$i+".outTranslate") ($sel[$i] +"follicle"+$i+".translate");
connectAttr -f ($sel[$i]+"follicleShape"+$i+".outRotate") ($sel[$i]+"follicle"+$i+".rotate");

setAttr  ($sel[$i]+"follicleShape"+$i+".parameterU") $u;
setAttr  ($sel[$i]+"follicleShape"+$i+".parameterV") $v;

select -r ($sel[$i]+"follicle"+$i);
select -add ($bigManM+"follicleGrp");
parent;
select -r ($sel[$i]+"cpom"+$i);
delete;

}
if($stat==0){
select -r ($sel[$i]+"follicle"+$i);
select -add ($sel[$i]+"LocGrp");
delete `pointConstraint`;

select -r ($sel[$i]+"LocGrp");
select -add ($sel[$i]+"follicle"+$i);
parent;
        }else{
    string $constraint[]=`listConnections -s 1 -d 0 ($sel[$i]+".tx")`;
    delete ($constraint[0]);
    select -r ($sel[$i]+"follicle"+$i);
    select -add ($sel[$i]+"LocGrp");
    delete `parentConstraint`;

    select -r ($sel[$i]+"LocGrp");
    select -add ($sel[$i]+"follicle"+$i);
    parent;
    float $pos[]=`getAttr ($sel[$i]+"follicle"+$i+".translate")`;
    move $pos[0] $pos[1] $pos[2]  ($sel[$i]+".scalePivot")  ($sel[$i]+".rotatePivot") ;
    select -r ($sel[$i]+"Loc");
    select -add ($sel[$i]);
    parentConstraint -mo;
        }
    }
}
//////////////////////////
//表情控制框绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtfaceSetupWinA(){
if(`window -ex gtfaceSetupWinA`) deleteUI -window gtfaceSetupWinA;
window -wh 500 300 -title "老船角色绑定-☆-表情控制框绑定工具!" gtfaceSetupWinA;
columnLayout -adj 1 gtColL;

text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1492\"";

formLayout gtfaceFrom;
text -l "     名  字：" textNameEF;
textField -text "name" -ed 1 ttgRigNameEF;

string $vh="floatFieldGrp -e -en1 1 -en2 1 gtfield2;floatFieldGrp -e -en1 1 -en2 1 gtfield1;checkBox -e -en 1 gtcheckB;";
string $v="floatFieldGrp -e -en1 0 -en2 0 gtfield1;floatFieldGrp -e -en1 1 -en2 1 gtfield2;checkBox -e -en 0 gtcheckB;";
string $h="floatFieldGrp -e -en1 0 -en2 0  gtfield2;floatFieldGrp -e -en1 1 -en2 1 gtfield1;checkBox -e -en 0 gtcheckB;";
string $hv="floatFieldGrp -e -en1 0 -en2 0  gtfield2;floatFieldGrp -e -en1 0 -en2 0 gtfield1;checkBox -e -en 0 gtcheckB;";

button -l "载入角色名字" -c  "ttgLaodCharactorNamEFProcA;"   loadNamButEF;

button -l "创  建  边  框" -c "gtfaceSetupFrame;" but1;
separator -style single  sep1;
radioButtonGrp -la4 "方形"  "横向" "竖向" "眼睛" -nrb  4 -on1 ($vh)  -on2 ($v)  -on3  ($h)  -on4 ($hv) -select 1 gtradioBut;

checkBox -l "方向-V" -v  0 gtcheckB;

floatFieldGrp -l "上下限制" -nf  2 -v1 -1 -v2 1 gtfield1;
floatFieldGrp -l "左右限制" -nf  2 -v1 -1 -v2 1 gtfield2;
textFieldGrp -l "控制钮名字："  -tx  "faceCon" gttext1;
button -l "创建控制钮" -c "gtfaceSetupFrameH;"but2;

separator -style single  sep2;
button -l "完成控制" -c "gtfaceSetupFrameHFinal;" but3;
button -l "编辑控制钮" -c "gtfaceSetupFrameHEdit;" but4;
formLayout -e 

-af textNameEF left 10 -af textNameEF top 5 -ap textNameEF right 0 18
-ac ttgRigNameEF left 5 textNameEF  -ap ttgRigNameEF right 0 50 -af ttgRigNameEF top 5 
-ac loadNamButEF left 5 ttgRigNameEF -af loadNamButEF right 10 -af loadNamButEF top 5

-af but1 left 10 -af but1 right 10 -ac but1 top 5 ttgRigNameEF

-af sep1 left 10 -af sep1 right 10 -ac sep1 top 5 but1
-af gtradioBut left 36 -af gtradioBut right 10 -ac gtradioBut top 5 sep1
-af gtcheckB left 152 -af gtcheckB right 10 -ac gtcheckB top 5 gtradioBut

-af gtfield1 left 10 -af gtfield1 right 10 -ac gtfield1 top 5 gtcheckB
-af gtfield2 left 10 -af gtfield2 right 10 -ac gtfield2 top 5 gtfield1
-af gttext1 left 10 -af gttext1 right 10 -ac gttext1 top 5 gtfield2
-af but2 left 10 -af but2 right 10 -ac but2 top 5 gttext1
-af sep2 left 10 -af sep2 right 10 -ac sep2 top 5 but2
-af but4 left 10 -ap but4 right 0  30 -ac but4 top 5 sep2 
-ac but3 left 5 but4 -af but3 right 10 -ac but3 top 5 sep2 gtfaceFrom;
showWindow  gtfaceSetupWinA;
}
////////////////////
global proc ttgLaodCharactorNamEFProcA(){

string $gtCname="";
string $sel[]=`ls -sl`;
int $size=size($sel);
string $gtCname;
string $tokens[];
int $num=`tokenize $sel[0] "_" $tokens`;
string $teststring=$tokens[0];
$gtCname=$teststring;
textField  -e -text $gtCname ttgRigNameEF;
}
//////////////////////
global proc gtfaceSetupFrame(){
$teststring=`textField -q -text  "ttgRigNameEF"`;
$gtCN=$teststring;

string $gtCname;
$gtCname=$gtCN+"_";

int $state=`objExists  ($gtCname+"faceFrame")`;

if($state==1) error "当前名字已被使用，请用其它名字!!!";

curve -d 3 -p -6 -6 0 -p 6 -6 0 -p 6 -6 0 -p 6 -6 0 -p 6 6 0 -p 6 6 0 -p 6 6 0 -p -6 6 0 -p -6 6 0 
-p -6 6 0 -p -6 -6 0 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8  -n ($gtCname+"faceFrame");
select -r ($gtCname+"faceFrame");
duplicate -rr -n ($gtCname+"faceFrame1");
scale 0.975 0.975 0.975;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;

pickWalk -d down;
select -add ($gtCname+"faceFrame");
parent -s -r;
delete ($gtCname+"faceFrame1");

select -r ($gtCname+"faceFrame");
addAttr -ln "FrameHnum"  -at long;

}
////////////////////////
global proc gtfaceSetupFrameH(){
$teststring=`textField -q -text  "ttgRigNameEF"`;
$gtCN=$teststring;

string $gtCname;
$gtCname=$gtCN+"_";
int $selec=`radioButtonGrp -q -sl gtradioBut`;
float $minH=`floatFieldGrp -q -v1 gtfield2`;
float $maxH=`floatFieldGrp -q -v2 gtfield2`;
float $minV=`floatFieldGrp -q -v1 gtfield1`;
float $maxV=`floatFieldGrp -q -v2 gtfield1`;
string $name=`textFieldGrp -q -tx gttext1`;
int $fnm=`getAttr ($gtCname+"faceFrame.FrameHnum")`;
setAttr ($gtCname+"faceFrame.FrameHnum") ($fnm+1);

if($selec==1){
int $vv=`checkBox -q -v gtcheckB`;
//////////////////////////////
curve -d 3 -p -1 1 0 -p 1 1 0 -p 1 1 0 -p 1 1 0 -p 1 -1 0 -p 1 -1 0 -p 1 -1 0 -p -1 -1 0 -p -1 -1 0 
-p -1 -1 0 -p -1 1 0 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8 -n ($gtCname+"faceFrameH"+$fnm);

select -r ($gtCname+"faceFrameH"+$fnm);

duplicate -rr -n ($gtCname+"faceFrameH"+$fnm+"_temp");
scale 1.1 1.1 1.1;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;
pickWalk -d down;

select -add ($gtCname+"faceFrameH"+$fnm);
parent -s -r;
delete ($gtCname+"faceFrameH"+$fnm+"_temp");

select -r ($gtCname+"faceFrameH"+$fnm);
scale 1.2 1.2 1.2;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;

if($vv==1){
setAttr ($gtCname+"faceFrameH"+$fnm+".rz") 45;
select -r ($gtCname+"faceFrameH"+$fnm+".cv[0:*]");
rotate -r 0 0 -45;
}

circle -ch 0 -o on -r 0.15 -n ($gtCname+$name);
string $b[]=`ls -sl`;

setAttr -lock true ($b[0]+".rx");
setAttr -lock true ($b[0]+".ry");
setAttr -lock true ($b[0]+".rz");
setAttr -lock true ($b[0]+".sx");
setAttr -lock true ($b[0]+".sy");
setAttr -lock true ($b[0]+".sz");
setAttr -lock true ($b[0]+".v");
setAttr -lock true ($b[0]+".tz");

select -add ($gtCname+"faceFrameH"+$fnm);
parent;
string $tempN[]=`ls -sl`;
transformLimits -tx $minH $maxH -etx 1 1 ($tempN[0]);
transformLimits -ty $minV $maxV -ety 1 1 ($tempN[0]);
transformLimits -tz 0 0  -etz 1 1 ($tempN[0]);

textCurves -ch 0 -f "Times New Roman|h-13|w400|c0" -t $name;
string $sel[]=`ls -sl`;
rename $sel[0] ($gtCname+$name+"temp");
string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;

for($i=0;$i<size($childs);$i++){
string $c[]=`listRelatives -fullPath -c ($childs[$i])`;
for($j=0;$j<size($c);$j++){
select -r ($c[$j]);
select -add ($gtCname+$name+"temp");
parent;
}
delete ($childs[$i]);
}

string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;
select -r $childs[0];
rename $name;
string $currentN[]=`ls -sl`;

for($i=1;$i<size($childs);$i++){
select -r ($childs[$i]);
makeIdentity -apply true -t 1 -r 1 -s 0 -n 0;
pickWalk -d down;
select -add $currentN[0];
parent -s -r;
delete ($childs[$i]);
}


select -r $currentN[0];
CenterPivot;
scale 0.2 0.2 0.2;
spaceLocator -p 0 0 0 -n ($name+"temp");
move 0 -1.5 0 ;
select -add $currentN[0];
delete `pointConstraint`;
delete ($name+"temp");
select -r $currentN[0];;
group -n ($gtCname+"faceConName");
CenterPivot;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
delete ($gtCname+$name+"temp");


select -r ($gtCname+"faceFrameH"+$fnm);
select -add ($gtCname+"faceFrame") ;
parent;
setAttr ($gtCname+"faceFrameH"+$fnm+".tx") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".ty") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".tz") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".sx") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sy") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sz") 1;

}
/////////////////////////////////////////////////
if($selec==2){
curve -d 3 -p -1 1 0 -p 1 1 0 -p 1 1 0 -p 1 1 0 -p 1 0 0 -p 1 0 0 -p 1 0 0 -p -1 0 0 -p -1 0 0 -p -1 0 0 -p -1 1 0 
-k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8 -n ($gtCname+"faceFrameH"+$fnm);

select -r ($gtCname+"faceFrameH"+$fnm);
CenterPivot;
setAttr ($gtCname+"faceFrameH"+$fnm+".scaleY") 0.15;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;

duplicate -rr -n ($gtCname+"faceFrameH"+$fnm+"_temp");
scale 1.1 2 1.1;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;
pickWalk -d down;

select -add ($gtCname+"faceFrameH"+$fnm);
parent -s -r;
delete ($gtCname+"faceFrameH"+$fnm+"_temp");

circle -ch 0 -o on -r 0.24 -n ($gtCname+$name);
move 0 0.5 0;
makeIdentity -apply true -t 1 -r 1 -s 0 -n 0;

string $b[]=`ls -sl`;


select -r ($b[0]+".cv[1]") ($b[0]+".cv[5]") ;
select -tgl ($b[0]+".cv[3]") ($b[0]+".cv[7]") ;
scale  0.6 0.6 0.6 ;
select -r ($b[0]+".cv[0:7]");
scale 1 1.3 1;

setAttr -lock true ($b[0]+".rx");
setAttr -lock true ($b[0]+".ry");
setAttr -lock true ($b[0]+".rz");
setAttr -lock true ($b[0]+".sx");
setAttr -lock true ($b[0]+".sy");
setAttr -lock true ($b[0]+".sz");
setAttr -lock true ($b[0]+".v");
setAttr -lock true ($b[0]+".tz");
setAttr -lock true ($b[0]+".ty");
select -r $b;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;


string $tempN[]=`ls -sl`;
transformLimits -tx $minH $maxH -etx 1 1 ($tempN[0]);
transformLimits -ty 0 0 -ety 1 1 ($tempN[0]);
transformLimits -tz 0 0  -etz 1 1 ($tempN[0]);

textCurves -ch 0 -f "Times New Roman|h-13|w400|c0" -t $name;
string $sel[]=`ls -sl`;
rename $sel[0] ($gtCname+$name+"temp");
string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;

for($i=0;$i<size($childs);$i++){
string $c[]=`listRelatives -fullPath -c ($childs[$i])`;
for($j=0;$j<size($c);$j++){
select -r ($c[$j]);
select -add ($gtCname+$name+"temp");
parent;
}
delete ($childs[$i]);
}

string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;
select -r $childs[0];
rename $name;
string $currentN[]=`ls -sl`;
for($i=1;$i<size($childs);$i++){
select -r ($childs[$i]);
makeIdentity -apply true -t 1 -r 1 -s 0 -n 0;
pickWalk -d down;
select -add $currentN[0];
parent -s -r;
delete ($childs[$i]);
}


select -r $currentN[0];
CenterPivot;
scale 0.2 0.2 0.2;
spaceLocator -p 0 0 0 -n ($name+"temp");
move 0 -0.05 0 ;
select -add $currentN[0];
delete `pointConstraint`;
delete ($name+"temp");
select -r $currentN[0];;
group -n ($gtCname+"faceConName");
CenterPivot;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
delete ($gtCname+$name+"temp");


select -r ($gtCname+"faceFrameH"+$fnm);
select -add ($gtCname+"faceFrame") ;
parent;
setAttr ($gtCname+"faceFrameH"+$fnm+".tx") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".ty") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".tz") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".sx") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sy") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sz") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".rx") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".ry") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".rz") 0;
}
///////////////////////////////////////////////////////


if($selec==3){
curve -d 3 -p 0 -1 0 -p 1 -1 0 -p 1 -1 0 -p 1 -1 0 -p 1 1 0 -p 1 1 0 -p 1 1 0 -p 0 1 0 -p 0 1 0 -p 0 1 0 -p 0 -1 0 
-k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8 -n ($gtCname+"faceFrameH"+$fnm);

select -r ($gtCname+"faceFrameH"+$fnm);
CenterPivot;

scale 0.15 1 1 ($gtCname+"faceFrameH"+$fnm);
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;

duplicate -rr -n ($gtCname+"faceFrameH"+$fnm+"_temp");
scale 2 1.1 1.1;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;
pickWalk -d down;

select -add ($gtCname+"faceFrameH"+$fnm);
parent -s -r;
delete ($gtCname+"faceFrameH"+$fnm+"_temp");

circle -ch 0 -o on -r 0.25 -n ($gtCname+$name);
move 0.5 0 0;
makeIdentity -apply true -t 1 -r 1 -s 0 -n 0;
string $b[]=`ls -sl`;
select -r ($b[0]+".cv[1]") ($b[0]+".cv[5]") ;
select -tgl ($b[0]+".cv[3]") ($b[0]+".cv[7]") ;
scale  0.6 0.6 0.6 ;
select -r ($b[0]+".cv[0:7]");
scale 1.3 1 1;

setAttr -lock true ($b[0]+".rx");
setAttr -lock true ($b[0]+".ry");
setAttr -lock true ($b[0]+".rz");
setAttr -lock true ($b[0]+".sx");
setAttr -lock true ($b[0]+".sy");
setAttr -lock true ($b[0]+".sz");
setAttr -lock true ($b[0]+".v");
setAttr -lock true ($b[0]+".tz");
setAttr -lock true ($b[0]+".tx");

select -r $b;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;


string $tempN[]=`ls -sl`;
transformLimits -tx 0 0 -etx 1 1 ($tempN[0]);
transformLimits -ty $minV $maxV -ety 1 1 ($tempN[0]);
transformLimits -tz 0 0  -etz 1 1 ($tempN[0]);

textCurves -ch 0 -f "Times New Roman|h-13|w400|c0" -t $name;
string $sel[]=`ls -sl`;
rename $sel[0] ($gtCname+$name+"temp");
string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;

for($i=0;$i<size($childs);$i++){
string $c[]=`listRelatives -fullPath -c ($childs[$i])`;
for($j=0;$j<size($c);$j++){
select -r ($c[$j]);
select -add ($gtCname+$name+"temp");
parent;
}
delete ($childs[$i]);
}

string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;
select -r $childs[0];
rename $name;
string $currentN[]=`ls -sl`;
for($i=1;$i<size($childs);$i++){
select -r ($childs[$i]);
makeIdentity -apply true -t 1 -r 1 -s 0 -n 0;
pickWalk -d down;
select -add $currentN[0];
parent -s -r;
delete ($childs[$i]);
}


select -r $currentN[0];
CenterPivot;
scale 0.2 0.2 0.2;
spaceLocator -p 0 0 0 -n ($name+"temp");
move 0.5 -1.5 0 ;
select -add $currentN[0];
delete `pointConstraint`;
delete ($name+"temp");
select -r $currentN[0];;
group -n ($gtCname+"faceConName");
CenterPivot;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
delete ($gtCname+$name+"temp");




select -r ($gtCname+"faceFrameH"+$fnm);
select -add ($gtCname+"faceFrame") ;
parent;
setAttr ($gtCname+"faceFrameH"+$fnm+".tx") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".ty") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".tz") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".sx") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sy") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sz") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".rx") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".ry") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".rz") 0;
}

//////////////////////////////////////////////


if($selec==4){
curve -d 3 -p -1 1 0 -p 1 1 0 -p 1 1 0 -p 1 1 0 -p 1 -1 0 -p 1 -1 0 -p 1 -1 0 -p -1 -1 0 -p -1 -1 0 
-p -1 -1 0 -p -1 1 0 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8 -n ($gtCname+"faceFrameH"+$fnm);

select -r ($gtCname+"faceFrameH"+$fnm);

duplicate -rr -n ($gtCname+"faceFrameH"+$fnm+"_temp");
scale 1.1 1.1 1.1;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;
pickWalk -d down;

select -add ($gtCname+"faceFrameH"+$fnm);
parent -s -r;
delete ($gtCname+"faceFrameH"+$fnm+"_temp");

select -r ($gtCname+"faceFrameH"+$fnm);
scale 1.2 1.2 1.2;
makeIdentity -apply true -t 0 -r 1 -s 1 -n 0;


circle -ch 0 -o on -r 0.35 -n ($gtCname+$name);
string $b[]=`ls -sl`;
scale 1 0.75 1 $b[0];

setAttr -lock true ($b[0]+".rx");
setAttr -lock true ($b[0]+".ry");
setAttr -lock true ($b[0]+".rz");
setAttr -lock true ($b[0]+".sx");
setAttr -lock true ($b[0]+".sy");
setAttr -lock true ($b[0]+".sz");
setAttr -lock true ($b[0]+".v");
setAttr -lock true ($b[0]+".tz");
select -r $b;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
string $tempN[]=`ls -sl`;
transformLimits -tx -1 1 -etx 1 1 ($tempN[0]);
transformLimits -ty -.5 .5 -ety 1 1 ($tempN[0]);
transformLimits -tz 0 0  -etz 1 1 ($tempN[0]);
///////////////
circle -ch 0 -o on -r 0.35 -n ($gtCname+$name+"Up");
string $b[]=`ls -sl`;
move 0 0.5 0 $b[0];
select -r $b;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;


select -r ($b[0]+".cv[5]") ;
move -r 0 0.225 0 ;
select -r ($b[0]+".cv[4:6]") ;
move -r 0 0.225 0 ;


setAttr -lock true ($b[0]+".rx");
setAttr -lock true ($b[0]+".ry");
setAttr -lock true ($b[0]+".rz");
setAttr -lock true ($b[0]+".sx");
setAttr -lock true ($b[0]+".sy");
setAttr -lock true ($b[0]+".sz");
setAttr -lock true ($b[0]+".v");
setAttr -lock true ($b[0]+".tz");
select -r ($b);
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
string $tempN[]=`ls -sl`;

transformLimits -tx -1 1 -etx 1 1 ($tempN[0]);
transformLimits -ty -.5 .5 -ety 1 1 ($tempN[0]);
transformLimits -tz 0 0  -etz 1 1 ($tempN[0]);

///////////////////////////

circle -ch 0 -o on -r 0.35 -n ($gtCname+$name+"Down");
string $b[]=`ls -sl`;
move 0 -0.5 0 $b[0];
select -r ($b);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

select -r ($b[0]+".cv[1]") ;
move -r 0 -0.225 0 ;
select -r ($b[0]+".cv[0:2]") ;
move -r 0 -0.225 0 ;

setAttr -lock true ($b[0]+".rx");
setAttr -lock true ($b[0]+".ry");
setAttr -lock true ($b[0]+".rz");
setAttr -lock true ($b[0]+".sx");
setAttr -lock true ($b[0]+".sy");
setAttr -lock true ($b[0]+".sz");
setAttr -lock true ($b[0]+".v");
setAttr -lock true ($b[0]+".tz");
select -r ($b);
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
string $tempN[]=`ls -sl`;

transformLimits -tx -1 1 -etx 1 1 ($tempN[0]);
transformLimits -ty -.5 .5 -ety 1 1 ($tempN[0]);
transformLimits -tz 0 0  -etz 1 1 ($tempN[0]);
//////////////////////////////////////////

textCurves -ch 0 -f "Times New Roman|h-13|w400|c0" -t $name;
string $sel[]=`ls -sl`;
rename $sel[0] ($gtCname+$name+"temp");
string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;

for($i=0;$i<size($childs);$i++){
string $c[]=`listRelatives -fullPath -c ($childs[$i])`;
for($j=0;$j<size($c);$j++){
select -r ($c[$j]);
select -add ($gtCname+$name+"temp");
parent;
}
delete ($childs[$i]);
}

string $childs[]=`listRelatives -fullPath -c  ($gtCname+$name+"temp")`;
select -r $childs[0];
rename $name;
string $currentN[]=`ls -sl`;
for($i=1;$i<size($childs);$i++){
select -r ($childs[$i]);
makeIdentity -apply true -t 1 -r 1 -s 0 -n 0;
pickWalk -d down;
select -add $currentN[0];
parent -s -r;
delete ($childs[$i]);
}

select -r $currentN[0];
CenterPivot;
scale 0.2 0.2 0.2;
spaceLocator -p 0 0 0 -n ($name+"temp");
move 0 -1.5 0 ;
select -add $currentN[0];
delete `pointConstraint`;
delete ($name+"temp");
select -r $currentN[0];;
group -n ($gtCname+"faceConName");
CenterPivot;
select -add ($gtCname+"faceFrameH"+$fnm);
parent;
delete ($gtCname+$name+"temp");

select -r ($gtCname+"faceFrameH"+$fnm);
select -add ($gtCname+"faceFrame") ;
parent;
setAttr ($gtCname+"faceFrameH"+$fnm+".tx") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".ty") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".tz") 0;
setAttr ($gtCname+"faceFrameH"+$fnm+".sx") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sy") 1;
setAttr ($gtCname+"faceFrameH"+$fnm+".sz") 1;
    }
}
///////////////////////////////////////////
global proc gtfaceSetupFrameHFinal(){
$teststring=`textField -q -text  "ttgRigNameEF"`;
$gtCN=$teststring;

string $gtCname;
$gtCname=$gtCN+"_";
string $shape[]=`listRelatives  -s ($gtCname+"faceFrame")`;

for($j=0;$j<size($shape);$j++){
setAttr ($shape[$j]+".overrideEnabled") 1;
setAttr ($shape[$j]+".overrideColor") 22;
}

string $frameH[]=`listRelatives  -c -type "transform" ($gtCname+"faceFrame")`;
for($i=0;$i<size($frameH);$i++){

string $shape[]=`listRelatives  -c -s ($frameH[$i])`;
for($j=0;$j<size($shape);$j++){
setAttr ($shape[$j]+".overrideEnabled") 1;
setAttr ($shape[$j]+".overrideDisplayType") 1;
}

string $childs[]=`listRelatives -fullPath -c -type "transform" ($frameH[$i])`;
int $size=size($childs);

setAttr ($childs[($size-1)]+".overrideEnabled") 1;
setAttr ($childs[($size-1)]+".overrideDisplayType") 1;

for($j=0;$j<size($childs)-1;$j++){
setAttr ($childs[$j]+".overrideEnabled") 1;
setAttr ($childs[$j]+".overrideColor") 22;
        }
    }   
}
/////////////////////////////
global proc gtfaceSetupFrameHEdit(){
$teststring=`textField -q -text  "ttgRigNameEF"`;
$gtCN=$teststring;

string $gtCname;
$gtCname=$gtCN+"_";

string $frameH[]=`listRelatives -fullPath -c -type "transform"  ($gtCname+"faceFrame")`;
for($i=0;$i<size($frameH);$i++){

string $shape[]=`listRelatives -fullPath -c -s ($frameH[$i])`;
for($j=0;$j<size($shape);$j++){
setAttr ($shape[$j]+".overrideEnabled") 0;
setAttr ($shape[$j]+".overrideDisplayType") 0;
}

string $childs[]=`listRelatives -fullPath -c -type "transform"  ($frameH[$i])`;
int $size=size($childs);

setAttr ($childs[($size-1)]+".overrideEnabled") 0;
setAttr ($childs[($size-1)]+".overrideDisplayType") 0;

    }
}
/////////////////////////////////
//控制器旋转属性整合绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtRotMasterWin(){
if(`window -ex gtRotMasterWin`) deleteUI -window gtRotMasterWin;
window -wh 410 300 -title "老船动画吧-☆-旋转整合动画绑定工具" gtRotMasterWin;
columnLayout -adj 1 gtColL;

text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1495\"";
formLayout gtform;
///////////////////////////////////////
text -l "旋   转    轴    向："  gttexta;
checkBox -l "X" -v 1 conCheckB3;
checkBox -l "Y" -v 1 conCheckB4;
checkBox -l "Z" -v 1 conCheckB5;
help textFieldButtonGrp;
textFieldButtonGrp  -cw3 80 200 80 -label "物体一：" -text "" -buttonLabel "载入物体" -bc "gtRotconMasterLoadnameA" rotconButA ;
textFieldButtonGrp  -cw3 80 200 80 -label "物体二：" -text "" -buttonLabel "载入物体" -bc "gtRotconMasterLoadnameB" rotconButB ;

button -l "创建旋转控制整合" -c "gtRotMasterTrsProcA;" conBut2;

formLayout -e

-af gttexta left 10 -af gttexta right 10 -af gttexta top 5 

-af conCheckB3 left 50 -ap conCheckB3 right 0 43 -ac conCheckB3 top 5 gttexta
-ac conCheckB4 left 4 conCheckB3 -ap conCheckB4 right 0 70 -ac conCheckB4 top 5 gttexta
-ac conCheckB5 left 4 conCheckB4 -af conCheckB5 right 10 -ac conCheckB5 top 5 gttexta

-af rotconButA left 10 -af rotconButA right 10 -ac rotconButA top 5 conCheckB5
-af rotconButB left 10 -af rotconButB right 10 -ac rotconButB top 5 rotconButA

-af conBut2 left 10 -af conBut2 right 10 -ac conBut2 top 5 rotconButB
  gtform;

showWindow gtRotMasterWin;
}
/////////////////////////////
global proc gtRotconMasterLoadnameA(){
    string $sel[]=`ls -sl`;
    textFieldButtonGrp -e -tx ($sel[0]) rotconButA;
}
////////////////
global proc gtRotconMasterLoadnameB(){
    string $sel[]=`ls -sl`;
    textFieldButtonGrp -e -tx ($sel[0]) rotconButB;
}
//////////////////////////
global proc gtRotMasterTrsProcA (){

int $x=`checkBox -q -v conCheckB3`;
int $y=`checkBox -q -v conCheckB4`;
int $z=`checkBox -q -v conCheckB5`;       
string $conA=`textFieldButtonGrp -q -tx rotconButA`;
string $conB=`textFieldButtonGrp -q -tx rotconButB`;
string $selC[]=`ls -sl`;                                          
int $numC=size($selC);                                           
string $conAA=$conA;                                        
string $conBB=$conB; 
  
for($ii=0;$ii<$numC;$ii++){  
                                        
float $perRot=1.0/($numC+1);                                      
float $mA=1-$perRot*$ii-$perRot; 
float $multA= smoothstep(0,1,$mA);                                                    
float $multB=1-$multA; 

select -r ($selC[$ii]);
group -n ($selC[$ii]+"Rot");
spaceLocator -p 0 0 0 -n ($selC[$ii]+"tempLoc");
select -r ($selC[$ii]);
select -add ($selC[$ii]+"tempLoc");
delete`pointConstraint`;
float $p[]=`xform -q -ws -t -a ($selC[$ii]+"tempLoc")`;  
delete ($selC[$ii]+"tempLoc");
move -a ($p[0]) ($p[1]) ($p[2]) ($selC[$ii]+"Rot.scalePivot") ($selC[$ii]+"Rot.rotatePivot");

select -r  $conBB;
string $attrNam="rotBias"+$ii;
addAttr -ln $attrNam  -at double  -min 0 -max 1 -dv  $multB;
shadingNode -asUtility reverse -n ($selC[$ii]+"reversAA");
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"reversAA.inputX"); 
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"reversAA.inputY"); 
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"reversAA.inputZ"); 
                     
shadingNode -asUtility multiplyDivide -n ($selC[$ii]+"multiplyAA"); 
connectAttr -f ( $conAA+".rotate") ($selC[$ii]+"multiplyAA.input1");   
connectAttr -f ($selC[$ii]+"reversAA.output") ($selC[$ii]+"multiplyAA.input2");   
                 
shadingNode -asUtility multiplyDivide -n ($selC[$ii]+"multiplyBB"); 
connectAttr -f ( $conBB+".rotate") ($selC[$ii]+"multiplyBB.input1");   
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"multiplyBB.input2X"); 
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"multiplyBB.input2Y"); 
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"multiplyBB.input2Z"); 
if($x==1&&$y==1&&$z==1){
shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinAB"); 
connectAttr -force ($selC[$ii]+"multiplyAA.output") ($selC[$ii]+"plusMinAB.input3D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBB.output") ($selC[$ii]+"plusMinAB.input3D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinAB.output3D") ($selC[$ii]+"Rot.rotate"); 
}else{
    
if($x==1){      
shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABX"); 
connectAttr -force ($selC[$ii]+"multiplyAA.outputX") ($selC[$ii]+"plusMinABX.input1D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBB.outputX") ($selC[$ii]+"plusMinABX.input1D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABX.output1D") ($selC[$ii]+"Rot.rx"); 
}

if($y==1){      
shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABY"); 
connectAttr -force ($selC[$ii]+"multiplyAA.outputY") ($selC[$ii]+"plusMinABY.input1D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBB.outputY") ($selC[$ii]+"plusMinABY.input1D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABY.output1D") ($selC[$ii]+"Rot.ry"); 
}
if($z==1){      
shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABZ"); 
connectAttr -force ($selC[$ii]+"multiplyAA.outputZ") ($selC[$ii]+"plusMinABZ.input1D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBB.outputZ") ($selC[$ii]+"plusMinABZ.input1D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABZ.output1D") ($selC[$ii]+"Rot.rz"); 
        }
    }
 }
select ($conB);
print "------------------完成---------------------";
}
/////////////////////////////////
//批量镜像关节绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtMirrorJointToolWin(){
   if(`window -ex gtMirrorJointToolWin`) deleteUI -window gtMirrorJointToolWin;
    window -wh 500 200  -t "老船角色绑定-☆-批量镜像关节绑定工具!" gtMirrorJointToolWin;
    columnLayout -adj 1 mainColumnattr;
     text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1498\"";
  radioButtonGrp  -l "镜像平面" -nrb  3 -la3 "XY" "YZ" "XZ"  -select 2 gtmirrorAxis;
     radioButtonGrp  -l "镜像方式" -nrb  2 -la2 "behavior-行为" "orient-方向"  -select 1 gtmirrorStyle;
    formLayout  gtCOTAF;
    textFieldGrp -l "查找字符" -text "_l_"  gtmirrorBnTextL;
    textFieldGrp -l "替换字符" -text "_r_"  gtmirrorBnTextR;
    
    button  -l "镜像全部关节" -c "gtMirrorBoneProc" but1;
       
    formLayout -e
    -af gtmirrorBnTextL left 5 -af gtmirrorBnTextL top 10 -af gtmirrorBnTextL right 10
    -af gtmirrorBnTextR left 5 -ac gtmirrorBnTextR top 5 gtmirrorBnTextL -af gtmirrorBnTextR right 10
    -af but1 left 5  -ac but1 top 5 gtmirrorBnTextR -af but1 right 10
    
    gtCOTAF;     
    showWindow gtMirrorJointToolWin;   
}
///////////////////////
global proc gtMirrorBoneProc(){
    string $lookfor=`textFieldGrp -q -tx gtmirrorBnTextL`;
    string $replacefor=`textFieldGrp -q -tx gtmirrorBnTextR`;
    int $axis=`radioButtonGrp -q -sl gtmirrorAxis`;    
    int $style=`radioButtonGrp -q -sl gtmirrorStyle`;
        string $ax;
    if($axis==1){
        $ax="-mirrorXY";
    }else if ($axis==2){
        $ax="-mirrorYZ";
    }else{
        $ax="-mirrorXZ";
    }  
string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
        select -r ($sel[$i]);
        if($style==1){
        mirrorJoint ($ax) -mirrorBehavior -searchReplace $lookfor $replacefor;
        }else{
        mirrorJoint ($ax)  -searchReplace $lookfor $replacefor;           
        }
    }
}
////////////////////////////////
//次级扭曲关节绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSecJointsetupWin(){

if(`window -ex gtSecJointsetupWin`) deleteUI  -window gtSecJointsetupWin;
window -wh 400 200 -title "老船动画吧-次级扭曲关节绑定工具" gtSecJointsetupWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1644\"";
   
	intSliderGrp -l "次级关节段数"  -f 1 -v 3 -min 1 -max 10  gtIntsecoundBnNum;
	button  -l "创建次级扭曲关节" -c "gtAddSubBindBnproc" gtIntsecoundBnBut;
separator -style double;	
showWindow gtSecJointsetupWin;
}
////////////////////////////
global proc gtAddSubBindBnproc(){
int $subbnnum=`intSliderGrp -q -v gtIntsecoundBnNum`;
string $sel[]=`ls -sl`;
for($ii=0;$ii<size($sel);$ii++){

int $atrexist=`objExists ($sel[$ii]+".subBnnum")`;
if($atrexist==1){
    string $tempnode[]=`listConnections -s 0 -d 1 ($sel[$ii]+".subBnnum")`;
    if(size($tempnode)>0){
    select -r ($tempnode);
    delete;
    }
}

setAttr ($sel[$ii]+".radius") 0.01;
float $p1[]=`joint -q -p ($sel[$ii])`;
select -r ($sel[$ii]);
pickWalk -d down;
string $endBn[]=`ls -sl`;
float $p2[]=`joint -q -p ($endBn[0])`;

distanceDimension -sp 0 0 0 -ep 1 0 0;
string $selloc[]=`ls -sl`;
select -r $selloc[1];
rename ($sel[$ii]+"Dis");
select -r $selloc[0];
pickWalk -d up;
rename ($sel[$ii]+"Disloc1");
string $loc2[]=`listConnections -s 1 -d 0  ($sel[$ii]+"DisShape.startPoint")`;
rename $loc2[0] ($sel[$ii]+"Disloc2");

select -r ($sel[$ii]);
select -add ($sel[$ii]+"Disloc1");
pointConstraint;

select -r ($endBn[0]);
select -add ($sel[$ii]+"Disloc2");
pointConstraint;
float $armDis=`getAttr  ($sel[$ii]+"DisShape.distance")`;
select -r ($sel[$ii]+"Disloc2");
select -add ($sel[$ii]+"Disloc1");
select -add ($sel[$ii]+"Dis");
delete ;
    select -r ($sel[$ii]);
    int $attrExist=`objExists ($sel[$ii]+".subBnnum")`;
    if($attrExist==0){
    addAttr -ln "subBnnum"  -at long -dv ($subbnnum);
    setAttr -l true ($sel[$ii]+".subBnnum");
    }else{
    setAttr -l 0 ($sel[$ii]+".subBnnum");
    setAttr ($sel[$ii]+".subBnnum") $subbnnum;
    setAttr -l 1 ($sel[$ii]+".subBnnum");
    }
for($i=0;$i<$subbnnum;$i++){
    select -cl;
    joint -p ($p1[0]) ($p1[1]) ($p1[2]) -n ($sel[$ii]+"_BJT"+$i);
    addAttr -ln "num"  -at long; 
    connectAttr -f ($sel[$ii]+".subBnnum") ($sel[$ii]+"_BJT"+$i+".num");
    setAttr -l true ($sel[$ii]+"_BJT"+$i+".num");
joint -p ($p2[0]) ($p2[1]) ($p2[2]) -n ($sel[$ii]+"_endbjt"+$i);
joint -e -zso -oj xyz -sao yup ($sel[$ii]+"_BJT"+$i);
  select -r ($sel[$ii]+"_BJT"+$i);
  select -add ($sel[$ii]);
  parent;
  
    delete ($sel[$ii]+"_endbjt"+$i);
    float $per=($armDis/$subbnnum);
    setAttr ($sel[$ii]+"_BJT"+$i+".tx") (($per/2)+$per*$i);
    shadingNode -asUtility multiplyDivide -n ($sel[$ii]+"_bone"+$i+"multiply");
    addAttr -ln "num"  -at long; 
    connectAttr -f ($sel[$ii]+".subBnnum") ($sel[$ii]+"_bone"+$i+"multiply.num");

    connectAttr -f ($sel[$ii]+".rotateX") ($sel[$ii]+"_bone"+$i+"multiply.input1X");
    connectAttr -f ($sel[$ii]+".subBnnum") ($sel[$ii]+"_bone"+$i+"multiply.input2X");
    setAttr ($sel[$ii]+"_bone"+$i+"multiply.operation") 2;
    shadingNode -asUtility multiplyDivide -n ($sel[$ii]+"_bone"+$i+"multiplyA");
     addAttr -ln "num"  -at long; 
    connectAttr -f ($sel[$ii]+".subBnnum") ($sel[$ii]+"_bone"+$i+"multiplyA.num");

    connectAttr -f ($sel[$ii]+"_bone"+$i+"multiply.outputX") ($sel[$ii]+"_bone"+$i+"multiplyA.input1X");

    setAttr ($sel[$ii]+"_bone"+$i+"multiplyA.input2X") (0-($subbnnum-($i+1)));
    connectAttr -f ($sel[$ii]+"_bone"+$i+"multiplyA.outputX") ($sel[$ii]+"_BJT"+$i+".rotateX");
        }

    }
}
/////////////////////
//通道盒变换及显示属性编辑动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////

global proc gtAttrChannelBoxWin(){

if(`window -ex gtAttrChannelBoxWin`==1){deleteUI -window gtAttrChannelBoxWin;}
window -wh 500 300 -t "老船角色绑定-☆-通道盒变换及显示属性编辑动画工具!"  gtAttrChannelBoxWin;
    columnLayout -adj 1 mainColumnattr;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1646\"";
 setParent..;
   
formLayout colOut;

frameLayout -l "操作选项" -cll 0  optFarm;

radioButtonGrp  -cw3 110  130  130   -numberOfRadioButtons 2 -l "对象物体" 
               -la2 "选择的物体" "所有子物体"  -sl 1 optRangRad;

setParent..;
frameLayout -l "属性" -cll 0  atrFarm;
columnLayout;

checkBoxGrp -cw5 60 80 80 80 80 -numberOfCheckBoxes 4 -l "总控制选项" -la4 "位移" "旋转" "缩放" "显示"  -v1 1 -v2 1 -v3 1 -v4 1 
            -on1 "checkBoxGrp -e -en 1 traCheckBox" 
            -of1 "checkBoxGrp -e -en 0 traCheckBox"
            -on2 "checkBoxGrp -e -en 1 rotCheckBox"
            -of2 "checkBoxGrp -e -en 0 rotCheckBox"
            -on3 "checkBoxGrp -e -en 1 scaCheckBox"
            -of3 "checkBoxGrp -e -en 0 scaCheckBox"
            -on4 "checkBoxGrp -e -en 1 visCheckBox"
            -of4 "checkBoxGrp -e -en 0 visCheckBox"         tagCheckBox;

checkBoxGrp -numberOfCheckBoxes 2 -l "位移" -la2 "keyable" "lock" -v1 1 -v2 0 traCheckBox;
checkBoxGrp -numberOfCheckBoxes 2 -l "旋转"    -la2 "keybale" "lock" -v1 1 -v2 0 rotCheckBox;
checkBoxGrp -ncb 2 -l "缩放" -la2 "keyable" "lock" -v1 1 -v2 0 scaCheckBox;
checkBoxGrp -ncb 2 -l "显示" -la2 "keyable" "lock" -v1 1 -v2 0 visCheckBox;
setParent..;
setParent..;

button -l "应用" -c "gtAttrConAct;" but2;
setParent..;
formLayout -e 
-af optFarm "top" 5 -af optFarm "left" 5 -af optFarm "right" 5
-ac atrFarm "top" 5 optFarm -af atrFarm "left" 5 -af atrFarm "right" 5
-af but2 "bottom" 5 -af but2 "left" 5  -af but2 "right" 5
colOut;
showWindow gtAttrChannelBoxWin;

}

//////////////////////
global proc gtAttrConAct(){
int $optTra=`checkBoxGrp -q -v1 tagCheckBox`;

int $optRot=`checkBoxGrp -q -v2 tagCheckBox`;

int $optScl=`checkBoxGrp -q -v3 tagCheckBox`;

int $optVis=`checkBoxGrp -q -v4 tagCheckBox`;

int $trKey=`checkBoxGrp -q -v1 traCheckBox`;
int $trLoc=`checkBoxGrp -q -v2 traCheckBox`;
int $roKey=`checkBoxGrp -q -v1 rotCheckBox`;
int $roLoc=`checkBoxGrp -q -v2 rotCheckBox`;
int $scKey=`checkBoxGrp -q -v1 scaCheckBox`;
int $scLoc=`checkBoxGrp -q -v2 scaCheckBox`;
int $vsKey=`checkBoxGrp -q -v1 visCheckBox`;
int $vsLoc=`checkBoxGrp -q -v2 visCheckBox`;
int $optRang=`radioButtonGrp -q -sl optRangRad`;

string $sel[];
if($optRang==1){

      $sel=`ls -l -sl`;
       }
   else if($optRang==2){
    select -hi;
    $sel=`ls -l -sl`;
       }

string $attr;
for($i=0;$i<size($sel);$i++){
if((`nodeType $sel[$i]`=="joint")||(`nodeType $sel[$i]`=="transform")||(`nodeType $sel[$i]`=="ikHandle")){
   
   if($optTra==1){
  setAttr -k $trKey -l $trLoc ($sel[$i]+".tx");
  setAttr -k $trKey -l $trLoc ($sel[$i]+".ty");
  setAttr -k $trKey -l $trLoc ($sel[$i]+".tz");
}
if($optScl==1){
  setAttr -k $scKey -l $scLoc ($sel[$i]+".sx");
  setAttr -k $scKey -l $scLoc ($sel[$i]+".sy");
  setAttr -k $scKey -l $scLoc ($sel[$i]+".sz");}
if($optRot==1){
  setAttr -k $roKey -l $roLoc ($sel[$i]+".rx");
  setAttr -k $roKey -l $roLoc ($sel[$i]+".ry");
  setAttr -k $roKey -l $roLoc ($sel[$i]+".rz");}
if($optVis==1){
  setAttr -k $vsKey -l $vsLoc ($sel[$i]+".v");
                }
            }
        }
    }
///////////////////////////
//样条IK骨骼拉伸绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSplineIksetupWin(){

if(`window -ex gtSplineIksetupWin`) deleteUI  -window gtSplineIksetupWin;
window -wh 400 200 -title "老船动画吧-简化样条IK骨骼拉伸绑定工具"  gtSplineIksetupWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1648\"";
	rowColumnLayout -nc 3 -cw 1 100 -cw 2 150 -cw 3 150;
text -l "   "  -h 24  textConName;
textField -text ""  ttgRigConName;
button -l "载入总控制器" -c  "ttgLaodConNamProc;"   loadConNamBut;
setParent..;
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtConradius;
	separator -style double;
	
	intSliderGrp -l "样条IK曲线点简化数量"  -f 1 -v 6 -min 2 -max 50  gtIntIkCVconnumber;

    setParent..;
	rowColumnLayout -nc 4 -cw 1 30 -cw 2 160 -cw 3 50  -cw 4 200 ;
	text -l "     ";
	text -l "创建FK控制：";
    checkBox -l "" -v 1 gtikNoFkBoxB;	
    button -l "创建简化样条IK绑定" -c  "gtiksplinesetup";
    setParent..;
	
separator -style double;	
showWindow gtSplineIksetupWin;
}
/////////////////////
global proc ttgLaodConNamProc(){

string $gtCname="";
string $sel[]=`ls -sl`;
string $teststring=$sel[0];
$gtCname=$teststring;
textField  -e -text $gtCname ttgRigConName;
}
///////////////////////
global proc  gtiksplinesetup(){
        int $fk=`checkBox -q -v gtikNoFkBoxB`;
int $curvePoint=`intSliderGrp -q -v gtIntIkCVconnumber`;

    float $scl=`floatSliderGrp -q -v gtConradius`;
    
int $ikfk=1;
string $sel[]=`ls -sl`;

for($ii=0;$ii<size($sel);$ii++){
    
string $gttextm[];
int $gttextnum=`tokenize ($sel[$ii]) "_" $gttextm`;
string $gtside=($gttextm[1]);

string $childs[]=`listRelatives -c -ad ($sel[$ii])`;
int $segment=size($childs);
string $endbn=$childs[0];
select -r $childs[1];
select -add $endbn;
delete `orientConstraint`;
select -r $endbn;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
string $basebn=$sel[$ii];
if($ikfk==1){

    if($fk==1){
    select -r  $basebn;
   duplicate -rr;
   rename ($basebn+"splineIkBnA");
setAttr ($basebn+"splineIkBnA.radius") 0.01;
    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"splineIkBn"+$i);
setAttr ($basebn+"splineIkBn"+$i+".radius") 0.01;

}

 select -r  $basebn;
duplicate -rr;
   rename ($basebn+"splineFkBnA");
setAttr ($basebn+"splineFkBnA.radius") 0.01;

    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"splineFkBn"+$i);
setAttr ($basebn+"splineFkBn"+$i+".radius") 0.01;

}

 select -r  $basebn;
   rename ($basebn+"BnA");

    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"Bn"+$i);
}

select -r ($basebn+"splineFkBnA");
select -add ($basebn+"splineIkBnA");
select -add ($basebn+"BnA");
string $upconstraintp[]=`parentConstraint`;

shadingNode -asUtility blendColors -n ($basebn+"scaleColorBlend");
connectAttr -f ($basebn+"splineIkBnA.scale") ($basebn+"scaleColorBlend.color1");
connectAttr -f ($basebn+"splineFkBnA.scale") ($basebn+"scaleColorBlend.color2");
connectAttr -f ($basebn+"scaleColorBlend.outputR")  ($basebn+"BnA.scaleX");

 for($i=1;$i<($segment+1);$i++){
select -r ($basebn+"splineFkBn"+$i);
select -add ($basebn+"splineIkBn"+$i);
select -add ($basebn+"Bn"+$i);
string $constraintp[]=`parentConstraint`;
}
 for($i=1;$i<($segment);$i++){
connectAttr -f ($basebn+"BnA.sx") ($basebn+"Bn"+$i+".sx");
}


////////////////////////// 
select -r ($basebn+"splineFkBnA"); 
 for($i=1;$i<($segment+1);$i++){
select -add ($basebn+"splineFkBn"+$i);
}

 string $fksel[]=`ls -sl`;
for($i=0;$i<size($fksel);$i++){
    circle -ch 0 -o on -nr 1 0 0 -r ($scl)  -n ($fksel[$i]+"Con");
    group -n ($fksel[$i]+"ConGrpB");
    group -n ($fksel[$i]+"ConGrp");
    group -n ($fksel[$i]+"ConGrpA");
    select -r ($fksel[$i]);
    select -add ($fksel[$i]+"ConGrpA");
    delete `parentConstraint`;
    select -r ($fksel[$i]+"Con");
    select -add ($fksel[$i]);
    parentConstraint;
   // scaleConstraint;
    setAttr -lock true ($fksel[$i]+"Con.tx");
    setAttr -lock true ($fksel[$i]+"Con.ty");
    setAttr -lock true ($fksel[$i]+"Con.tz");  
    setAttr -lock true ($fksel[$i]+"Con.sx");
    setAttr -lock true ($fksel[$i]+"Con.sy");
    setAttr -lock true ($fksel[$i]+"Con.sz"); 
    string $shape[]=`listRelatives -s ($fksel[$i]+"Con")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }    
    
}

select -r ($basebn+"splineFkBn1ConGrpA");
select -add ($basebn+"splineFkBnACon");
parent;


 for($i=1;$i<($segment);$i++){
int $j=$i+1;
    select -r ($basebn+"splineFkBn"+$j+"ConGrpA");
select -add ($basebn+"splineFkBn"+$i+"Con");
parent;
}
//////////////////////
int $fknumbn=size($fksel);
select -r ($fksel[($fknumbn-1)]+"Con");
addAttr -ln "rotx"  -at double -k 1 ;
addAttr -ln "roty"  -at double -k 1 ;
addAttr -ln "rotz"  -at double -k 1 ;
addAttr -ln "showCon"  -at bool -k 1 ;
   

for($i=0;$i<($fknumbn);$i++){
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.rotx") ($fksel[$i]+"ConGrp.rotateX");
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.roty") ($fksel[$i]+"ConGrp.rotateY");
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.rotz") ($fksel[$i]+"ConGrp.rotateZ");    
}

for($i=0;$i<($fknumbn-1);$i++){
     string $shap[]=`listRelatives -s ($fksel[$i]+"Con")`;
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.showCon") ($shap[0]+".v");    
}
//////////////////////////////////////

select -r ($basebn+"Bn"+$segment);

circle -ch 0 -o on -nr 1 0 0 -r ($scl*0.5)  -n ($basebn+"IKFK");
    group -n ($basebn+"IKFKGrp");
    select -r ($basebn+"Bn"+$segment);
    select -add ($basebn+"IKFKGrp");
    parentConstraint;
    
    setAttr -lock true($basebn+"IKFK.tx");
    setAttr -lock true ($basebn+"IKFK.ty");
    setAttr -lock true ($basebn+"IKFK.tz");  
    setAttr -lock true ($basebn+"IKFK.sx");
    setAttr -lock true ($basebn+"IKFK.sy");
    setAttr -lock true ($basebn+"IKFK.sz");

    setAttr -lock true ($basebn+"IKFK.rx");
    setAttr -lock true ($basebn+"IKFK.ry");
    setAttr -lock true ($basebn+"IKFK.rz"); 
        setAttr -lock true ($basebn+"IKFK.v"); 

   
  select -r ($basebn+"IKFK.cv[1]");
select -tgl ($basebn+"IKFK.cv[3]");
select -tgl ($basebn+"IKFK.cv[5]");
select -tgl ($basebn+"IKFK.cv[7]");

scale -r  0.2 0.2 0.2 ;       

       
select -r ($basebn+"IKFK.cv[0:7]") ;
if($gtside=="r"){
move -r -ls -wd 0 (0-$scl*1.5) 0 ;
}else{
move -r -ls -wd 0 ($scl*1.5) 0 ; 
}

setAttr ($basebn+"IKFK.overrideEnabled") 1;
setAttr ($basebn+"IKFK.overrideColor") 6;
      
////////////

string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
select -r ($conN);
select -add ($basebn+"IKFKGrp");
scaleConstraint;
}

//////////////////
select -r ($basebn+"IKFK");
addAttr -ln "ikfk"  -at double  -min 0 -max 10 -dv 10 -k 1;
shadingNode -asUtility setRange -n  ($basebn+"ikfksetrange");
connectAttr -f ($basebn+"IKFK.ikfk") ($basebn+"ikfksetrange.valueX");
setAttr ($basebn+"ikfksetrange.maxX") 1;
setAttr ($basebn+"ikfksetrange.oldMaxX") 10;
shadingNode -asUtility reverse -n ($basebn+"ikfkreverse");

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($basebn+"ikfkreverse.inputX");

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($upconstraintp[0]+"."+$basebn+"splineIkBnAW1");
connectAttr -f ($basebn+"ikfkreverse.outputX") ($upconstraintp[0]+"."+$basebn+"splineFkBnAW0");

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($basebn+"scaleColorBlend.blender");

 for($i=1;$i<($segment+1);$i++){
    string $constraintpC[]=`listConnections -s 0 -d 1 ($basebn+"splineIkBn"+$i+".scale")`;
connectAttr -f ($basebn+"ikfksetrange.outValueX") ($constraintpC[0]+"."+$basebn+"splineIkBn"+$i+"W1");
connectAttr -f ($basebn+"ikfkreverse.outputX") ($constraintpC[0]+"."+$basebn+"splineFkBn"+$i+"W0");
    }
}else {
     select -r  $basebn;
   rename ($basebn+"splineIkBnA");
    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"splineIkBn"+$i);
    }    
}

select -r ($basebn+"splineIkBnA");
    
}

string $iksel[]=`ls -sl`;
    $basebn=$iksel[0];
    select -r ($basebn);
    pickWalk -d down;
    string $elbowbn[]=`ls -sl`;
    for($i=1;$i<$segment;$i++){
            pickWalk -d down;
    }
    string $end[]=`ls -sl`;
    string $endbn=$end[0];


select -r ($basebn+".rotatePivot") ;
select -add ($endbn+".rotatePivot") ;
ikHandle -sol ikSplineSolver -scv false -roc 1 -pcv false -ns 4;
string $ikhandle[]=`ls -sl`;
select -r ($ikhandle[0]);
rename ($sel[$ii]+"ikhandle");

string $endEffector[]=`listConnections -s 1 -d 0 ($sel[$ii]+"ikhandle.endEffector")`;
setAttr ($endEffector[0]+".visibility") 0;
setAttr -lock true ($endEffector[0]+".v");

string $curve[]=`listConnections -d 0 -s 1 ($sel[$ii]+"ikhandle.inCurve")`;
select -r ($curve[0]);

select -r ($curve[0]+".cv[0:1000]") ;

string $points[]=`ls -sl`;
string $tm[];
int $t=`tokenize ($points[0]) ":" $tm`;
string $gtmm=$tm[1];
string $gttm[];
int $t=`tokenize ($gtmm) "]" $gttm`;
int $pointnum=($gttm[0]);
int $num=$pointnum+1;

select -r ($curve[0]);
rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($curvePoint-1) -d 3 -tol 0.01 ($curve[0]);;

select -r ($curve[0]+".cv[0:1000]") ;
string $points[]=`ls -sl`;
string $tm[];
int $t=`tokenize ($points[0]) ":" $tm`;
string $gtmm=$tm[1];
string $gttm[];
int $t=`tokenize ($gtmm) "]" $gttm`;
int $pointnum=($gttm[0]);
int $num=$pointnum+1;
//////////////////

select -r ($curve[0]);
duplicate -rr;
rename ($curve[0]+"temp");
float $pos[]=`joint -q -p ($basebn)`;
select -cl;
joint -p $pos[0] $pos[1] $pos[2] -n ($curve[0]+"tempBn0");

for($i=2;$i<($num-2);$i++){
    int $j=$i-1;
select -r ($curve[0]+"temp.cv["+$i+"]");
newCluster " -envelope 1";
rename ($curve[0]+"cluster"+$j);
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc"+$j);
select -r ($curve[0]+"cluster"+$j);
select -add ($curve[0]+"loc"+$j);
delete `parentConstraint`;
select -r ($curve[0]+"cluster"+$j);
select -add ($curve[0]+"loc"+$j);
parent;
float $pos[]=`getAttr ($curve[0]+"loc"+$j+".translate")`;
select -r ($curve[0]+"tempBn"+($j-1));
joint -p $pos[0] $pos[1] $pos[2] -n ($curve[0]+"tempBn"+$j);
select -r ($curve[0]+"loc"+$j);
delete;
}
float $pos[]=`joint -q -p ($endbn)`;
select -r ($curve[0]+"tempBn"+($num-4));
joint -p $pos[0] $pos[1] $pos[2] -n ($curve[0]+"tempBn"+($num-3));
select -r ($curve[0]+"tempBn0");
joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;

select -r ($curve[0]+"temp");
delete;

///////////////////////////

float $xx[]=`xform -q -ws -t ($basebn)`;
if($xx[0]<0){
   select -r ($curve[0]+"tempBn0") ; 
    rename ($curve[0]+"tempBnA0") ; 
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBnB0") ; 
    joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"tempBn0") ;    
    select -r ($curve[0]+"tempBnA0") ($curve[0]+"tempBnB0"); 
    delete;
    }
    
select -r ($curve[0]+"tempBn"+($num-4));
select -add ($curve[0]+"tempBn"+($num-3));
delete`orientConstraint`;
select -r ($curve[0]+"tempBn"+($num-3));
makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;    
/////////////////////////

select -r ($curve[0]+".cv[0:1]");
newCluster " -envelope 1";
rename ($curve[0]+"cluster0");
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc0");
select -r ($curve[0]+"tempBn0");
select -add ($curve[0]+"loc0");
delete `parentConstraint`;
select -r ($curve[0]+"cluster0");
select -add ($curve[0]+"loc0");
parent;

for($i=2;$i<($num-2);$i++){
    int $j=$i-1;
select -r ($curve[0]+".cv["+$i+"]");
newCluster " -envelope 1";
rename ($curve[0]+"cluster"+$j);
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc"+$j);
select -r ($curve[0]+"tempBn"+$j);
select -add ($curve[0]+"loc"+$j);
delete `parentConstraint`;
select -r ($curve[0]+"cluster"+$j);
select -add ($curve[0]+"loc"+$j);
parent;
}

int $lastNum=($num-2);
select -r ($curve[0]+".cv["+$lastNum+":10000]");
newCluster " -envelope 1";
rename ($curve[0]+"cluster"+($lastNum-1));
spaceLocator -p 0 0 0;
rename ($curve[0]+"loc"+($lastNum-1));
select -r ($curve[0]+"tempBn"+($lastNum-1));
select -add ($curve[0]+"loc"+($lastNum-1));
delete `parentConstraint`;
select -r ($curve[0]+"cluster"+($lastNum-1));
select -add ($curve[0]+"loc"+($lastNum-1));
parent;

select -r ($curve[0]+"tempBn0");
delete;

select -cl;
for($i=0;$i<($num-2);$i++){
select -add ($curve[0]+"loc"+$i);
}

string $locsel[]=`ls -sl`;
select -cl;

for($i=0;$i<size($locsel);$i++){
    float $p[]=`getAttr  ($locsel[$i]+".translate")`;
joint -p  ($p[0])  ($p[1]) ($p[2]) -n ($curve[0]+"bn"+$i);  
}

select -r ($curve[0]+"bn0"); 
joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;

/////////////////
if($xx[0]<0){
   select -r ($curve[0]+"bn0") ; 
    rename ($curve[0]+"bnA0") ; 
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"bnB0") ; 
    joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;
    mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "" "";
    rename ($curve[0]+"bn0") ;    
    select -r ($curve[0]+"bnA0") ($curve[0]+"bnB0"); 
    delete;
    }
    
//////////////
select -r ($curve[0]+"bn"+($num-4)); 
select -add ($curve[0]+"bn"+($num-3)); 
delete `orientConstraint`;
select -r ($curve[0]+"bn"+($num-3)); 
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

group -em; xform -os -piv 0 0 0;
rename ($curve[0]+"ikConGrp");

for($i=0;$i<($num-2);$i++){

curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($curve[0]+"Con"+$i);
group -n ($curve[0]+"ConGrp"+$i);
group -n ($curve[0]+"ConGrpA"+$i);

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
if($gtside=="r"){
    setAttr ($curve[0]+"ConGrpA"+$i+".sz") -1;
    setAttr ($curve[0]+"ConGrpA"+$i+".sx") -1;
    setAttr ($curve[0]+"ConGrpA"+$i+".sy") -1;
}
select -r ($curve[0]+"bn"+$i); 
select -add ($curve[0]+"ConGrpA"+$i);
delete `parentConstraint`;
select -r ($curve[0]+"loc"+$i);
select -add ($curve[0]+"Con"+$i);
parent;


select -r ($curve[0]+"ConGrpA"+$i);
select -add ($curve[0]+"ikConGrp");
parent;
setAttr ($curve[0]+"loc"+$i+".visibility") 0;
setAttr -lock true ($curve[0]+"loc"+$i+".v");

setAttr -lock true ($curve[0]+"Con"+$i+".rx");
setAttr -lock true ($curve[0]+"Con"+$i+".ry");
setAttr -lock true ($curve[0]+"Con"+$i+".rz");
setAttr -lock true ($curve[0]+"Con"+$i+".sx");
setAttr -lock true ($curve[0]+"Con"+$i+".sy");
setAttr -lock true ($curve[0]+"Con"+$i+".sz");
setAttr -lock true ($curve[0]+"Con"+$i+".v");

    string $shape[]=`listRelatives -s ($curve[0]+"Con"+$i)`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }  
}

select -r ($curve[0]+"bn0"); 
delete;
//////////////////////////////////////
select -r ($curve[0]);
arclen -ch 1;

string $shapeAA[]=`listRelatives -s ($curve[0])`;
string $infoA[]=`listConnections -s 0 -d 1 ($shapeAA[0]+".worldSpace[0]")`;
float $legUplen=`getAttr ($infoA[0]+".arcLength")`;

shadingNode -asUtility multiplyDivide -n ($curve[0]+"disMulF") ;

string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
    connectAttr -f ($conN+".sy") ($curve[0]+"disMulF.input1X");
}else{
setAttr ($curve[0]+"disMulF.input1X") 1;}

setAttr ($curve[0]+"disMulF.input2X") $legUplen ;


shadingNode -asUtility multiplyDivide -n ($curve[0]+"disMul") ;
shadingNode -asUtility condition -n ($curve[0]+"disCnd") ;
connectAttr -f ($infoA[0]+".arcLength") ($curve[0]+"disMul.input1X");
setAttr ($curve[0]+"disMul.operation") 2;

connectAttr -f  ($curve[0]+"disMulF.outputX") ($curve[0]+"disMul.input2X");

connectAttr -f ($curve[0]+"disMul.outputX") ($curve[0]+"disCnd.firstTerm");
connectAttr -f ($curve[0]+"disMul.outputX") ($curve[0]+"disCnd.colorIfTrueR");

setAttr ($curve[0]+"disCnd.secondTerm") 1;
setAttr ($curve[0]+"disCnd.operation") 2;

shadingNode -asUtility condition -n ($curve[0]+"disclampCnd") ;
connectAttr -f ($curve[0]+"disCnd.outColorR")  ($curve[0]+"disclampCnd.firstTerm");
connectAttr -f ($curve[0]+"disCnd.outColorR")  ($curve[0]+"disclampCnd.colorIfTrueR");

setAttr ($curve[0]+"disclampCnd.operation") 4;

select -r ($curve[0]);
addAttr -ln "strech"  -at double  -min 1 -max 10 -dv 1.2 -k 1;
addAttr -ln "shortlength"  -at double  -min 0.01 -max 10 -dv 1 -k 1;

connectAttr -f ($curve[0]+".shortlength") ($curve[0]+"disCnd.secondTerm");
connectAttr -f ($curve[0]+".shortlength") ($curve[0]+"disCnd.colorIfFalseR");

connectAttr -f ($curve[0]+".strech")  ($curve[0]+"disclampCnd.secondTerm");
connectAttr -f ($curve[0]+".strech")  ($curve[0]+"disclampCnd.colorIfFalseR");
string $ik[]=`listConnections -s 0 -d 1 ($shapeAA[0]+".worldSpace[0]")`;

string $ikHandle=$ik[1];
string $startjoint[]=`listConnections -s 1 -d 0 ($ikHandle+".startJoint")`;
string $endeffector[]=`listConnections -s 1 -d 0 ($ikHandle+".endEffector")`;
select -r ($endeffector);
pickWalk -d up;
string $endjoint[]=`ls -sl`;

string $curentjoint=($startjoint[0]);
string $selectbn="select -r ";
while($curentjoint != $endjoint[0]){
    $selectbn+=($curentjoint+" ");
    select -r $curentjoint;
    pickWalk -d down;
    string $joint[]=`ls -sl`;
    $curentjoint=$joint[0];
}

    $selectbn+=($endjoint[0]+";");

eval $selectbn;
string $bn[]=`ls -sl`;
for($i=0;$i<size($bn);$i++){
    connectAttr -f ($curve[0]+"disclampCnd.outColorR") ($bn[$i]+".scaleX");
}

/////////////////////////

select -r ($curve[0]+"Con"+($num-3)); 

string $rollCon[]=`ls -sl`;
setAttr -lock 0 ($rollCon[0]+".rx");
setAttr -lock 0 ($rollCon[0]+".ry");
setAttr -lock 0 ($rollCon[0]+".rz");
select -r ($rollCon[0]);

addAttr -ln "twistMulti"  -at double  -min 0.1 -max 5 -dv 1.0 -k 1;
addAttr -ln "strech"  -at double  -min 1 -max 10 -dv 1.2 -k 1;
addAttr -ln "shortlength"  -at double  -min 0.01 -max 10 -dv 1 -k 1;

shadingNode -asUtility multiplyDivide -n ($sel[$ii]+"iksplinetwistmul");
connectAttr -f ($rollCon[0]+".rx") ($sel[$ii]+"iksplinetwistmul.input1X");
connectAttr -f ($rollCon[0]+".twistMulti") ($sel[$ii]+"iksplinetwistmul.input2X");
connectAttr -f ($sel[$ii]+"iksplinetwistmul.outputX") ($ikHandle+".twist");

connectAttr -f   ($curve[0]+"Con0.rx") ($ikHandle+".roll");
setAttr -lock 0 ($curve[0]+"Con0.rx");

connectAttr -f ($rollCon[0]+".strech") ($curve[0]+".strech");
connectAttr -f ($rollCon[0]+".shortlength") ($curve[0]+".shortlength");

///////////////////
if($ikfk==1&&$fk==1){
select -r ($sel[$ii]+"IKFK") ;
shadingNode -asUtility condition -n ($sel[$ii]+"IKFKshowIkCondition");
connectAttr -f ($sel[$ii]+"IKFK.ikfk") ($sel[$ii]+"IKFKshowIkCondition.firstTerm");
shadingNode -asUtility condition -n ($sel[$ii]+"IKFKshowFkCondition");
connectAttr -f ($sel[$ii]+"IKFK.ikfk") ($sel[$ii]+"IKFKshowFkCondition.firstTerm");
setAttr ($sel[$ii]+"IKFKshowFkCondition.secondTerm") 10;

connectAttr -f ($sel[$ii]+"IKFKshowFkCondition.outColorR") ($sel[$ii]+"splineFkBnAConGrpA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($curve[0]+"ikConGrp.visibility");

connectAttr -f ($sel[$ii]+"IKFKshowFkCondition.outColorR") ($sel[$ii]+"splineFkBnA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"splineIkBnA.visibility");
}

select -r ($ikHandle) ;
select -add ($curve[0]) ;
group -n ($sel[$ii]+"iksplineGrp");
if($fk==1)select -add ($sel[$ii]+"IKFKGrp");
group -n  ($sel[$ii]+"DonotmoveConGrp");

setAttr ($sel[$ii]+"iksplineGrp.visibility") 0;
setAttr -lock true ($sel[$ii]+"iksplineGrp.v");
    }
print "......................IK CON DONW...........................";
}
///////////////////////////
//批量随机摆放物体动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtRandWin(){
if(`window -ex gtRandWin`) deleteUI -window gtRandWin;
window -wh 400 500 -title "老船角色绑定-☆-批量随机摆放物体动画工具!" gtRandWin;
columnLayout -adj 1 gtColL;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1650\"";
formLayout gtformLRand;
text -l "位移:" text1;
checkBox -l "X" -v 0  CB1;
checkBox -l "Y" -v 0  CB2;
checkBox -l "Z" -v 0  CB3;
floatSliderGrp -l "最小值:"  -v 0 -f 1 -fmn -10000 -fmx 10000 -min -100 -max 100 floatF1;
floatSliderGrp -l "最大值:"  -v 0 -f 1 -fmn -10000 -fmx 10000 -min -100 -max 100 floatF2;
button -l "应用" -c "gtRand" but1;
formLayout -e 
-af text1 left 30 -af text1 top 10 -ap text1 right 0 30 
-ac CB1 left 4 text1 -af CB1 top 10 -ap CB1 right 0 50 
-ac CB2 left 4 CB1 -af CB2 top 10 -ap CB2 right 0 70
-ac CB3 left 4 CB2 -af CB3 top 10 -af CB3 right 30 

-af floatF1 left 10 -ac floatF1 top 5 CB1 -af floatF1 right 10

-af floatF2 left 10 -ac floatF2 top 5 floatF1 -af floatF2 right 10
-af but1 left 10 -af but1 right 10 -ac but1 top 5 floatF2 
gtformLRand;
/////////
setParent..;
separator -style "double";
formLayout gtformLRandR;

text -l "旋转:" text1;
checkBox -l "X" -v 0  RCB1;
checkBox -l "Y" -v 0  RCB2;
checkBox -l "Z" -v 0  RCB3;
floatSliderGrp -l "最小值:"  -v 0 -f 1 -fmn -10000 -fmx 10000 -min -100 -max 100 RfloatF1;
floatSliderGrp -l "最大值:"  -v 0 -f 1 -fmn -10000 -fmx 10000 -min -100 -max 100 RfloatF2;
button -l "应用" -c "gtRandR" but1;
formLayout -e 

-af text1 left 30 -af text1 top 10 -ap text1 right 0 30 
-ac RCB1 left 4 text1 -af RCB1 top 10 -ap RCB1 right 0 50 
-ac RCB2 left 4 RCB1 -af RCB2 top 10 -ap RCB2 right 0 70
-ac RCB3 left 4 RCB2 -af RCB3 top 10 -af RCB3 right 30 

-af RfloatF1 left 10 -ac RfloatF1 top 5 RCB1 -af RfloatF1 right 10

-af RfloatF2 left 10 -ac RfloatF2 top 5 RfloatF1 -af RfloatF2 right 10
-af but1 left 10 -af but1 right 10 -ac but1 top 5 RfloatF2 
gtformLRandR;
/////////
setParent..;
string $onc="checkBox -e -en 0 SCB1;checkBox -e -en 0 SCB2;checkBox -e -en 0 SCB3;";
string $ofc="checkBox -e -en 1 SCB1;checkBox -e -en 1 SCB2;checkBox -e -en 1 SCB3;";

separator -style "double";
formLayout gtformLRandS;
text -l "缩放:" textA;
checkBox -l "等比" -ofc $ofc -onc $onc SCB;
text -l "" text1;
checkBox -l "X" -v 0  SCB1;
checkBox -l "Y" -v 0  SCB2;
checkBox -l "Z" -v 0  SCB3;
floatSliderGrp -l "最小值:"  -v 0 -f 1 -fmn -10000 -fmx 10000 -min -100 -max 100 SfloatF1;
floatSliderGrp -l "最大值:"  -v 0 -f 1 -fmn -10000 -fmx 10000 -min -100 -max 100 SfloatF2;
button -l "应用" -c "gtRandS" but1;
formLayout -e 

-af textA left 30 -af textA top 10 -ap textA right 0 30
-ac SCB left 4 textA -af SCB top 10 -ap SCB right 0 50 

-af text1 left 30 -ac text1 top 5 textA -ap text1 right 0 30 
-ac SCB1 left 4 text1 -ac SCB1 top 5 textA -ap SCB1 right 0 50 
-ac SCB2 left 4 SCB1 -ac SCB2 top 5 textA -ap SCB2 right 0 70
-ac SCB3 left 4 SCB2 -ac SCB3 top 5 textA -af SCB3 right 30 

-af SfloatF1 left 10 -ac SfloatF1 top 5 SCB1 -af SfloatF1 right 10

-af SfloatF2 left 10 -ac SfloatF2 top 5 SfloatF1 -af SfloatF2 right 10
-af but1 left 10 -af but1 right 10 -ac but1 top 5 SfloatF2 
gtformLRandS;
setParent..;
showWindow gtRandWin;
}
//////////////////
global proc gtRand(){
string $sel[]=`ls -sl`;
float $min=`floatSliderGrp -q -v  floatF1`;
float $max=`floatSliderGrp -q -v  floatF2`;

int $tx=`checkBox -q -v CB1`;
int $ty=`checkBox -q -v CB2`;
int $tz=`checkBox -q -v CB3`;

if($tx==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".tx") $v;}
}
if($ty==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".ty") $v;}
}
if($tz==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".tz") $v;}
    }
}
//////////////////
global proc gtRandR(){
string $sel[]=`ls -sl`;
float $min=`floatSliderGrp -q -v  RfloatF1`;

float $max=`floatSliderGrp -q -v RfloatF2`;

int $rx=`checkBox -q -v RCB1`;
int $ry=`checkBox -q -v RCB2`;
int $rz=`checkBox -q -v RCB3`;

if($rx==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".rx") $v;}
}
if($ry==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".ry") $v;}
}
if($rz==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".rz") $v;}
    }
}
//////////////
global proc gtRandS(){
string $sel[]=`ls -sl`;
float $min=`floatSliderGrp -q -v  SfloatF1`;

float $max=`floatSliderGrp -q -v SfloatF2`;
int $stateS=`checkBox -q -v SCB`;
if($stateS!=1){
int $sx=`checkBox -q -v SCB1`;
int $sy=`checkBox -q -v SCB2`;
int $sz=`checkBox -q -v SCB3`;

if($sx==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".sx") $v;}
}
if($sy==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".sy") $v;}
}
if($sz==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".sz") $v;}
    }
}
if($stateS==1){
for($i=0;$i<size($sel);$i++){
float $v=rand($min,$max);
setAttr ($sel[$i]+".sx") $v;
setAttr ($sel[$i]+".sy") $v;
setAttr ($sel[$i]+".sz") $v;
        }
    }
}
//////////////////////////////
//模型顶点烘焙关键帧动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtbakepolygonAnimWin(){

if(`window -ex gtbakepolygonAnimWin`) deleteUI  -window gtbakepolygonAnimWin;
window -wh 400 200 -title "老船动画吧-模型顶点烘焙关键帧动画工具" gtbakepolygonAnimWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1706\"";
text -l "注意：该动画工具是为模型顶点烘焙关键帧\n模型顶点较多时，烘焙时间会比较长";

    intFieldGrp -l "开始帧"   -v1 1  gtStartFploy;
    intFieldGrp -l "结束帧"   -v1 24  gtEndFploy;

	button  -l "烘焙模型顶点关键帧" -c "gtbakepolygon" gtIntsecoundBnBut;
separator -style double;	
showWindow gtbakepolygonAnimWin;
}

global proc gtbakepolygon(){
    int $start=`intFieldGrp -q -v1 gtStartFploy`;
    int $end=`intFieldGrp -q -v1 gtEndFploy`;
    
    string $sel[]=`ls -sl`;
    int $ex=`objExists ($sel[0]+"bakedMeshGrp")`;
    if($ex==0){
        group -empty -n ($sel[0]+"bakedMeshGrp");
    }
    for($i=0;$i<size($sel);$i++){
    select -r ($sel[$i]);
    duplicate -rr;
    rename ($sel[$i]+"bakedMesh");
    
     string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
		for ($ii = 0; $ii < 9; $ii++)
		{
	     setAttr -l 0 ($sel[$i]+"bakedMesh" + $UnlockAttributes[$ii]);
	         }
	 select -add ($sel[0]+"bakedMeshGrp");
	 parent;
	 }
	 global string $gMainProgressBar;

	 for($ii=$start;$ii<($end+1);$ii++){
               currentTime -e $ii;

	         for($i=0;$i<size($sel);$i++){
	             select -r ($sel[$i]+".vtx[0:999999]");
	             string $vex[]=`ls -sl -fl`;
	             progressBar -e -st ("烘焙模型顶点："+$sel[$i]+"模型-第："+$ii+"帧") -bp -ii 1 -min 0 -max `size($vex)` $gMainProgressBar;

	             for($j=0;$j<size($vex);$j++){
	                if (`progressBar -q -ic $gMainProgressBar`)
            		break;
                	progressBar -e -s 1 $gMainProgressBar;
	                 //select -r ($sel[$i]+".vtx["+$j+"]");
	                 float $pos[]=`xform -q -ws -t -a ($sel[$i]+".vtx["+$j+"]")`;
	                 select -r ($sel[$i]+".vtx["+$j+"]");
	                 xform -ws -a -t $pos[0] $pos[1] $pos[2] ($sel[$i]+"bakedMesh.vtx["+$j+"]"); 
	                 }  
	              select -r  ($sel[$i]+"bakedMesh.vtx[0:999999]");
	              SetKey;                        
                progressBar -e -ep $gMainProgressBar;
	      }	     
	 } 	
}  
//控制器缩放属性整合绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtSclMasterWin(){
if(`window -ex gtSclMasterWin`) deleteUI -window gtSclMasterWin;
window -wh 410 300 -title "老船动画吧-控制器缩放属性整合绑定工具" gtSclMasterWin;
columnLayout -adj 1 gtColL;

text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1708\"";
formLayout gtform;

///////////////////////////////////////
text -l "缩    放    轴    向："  gttexta;
checkBox -l "X" -v 1 conCheckB3;
checkBox -l "Y" -v 1 conCheckB4;
checkBox -l "Z" -v 1 conCheckB5;
help textFieldButtonGrp;
textFieldButtonGrp  -cw3 80 200 80 -label "控制器一：" -text "载入起始端控制器" -buttonLabel "载入起始端控制器" -bc "gtSclconMasterLoadnameA" sclconButA ;
textFieldButtonGrp  -cw3 80 200 80 -label "控制器二：" -text "载入结束端控制器" -buttonLabel "载入起始端控制器" -bc "gtSclconMasterLoadnameB" sclconButB ;

button -l "创建缩放控制整合" -c "gtSclMasterTrsProcA;" conBut2;
frameLayout -l "使用说明" -cll 1 -cl 1 gtFrameLayout;

string $shuoming="";
    $shuoming+="控制器整合：\n需要从起始端按顺序选择被控制器的物体\n控制器必须有干净的变换属性";
text -l ($shuoming) text1;
//help frameLayout;
formLayout -e

-af gttexta left 10 -af gttexta right 10 -af gttexta top 5 

-af conCheckB3 left 50 -ap conCheckB3 right 0 43 -ac conCheckB3 top 5 gttexta
-ac conCheckB4 left 4 conCheckB3 -ap conCheckB4 right 0 70 -ac conCheckB4 top 5 gttexta
-ac conCheckB5 left 4 conCheckB4 -af conCheckB5 right 10 -ac conCheckB5 top 5 gttexta

-af sclconButA left 10 -af sclconButA right 10 -ac sclconButA top 5 conCheckB5
-af sclconButB left 10 -af sclconButB right 10 -ac sclconButB top 5 sclconButA

-af conBut2 left 10 -af conBut2 right 10 -ac conBut2 top 5 sclconButB
-af gtFrameLayout left 10 -af gtFrameLayout right 10 -ac gtFrameLayout top 4 conBut2
  gtform;

showWindow gtSclMasterWin;
}
/////////////////////////////
global proc gtSclconMasterLoadnameA(){
    string $sel[]=`ls -sl`;
    textFieldButtonGrp -e -tx ($sel[0]) sclconButA;
}
////////////////
global proc gtSclconMasterLoadnameB(){
    string $sel[]=`ls -sl`;
    textFieldButtonGrp -e -tx ($sel[0]) sclconButB;
}
//////////////////////////
global proc gtSclMasterTrsProcA (){

int $x=`checkBox -q -v conCheckB3`;
int $y=`checkBox -q -v conCheckB4`;
int $z=`checkBox -q -v conCheckB5`;       
string $conA=`textFieldButtonGrp -q -tx sclconButA`;
string $conB=`textFieldButtonGrp -q -tx sclconButB`;
string $selC[]=`ls -sl`;                                          
int $numC=size($selC);                                           
string $conAA=$conA;                                        
string $conBB=$conB; 
  
for($ii=0;$ii<$numC;$ii++){  
                                        
float $perRot=1.0/($numC+1);                                      
float $mA=1-$perRot*$ii-$perRot; 
float $multA= smoothstep(0,1,$mA);                                                    
float $multB=1-$multA; 

select -r ($selC[$ii]);
group -n ($selC[$ii]+"Scl");
spaceLocator -p 0 0 0 -n ($selC[$ii]+"tempLoc");
select -r ($selC[$ii]);
select -add ($selC[$ii]+"tempLoc");
delete`pointConstraint`;
float $p[]=`xform -q -ws -t -a ($selC[$ii]+"tempLoc")`;  
delete ($selC[$ii]+"tempLoc");
move -a ($p[0]) ($p[1]) ($p[2]) ($selC[$ii]+"Scl.scalePivot") ($selC[$ii]+"Scl.rotatePivot");

select -r  $conBB;
string $attrNam="sclBias"+$ii;
addAttr -ln $attrNam  -at double  -min 0 -max 1 -dv  $multB;
shadingNode -asUtility reverse -n ($selC[$ii]+"reversAA");
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"reversAA.inputX"); 
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"reversAA.inputY"); 
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"reversAA.inputZ"); 
 
shadingNode -asUtility multiplyDivide -n ($selC[$ii]+"multiplyAAS"); 
connectAttr -f ( $conAA+".scale") ($selC[$ii]+"multiplyAAS.input1"); 
connectAttr -f ($selC[$ii]+"reversAA.output") ($selC[$ii]+"multiplyAAS.input2") ;   
                              
shadingNode -asUtility multiplyDivide -n ($selC[$ii]+"multiplyBBS"); 
connectAttr -f ( $conBB+".scale") ($selC[$ii]+"multiplyBBS.input1");
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"multiplyBBS.input2Y") ;
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"multiplyBBS.input2Z");
connectAttr -f ($conBB+"."+$attrNam) ($selC[$ii]+"multiplyBBS.input2X");

if($x==1&&$y==1&&$z==1){                              
shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABS"); 
connectAttr -force ($selC[$ii]+"multiplyAAS.output") ($selC[$ii]+"plusMinABS.input3D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBBS.output") ($selC[$ii]+"plusMinABS.input3D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABS.output3D") ($selC[$ii]+"Scl.scale"); 
}else{
    
   if($x==1){
    shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABSX"); 
connectAttr -force ($selC[$ii]+"multiplyAAS.outputX") ($selC[$ii]+"plusMinABSX.input1D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBBS.outputX") ($selC[$ii]+"plusMinABSX.input1D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABSX.output1D") ($selC[$ii]+"Scl.sx");    
   } 
   
    if($y==1){
    shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABSY"); 
connectAttr -force ($selC[$ii]+"multiplyAAS.outputY") ($selC[$ii]+"plusMinABSY.input1D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBBS.outputY") ($selC[$ii]+"plusMinABSY.input1D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABSY.output1D") ($selC[$ii]+"Scl.sy");    
   } 
       if($z==1){
    shadingNode -asUtility plusMinusAverage -n ($selC[$ii]+"plusMinABSZ"); 
connectAttr -force ($selC[$ii]+"multiplyAAS.outputZ") ($selC[$ii]+"plusMinABSZ.input1D[0]"); 
connectAttr -force ($selC[$ii]+"multiplyBBS.outputZ") ($selC[$ii]+"plusMinABSZ.input1D[1]"); 
connectAttr -f ($selC[$ii]+"plusMinABSZ.output1D") ($selC[$ii]+"Scl.sz");    
               }   
            }
        }
select ($conA);
print "------------------完成---------------------";
}
/////////////////
//MAYA粒子爆炸动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtExplosivesWin(){
if(`window -ex gtExplosivesWin`==1) deleteUI -window gtExplosivesWin;
window -t "老船角色绑定-☆-粒子爆炸动画工具!!!"  -wh 300 200 gtExplosivesWin;
columnLayout -adj 1;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1710\"";

string $form=`formLayout gtForm`;

text -l "名      称：" text1;
textField  -text "explosive" gtEfireTextF;
button -l "应用" -c "gtExplosivesCreatePro;" but2;

setParent..;
formLayout -e
-af text1 left 15 -ap text1 right 0 38 -af text1 top 12
-ap gtEfireTextF left 0 38 -af gtEfireTextF right 15 -af gtEfireTextF top 12 
-af but2 left 15 -af but2 right 15 -ac but2 top 5 gtEfireTextF
$form;
showWindow gtExplosivesWin;
}

global proc gtExplosivesCreatePro(){

string $EfN=`textField -q -tx gtEfireTextF`;

string $selCollisionObj[]=`ls -sl`;
int $collisionObjEx=`size($selCollisionObj)`;
if( $collisionObjEx>0){
for($i=0;$i<$collisionObjEx;$i++){
string $objnam[]=`listRelatives -c $selCollisionObj[0]`;
string $typeSel=`objectType $objnam[0]`;
if($typeSel!="mesh"&&$typeSel!="nurbsSurface"){
error "the selected object should be mesh or nurbs";
}
}
}
emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 100 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 0.8 -n ($EfN+"gtEbase_emitter1");
emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 100 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 0.9 -n ($EfN+"gtEbase_emitter2");
emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 100 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 1 -n ($EfN+"gtEbase_emitter3");

particle -n ($EfN+"gtEbase_particle");

connectDynamic -em ($EfN+"gtEbase_emitter1") ($EfN+"gtEbase_particle");
connectDynamic -em ($EfN+"gtEbase_emitter2") ($EfN+"gtEbase_particle");
connectDynamic -em ($EfN+"gtEbase_emitter3") ($EfN+"gtEbase_particle");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEbase_emitter1.rate");
setKeyframe -t 5 -v 160 -itt spline -ott spline ($EfN+"gtEbase_emitter1.rate");
setKeyframe -t 10 -v 0 -itt spline -ott spline ($EfN+"gtEbase_emitter1.rate");
selectKey -add -k -t 5 ($EfN+"gtEbase_emitter1_rate") ;
keyTangent -edit -weightedTangents true;
keyTangent -weightLock off;
keyTangent -e -a -t 5 -outAngle 9.5 -outWeight 5.0 ($EfN+"gtEbase_emitter1_rate") ;

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEbase_emitter2.rate");
setKeyframe -t 10 -v 180 -itt spline -ott spline ($EfN+"gtEbase_emitter2.rate");
setKeyframe -t 17 -v 0 -itt spline -ott spline ($EfN+"gtEbase_emitter2.rate");
selectKey -add -k -t 10 ($EfN+"gtEbase_emitter2_rate") ;
keyTangent -edit -weightedTangents true;
keyTangent -weightLock off;
keyTangent -e -a -t 10 -outAngle 0 -outWeight 7.0 ($EfN+"gtEbase_emitter2_rate") ;

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEbase_emitter3.rate");
setKeyframe -t 20 -v 200 -itt spline -ott spline ($EfN+"gtEbase_emitter3.rate");
setKeyframe -t 27 -v 0 -itt spline -ott spline ($EfN+"gtEbase_emitter3.rate");
selectKey -add -k -t 20 ($EfN+"gtEbase_emitter3_rate") ;
keyTangent -edit -weightedTangents true;
keyTangent -weightLock off;
keyTangent -e -a -t 20 -outAngle 0 -outWeight 7.0 ($EfN+"gtEbase_emitter3_rate") ;

setAttr ($EfN+"gtEbase_particleShape.seed[1]") 4;
setAttr ($EfN+"gtEbase_particleShape.seed[2]") 7;
setAttr ($EfN+"gtEbase_particleShape.seed[0]") 1;

gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEbase_gravity");
connectDynamic -f ($EfN+"gtEbase_gravity")  ($EfN+"gtEbase_particle");

turbulence -pos 0 0 0 -m 5 -att 0 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEbase_turbulence") ;
connectDynamic -f ($EfN+"gtEbase_turbulence")  ($EfN+"gtEbase_particle");

drag -pos 0 0 0 -m 3 -att 0 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEbase_drag");
connectDynamic -f ($EfN+"gtEbase_drag") ($EfN+"gtEbase_particle");

setAttr ($EfN+"gtEbase_particleShape.lifespanMode") 3;

string $gtEbaseRad="vector $speed=";
       $gtEbaseRad+=($EfN);
       $gtEbaseRad+="gtEbase_particleShape.velocity;\r\nif($speed.y<0.2)\r\n{";
       $gtEbaseRad+=($EfN);
       $gtEbaseRad+="gtEbase_particleShape.lifespanPP=rand(0.001,0.005);}\r\nelse{\r\n";
       $gtEbaseRad+=($EfN);
       $gtEbaseRad+="gtEbase_particleShape.lifespanPP=3.5;\r\n}";

dynExpression -s $gtEbaseRad -rad ($EfN+"gtEbase_particleShape");

select -r ($EfN+"gtEbase_particle") ;
emitter -type omni  -name ($EfN+"gtEfire_emitter") -r 24 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1.5 -srn 0.6 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 0 -dz 0 -sp 0 ;
particle -n ($EfN+"gtEfire_particle");
connectDynamic -em ($EfN+"gtEfire_emitter") ($EfN+"gtEfire_particle"); 
setAttr ($EfN+"gtEfire_particleShape.particleRenderType") 8;
addAttr -is true -ln "betterIllumination" -at bool -dv 1 ($EfN+"gtEfire_particleShape");
addAttr -is true -ln "surfaceShading" -at "float" -min 0 -max 1 -dv 0 ($EfN+"gtEfire_particleShape");
addAttr -is true -ln "threshold" -at "float" -min 0 -max 10 -dv 0 ($EfN+"gtEfire_particleShape");
addAttr -ln radiusPP -dt doubleArray ($EfN+"gtEfire_particleShape");
addAttr -ln radiusPP0 -dt doubleArray ($EfN+"gtEfire_particleShape");
setAttr ($EfN+"gtEfire_particleShape.lifespanMode") 3;

string $gtEfireC=($EfN);
       $gtEfireC+="gtEfire_particleShape.radiusPP=0.15;\r\n";
       $gtEfireC+=($EfN);
       $gtEfireC+="gtEfire_particleShape.lifespanPP=rand(0.4,1.0);";

dynExpression -s $gtEfireC -c ($EfN+"gtEfire_particleShape") ;

string $gtEfireRad=($EfN);
       $gtEfireRad+="gtEfire_particleShape.radiusPP=3*linstep(0,0.8,age/lifespanPP)+0.15;";

dynExpression -s $gtEfireRad -rad ($EfN+"gtEfire_particleShape");

createDisplayLayer -name ($EfN+"gtE_fireLayer") -number 1 -empty;

select -r ($EfN+"gtEbase_emitter1") ;
select -add ($EfN+"gtEbase_emitter2") ;
select -add ($EfN+"gtEbase_emitter3") ;
select -add ($EfN+"gtEbase_particle") ;
select -add ($EfN+"gtEbase_gravity") ;
select -add ($EfN+"gtEbase_turbulence") ;
select -add ($EfN+"gtEbase_drag") ;
select -add ($EfN+"gtEfire_particle") ;
group -n ($EfN+"gtEfire_Group");
editDisplayLayerMembers -noRecurse ($EfN+"gtE_fireLayer") `ls -selection`;

addAttr -ln "opacityPP" -dt doubleArray ($EfN+"gtEfire_particleShape");
addAttr -ln "opacityPP0" -dt doubleArray ($EfN+"gtEfire_particleShape");
addAttr -ln "rgbPP" -dt vectorArray ($EfN+"gtEfire_particleShape");
addAttr -ln "rgbPP0" -dt vectorArray ($EfN+"gtEfire_particleShape");

arrayMapper -target ($EfN+"gtEfire_particleShape") -destAttr rgbPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particleShape.rgbPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEfire_particle_rgbPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particle_rgbPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"fire_colorR");

setAttr ($EfN+"fire_colorR.colorEntryList[0].position") 0;
setAttr ($EfN+"fire_colorR.colorEntryList[0].color") -type double3 2 2 3 ;
setAttr ($EfN+"fire_colorR.colorEntryList[3].position") 0.12;
setAttr ($EfN+"fire_colorR.colorEntryList[3].color") -type double3 1 1.1 0 ;
setAttr ($EfN+"fire_colorR.colorEntryList[5].color") -type double3 1.1 0 0 ;
setAttr ($EfN+"fire_colorR.colorEntryList[5].position") 0.2;
setAttr ($EfN+"fire_colorR.colorEntryList[1].position") 0.4;
setAttr ($EfN+"fire_colorR.colorEntryList[1].color") -type double3 0.1 0 0 ;
setAttr ($EfN+"fire_colorR.colorEntryList[2].position") 1;
setAttr ($EfN+"fire_colorR.colorEntryList[2].color") -type double3 0 0 0 ;

arrayMapper -target ($EfN+"gtEfire_particleShape") -destAttr opacityPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particleShape.opacityPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEfire_particle_opacityPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particle_rgbPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];

rename ($EfN+"gtfire_opacity");
removeMultiInstance -break true ($EfN+"gtfire_opacity.colorEntryList[1]");
setAttr ($EfN+"gtfire_opacity.colorEntryList[2].position") 1;
setAttr ($EfN+"gtfire_opacity.colorEntryList[2].color") -type double3 0 0 0 ;

shadingNode -asTexture ramp -n ($EfN+"gtfire_opacityInput");

shadingNode -asUtility place2dTexture -n ($EfN+"gtfire_opacityInputPlace");

connectAttr ($EfN+"gtfire_opacityInputPlace.outUV") ($EfN+"gtfire_opacityInput.uv");

connectAttr ($EfN+"gtfire_opacityInputPlace.outUvFilterSize") ($EfN+"gtfire_opacityInput.uvFilterSize");

defaultNavigation -ce -source ($EfN+"gtfire_opacityInput") -destination ($EfN+"gtfire_opacity.colorEntryList[0].color");

removeMultiInstance -break true ($EfN+"gtfire_opacityInput.colorEntryList[1]");
setAttr ($EfN+"gtfire_opacityInput.colorEntryList[2].position") 1;
setAttr ($EfN+"gtfire_opacityInput.colorEntryList[2].color") -type double3 1 1 1 ;
setAttr ($EfN+"gtfire_opacityInput.colorEntryList[0].color") -type double3 0.5 0.5 0.5 ;
setAttr ($EfN+"gtfire_opacityInput.type") 1;

addAttr -ln incandescencePP -dt vectorArray ($EfN+"gtEfire_particleShape");
addAttr -ln incandescencePP0 -dt vectorArray ($EfN+"gtEfire_particleShape");
addAttr -ln userScalar1PP -dt doubleArray ($EfN+"gtEfire_particleShape");
addAttr -ln userScalar1PP0 -dt doubleArray ($EfN+"gtEfire_particleShape");

arrayMapper -target ($EfN+"gtEfire_particleShape") -destAttr incandescencePP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particleShape.incandescencePP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEfire_particle_incand_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particle_incand_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];

rename ($EfN+"gtfire_incand");
setAttr ($EfN+"gtfire_incand.colorEntryList[0].position") 0;
setAttr ($EfN+"gtfire_incand.colorEntryList[0].color") -type double3 1.1 1.1 1 ;
setAttr ($EfN+"gtfire_incand.colorEntryList[2].position") 0.12;
setAttr ($EfN+"gtfire_incand.colorEntryList[2].color") -type double3 2 1.1 0.512 ;
setAttr ($EfN+"gtfire_incand.colorEntryList[3].position") 0.2;
setAttr ($EfN+"gtfire_incand.colorEntryList[3].color") -type double3 1 0.507 0.2 ;
setAttr ($EfN+"gtfire_incand.colorEntryList[1].position") 0.35;
setAttr ($EfN+"gtfire_incand.colorEntryList[1].color") -type double3 0.1 0.0 0.0 ;
setAttr ($EfN+"gtfire_incand.colorEntryList[5].position") 0.70;
setAttr ($EfN+"gtfire_incand.colorEntryList[5].color") -type double3 0 0 0.0 ;
setAttr ($EfN+"gtfire_incand.colorEntryList[4].position") 1;
setAttr ($EfN+"gtfire_incand.colorEntryList[4].color") -type double3 0.24 0.12 0.12 ;
setAttr ($EfN+"gtfire_incand.colorEntryList[4].color") -type double3 0.24 0.12 0.1 ;

arrayMapper -target ($EfN+"gtEfire_particleShape") -destAttr userScalar1PP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particleShape.userScalar1PP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEfire_particle_glow_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEfire_particle_glow_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtfire_glow");
removeMultiInstance -break true ($EfN+"gtfire_glow.colorEntryList[1]");
setAttr ($EfN+"gtfire_glow.colorEntryList[0].position") 0;
setAttr ($EfN+"gtfire_glow.colorEntryList[0].color") -type double3 1 1 1;
setAttr ($EfN+"gtfire_glow.colorEntryList[2].position") 0.85;
setAttr ($EfN+"gtfire_glow.colorEntryList[2].color") -type double3 0 0 0 ;

shadingNode -asShader particleCloud -n ($EfN+"gtfire_cloudM");

sets -renderable true -noSurfaceShader true -empty -name ($EfN+"gtfire_cloudMSG");

connectAttr -f ($EfN+"gtfire_cloudM.outColor") ($EfN+"gtfire_cloudMSG.volumeShader");

shadingNode -asUtility particleSamplerInfo -n ($EfN+"gtfire_cloudInfo");

connectAttr -f ($EfN+"gtfire_cloudInfo.outColor") ($EfN+"gtfire_cloudM.color");
connectAttr -f ($EfN+"gtfire_cloudInfo.outIncandescence") ($EfN+"gtfire_cloudM.incandescence");
connectAttr -f ($EfN+"gtfire_cloudInfo.outTransparency") ($EfN+"gtfire_cloudM.transparency");
connectAttr -f ($EfN+"gtfire_cloudInfo.userScalar1PP") ($EfN+"gtfire_cloudM.glowIntensity");
select -r ($EfN+"gtEfire_particle") ;
sets -e -forceElement  ($EfN+"gtfire_cloudMSG");

emitter -pos 0 0 0 -type omni   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 60 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 0 -dz 0 -sp 0 -n ($EfN+"gtEin_emitter1");
emitter -pos 0 0 0 -type omni   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 70 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 0 -dz 0 -sp 0 -n ($EfN+"gtEin_emitter2");
emitter -pos 0 0 0 -type omni   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 80 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 0 -dz 0 -sp 0 -n ($EfN+"gtEin_emitter3");

particle -n ($EfN+"gtEin_particle");

connectDynamic -em ($EfN+"gtEin_emitter1") ($EfN+"gtEin_particle");
connectDynamic -em ($EfN+"gtEin_emitter2") ($EfN+"gtEin_particle");
connectDynamic -em ($EfN+"gtEin_emitter3") ($EfN+"gtEin_particle");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEin_emitter1.rate");
setKeyframe -t 3 -v 1200 -itt spline -ott step ($EfN+"gtEin_emitter1.rate");
setKeyframe -t 10 -v 0 -itt spline -ott step ($EfN+"gtEin_emitter1.rate");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEin_emitter2.rate");
setKeyframe -t 10 -v 1200 -itt spline -ott step ($EfN+"gtEin_emitter2.rate");
setKeyframe -t 17 -v 0 -itt spline -ott step ($EfN+"gtEin_emitter2.rate");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEin_emitter3.rate");
setKeyframe -t 20 -v 1200 -itt spline -ott step ($EfN+"gtEin_emitter3.rate");
setKeyframe -t 27 -v 0 -itt spline -ott step ($EfN+"gtEin_emitter3.rate");

setAttr ($EfN+"gtEin_particleShape.seed[1]") 3;
setAttr ($EfN+"gtEin_particleShape.seed[2]") 6;
setAttr ($EfN+"gtEin_particleShape.seed[0]") 2;

gravity -pos 0 0 0 -m 8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEin_gravity");
connectDynamic -f ($EfN+"gtEin_gravity")  ($EfN+"gtEin_particle");

turbulence -pos 0 0 0 -m 30 -att 0 -f 5 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEin_turbulence") ;
connectDynamic -f ($EfN+"gtEin_turbulence") ($EfN+"gtEin_particle");

drag -pos 0 0 0 -m 5 -att 0 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEin_drag");
connectDynamic -f ($EfN+"gtEin_drag") ($EfN+"gtEin_particle");

setAttr ($EfN+"gtEin_particleShape.lifespanMode") 3;
setAttr ($EfN+"gtEin_particleShape.particleRenderType") 8;
addAttr -ln "rgbPP" -dt vectorArray ($EfN+"gtEin_particleShape");
addAttr -ln "rgbPP0" -dt vectorArray ($EfN+"gtEin_particleShape");
addAttr -ln "opacityPP" -dt doubleArray ($EfN+"gtEin_particleShape");
addAttr -ln "opacityPP0" -dt doubleArray ($EfN+"gtEin_particleShape");
addAttr -ln incandescencePP -dt vectorArray ($EfN+"gtEin_particleShape");
addAttr -ln incandescencePP0 -dt vectorArray ($EfN+"gtEin_particleShape");
addAttr -ln userScalar1PP -dt doubleArray ($EfN+"gtEin_particleShape");
addAttr -ln userScalar1PP0 -dt doubleArray ($EfN+"gtEin_particleShape");
addAttr -ln radiusPP -dt doubleArray ($EfN+"gtEin_particleShape");
addAttr -ln radiusPP0 -dt doubleArray ($EfN+"gtEin_particleShape");

addAttr -is true -ln "betterIllumination" -at bool -dv 1 ($EfN+"gtEin_particleShape");
addAttr -is true -ln "surfaceShading" -at "float" -min 0 -max 1 -dv 0 ($EfN+"gtEin_particleShape");
addAttr -is true -ln "threshold" -at "float" -min 0 -max 10 -dv 0 ($EfN+"gtEin_particleShape");

string $gtEinC=($EfN);
       $gtEinC+="gtEin_particleShape.lifespanPP=rand(1.2,4.2);\r\n";
       $gtEinC+=($EfN);
       $gtEinC+="gtEin_particleShape.radiusPP=rand(3,5);\r\n";
       $gtEinC+=($EfN);
       $gtEinC+="gtEin_particleShape.mass=rand(0.85,1.15);";

dynExpression -s $gtEinC -c ($EfN+"gtEin_particleShape");

createDisplayLayer -name ($EfN+"gtEfire_inLayer") -number 1 -empty ;

select -r ($EfN+"gtEin_emitter1") ($EfN+"gtEin_emitter2") ($EfN+"gtEin_emitter3") ($EfN+"gtEin_particle") ($EfN+"gtEin_gravity") ($EfN+"gtEin_turbulence") ($EfN+"gtEin_drag") ;

group -n ($EfN+"gtEin_Group");

editDisplayLayerMembers -noRecurse ($EfN+"gtEfire_inLayer") `ls -selection`;

arrayMapper -target ($EfN+"gtEin_particleShape") -destAttr rgbPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particleShape.rgbPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEin_particle_rgbPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particle_rgbPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEinfire_color");

setAttr ($EfN+"gtEinfire_color.colorEntryList[0].position") 0.0;
setAttr ($EfN+"gtEinfire_color.colorEntryList[0].color") -type double3 0.6 0 0 ;
setAttr ($EfN+"gtEinfire_color.colorEntryList[2].position") 0.1;
setAttr ($EfN+"gtEinfire_color.colorEntryList[2].color") -type double3 2.1 2.1 0.9 ;
setAttr ($EfN+"gtEinfire_color.colorEntryList[5].position") 0.36;
setAttr ($EfN+"gtEinfire_color.colorEntryList[5].color") -type double3 0.1 0.1 0 ;
setAttr ($EfN+"gtEinfire_color.colorEntryList[3].position") 0.18;
setAttr ($EfN+"gtEinfire_color.colorEntryList[3].color") -type double3 1.1 0 0 ;
setAttr ($EfN+"gtEinfire_color.colorEntryList[1].position") 0.63;
setAttr ($EfN+"gtEinfire_color.colorEntryList[1].color") -type double3 0.1 0.1 0 ;
setAttr ($EfN+"gtEinfire_color.colorEntryList[6].position") 0.82;
setAttr ($EfN+"gtEinfire_color.colorEntryList[6].color") -type double3 1.9 1.6 0.9 ;
setAttr ($EfN+"gtEinfire_color.colorEntryList[4].position") 1;
setAttr ($EfN+"gtEinfire_color.colorEntryList[4].color") -type double3 0.6 0 0 ;

arrayMapper -target ($EfN+"gtEin_particleShape") -destAttr opacityPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particleShape.opacityPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEin_particle_opacityPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particle_opacityPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEinfire_opacity");
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[0].color") -type double3 0.5 0.5 0.5 ;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[3].position") 0.1;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[3].color") -type double3 1 1 1 ;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[1].position") 0.59;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[1].color") -type double3 0.66 0.66 0.66 ;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[2].position") 1;
setAttr ($EfN+"gtEinfire_opacity.colorEntryList[2].color") -type double3 0 0 0 ;
setAttr ($EfN+"gtEinfire_opacity.interpolation") 4;

arrayMapper -target ($EfN+"gtEin_particleShape") -destAttr incandescencePP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particleShape.incandescencePP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEin_particle_incand_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particle_incand_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEin_incand");

setAttr ($EfN+"gtEin_incand.colorEntryList[4].position") 0.345;
setAttr ($EfN+"gtEin_incand.colorEntryList[4].color") -type double3 0.59 0 0 ;
setAttr ($EfN+"gtEin_incand.colorEntryList[3].position") 0.175;
setAttr ($EfN+"gtEin_incand.colorEntryList[3].color") -type double3 1 1 0 ;
setAttr ($EfN+"gtEin_incand.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEin_incand.colorEntryList[0].color") -type double3 0.1 0.1 0 ;
setAttr ($EfN+"gtEin_incand.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEin_incand.colorEntryList[1].color") -type double3 0.4 0 0 ;
setAttr ($EfN+"gtEin_incand.colorEntryList[1].position") 0.49;
setAttr ($EfN+"gtEin_incand.colorEntryList[2].color") -type double3 0 0 0 ;
setAttr ($EfN+"gtEin_incand.colorEntryList[2].position") 1;

arrayMapper -target ($EfN+"gtEin_particleShape") -destAttr userScalar1PP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particleShape.userScalar1PP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEin_particle_glow_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEin_particle_glow_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEin_glow");
setAttr ($EfN+"gtEin_glow.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEin_glow.colorEntryList[0].color") -type double3 0 0 0 ;
setAttr ($EfN+"gtEin_glow.colorEntryList[1].position") 0.125;
setAttr ($EfN+"gtEin_glow.colorEntryList[1].color") -type double3 1 1 1 ;
setAttr ($EfN+"gtEin_glow.colorEntryList[2].position") 0.65;
setAttr ($EfN+"gtEin_glow.colorEntryList[2].color") -type double3 0 0 0 ;
setAttr ($EfN+"gtEin_glow.interpolation") 4;

shadingNode -asShader particleCloud -n ($EfN+"gtEfireinM");

sets -renderable true -noSurfaceShader true -empty -name ($EfN+"gtEfireinSG");

connectAttr -f ($EfN+"gtEfireinM.outColor") ($EfN+"gtEfireinSG.volumeShader");

shadingNode -asUtility particleSamplerInfo -n ($EfN+"gtEfireinInfo");
connectAttr -f ($EfN+"gtEfireinInfo.outColor") ($EfN+"gtEfireinM.color");
connectAttr -f ($EfN+"gtEfireinInfo.outIncandescence") ($EfN+"gtEfireinM.incandescence");
connectAttr -f ($EfN+"gtEfireinInfo.outTransparency") ($EfN+"gtEfireinM.transparency");
connectAttr -f ($EfN+"gtEfireinInfo.userScalar1PP") ($EfN+"gtEfireinM.glowIntensity");

select -r ($EfN+"gtEin_particle") ;
sets -e -forceElement ($EfN+"gtEfireinSG");

shadingNode -asTexture solidFractal -n ($EfN+"gtEfirein_solidF");
shadingNode -asUtility place3dTexture -n ($EfN+"gtEfirein_solidFplace");

connectAttr ($EfN+"gtEfirein_solidFplace.wim[0]") ($EfN+"gtEfirein_solidF.pm");
setAttr ($EfN+"gtEfirein_solidF.ratio") 0.612;

defaultNavigation -ce -source ($EfN+"gtEfirein_solidF") -destination ($EfN+"gtEfireinM.blobMap");

emitter -pos 0 0 0 -type omni   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 180 -srn 60 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 0 -dz 0 -sp 0 -n ($EfN+"gtEout_emitter1");

emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 100 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 1 -n ($EfN+"gtEout_emitter2");

emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 100 -srn 100 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 1 -n ($EfN+"gtEout_emitter3");

particle -n ($EfN+"gtEout_particle");

gravity -pos 0 0 0 -m 0 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEout_gravity");
connectDynamic -f ($EfN+"gtEout_gravity")  ($EfN+"gtEout_particle");
air -pos 0 0 0 -m 120 -att 0 -dx 1 -dy 0.5 -dz 0.5 -s 0.5 -iv 0 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEout_air");
setAttr ($EfN+"gtEout_air.useMaxDistance") 0;

connectDynamic -f ($EfN+"gtEout_air")  ($EfN+"gtEout_particle");

setKeyframe -t 0 -v 0  -ott spline ($EfN+"gtEout_gravity.mag");
setKeyframe -t 27 -v -36 -itt spline -ott step ($EfN+"gtEout_gravity.mag");

connectDynamic -em ($EfN+"gtEout_emitter1") ($EfN+"gtEout_particle");
connectDynamic -em ($EfN+"gtEout_emitter2") ($EfN+"gtEout_particle");
connectDynamic -em ($EfN+"gtEout_emitter3") ($EfN+"gtEout_particle");

connectDynamic -f ($EfN+"gtEin_gravity") ($EfN+"gtEout_particle");
connectDynamic -f ($EfN+"gtEin_drag") ($EfN+"gtEout_particle");
connectDynamic -f ($EfN+"gtEin_turbulence") ($EfN+"gtEout_particle");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter1.rate");
setKeyframe -t 3 -v 120 -itt spline -ott step ($EfN+"gtEout_emitter1.rate");
setKeyframe -t 10 -v 24 -itt spline -ott step ($EfN+"gtEout_emitter1.rate");
setKeyframe -t 45 -v 90 -itt spline -ott step ($EfN+"gtEout_emitter1.rate");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter2.rate");
setKeyframe -t 10 -v 120 -itt spline -ott step ($EfN+"gtEout_emitter2.rate");
setKeyframe -t 17 -v 24 -itt spline -ott step ($EfN+"gtEout_emitter2.rate");
setKeyframe -t 50 -v 90 -itt spline -ott step ($EfN+"gtEout_emitter2.rate");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter3.rate");
setKeyframe -t 20 -v 120 -itt spline -ott step ($EfN+"gtEout_emitter3.rate");
setKeyframe -t 27 -v 24 -itt spline -ott step ($EfN+"gtEout_emitter3.rate");
setKeyframe -t 60 -v 90 -itt spline -ott step ($EfN+"gtEout_emitter3.rate");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter1.translateY");
setKeyframe -t 20 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter1.translateY");
setKeyframe -t 10 -v 26 -itt spline -ott step ($EfN+"gtEout_emitter1.translateY");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter2.translateY");
setKeyframe -t 20 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter2.translateY");
setKeyframe -t 100 -v 24 -itt spline -ott step ($EfN+"gtEout_emitter2.translateY");

setKeyframe -t 0 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter3.translateY");
setKeyframe -t 20 -v 0 -itt spline -ott step ($EfN+"gtEout_emitter3.translateY");
setKeyframe -t 100 -v 28 -itt spline -ott step ($EfN+"gtEout_emitter3.translateY");

setAttr ($EfN+"gtEout_particleShape.particleRenderType") 8;
setAttr ($EfN+"gtEout_particleShape.seed[0]") 2;
setAttr ($EfN+"gtEout_particleShape.seed[1]") 4;
setAttr ($EfN+"gtEout_particleShape.seed[2]") 3;
setAttr ($EfN+"gtEout_particleShape.lifespanMode") 2;
setAttr ($EfN+"gtEout_particleShape.lifespan") 4;
setAttr ($EfN+"gtEout_particleShape.lifespanRandom") 2;

addAttr -ln "opacityPP" -dt doubleArray ($EfN+"gtEout_particleShape");
addAttr -ln "opacityPP0" -dt doubleArray ($EfN+"gtEout_particleShape");
addAttr -ln "rgbPP" -dt vectorArray ($EfN+"gtEout_particleShape");
addAttr -ln "rgbPP0" -dt vectorArray ($EfN+"gtEout_particleShape");
addAttr -ln radiusPP -dt doubleArray ($EfN+"gtEout_particleShape");
addAttr -ln radiusPP0 -dt doubleArray ($EfN+"gtEout_particleShape");
addAttr -ln rgbVPP -dt doubleArray ($EfN+"gtEout_particleShape");
addAttr -ln rgbVPP0 -dt doubleArray ($EfN+"gtEout_particleShape");
setAttr -e -k 1 ($EfN+"gtEout_particleShape.rgbVPP");
select -r ($EfN+"gtEout_particleShape");

string $gtEoutC=($EfN);
       $gtEoutC+="gtEout_particleShape.rgbVPP=rand(0,1);\r\n";
       $gtEoutC+=($EfN);
       $gtEoutC+="gtEout_particleShape.radiusPP=rand(4.5,8.5);";

dynExpression -s $gtEoutC -c ($EfN+"gtEout_particleShape");

arrayMapper -target ($EfN+"gtEout_particleShape") -destAttr rgbPP -inputV rgbVPP -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEout_particleShape.rgbPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEout_particle_rgbPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEout_particle_rgbPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEout_color");
removeMultiInstance -break true ($EfN+"gtEout_color.colorEntryList[1]");

setAttr ($EfN+"gtEout_color.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEout_color.colorEntryList[0].color") -type double3 0.1 0.1 0.1 ;
setAttr ($EfN+"gtEout_color.colorEntryList[2].position") 1;
setAttr ($EfN+"gtEout_color.colorEntryList[2].color") -type double3 0 0 0 ;

arrayMapper -target ($EfN+"gtEout_particleShape") -destAttr opacityPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEout_particleShape.opacityPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEout_particle_opacityPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEout_particle_opacityPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEout_opacity");
setAttr ($EfN+"gtEout_opacity.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEout_opacity.colorEntryList[0].color") -type double3 0 0 0 ;
setAttr ($EfN+"gtEout_opacity.colorEntryList[3].position") 0.12;
setAttr ($EfN+"gtEout_opacity.colorEntryList[3].color") -type double3 0.33 0.33 0.33 ;
setAttr ($EfN+"gtEout_opacity.colorEntryList[1].position") 0.65;
setAttr ($EfN+"gtEout_opacity.colorEntryList[1].color") -type double3 0.66 0.66 0.66 ;
setAttr ($EfN+"gtEout_opacity.colorEntryList[2].position") 1;
setAttr ($EfN+"gtEout_opacity.colorEntryList[2].color") -type double3 0 0 0 ;

shadingNode -asShader particleCloud -n ($EfN+"gtEsmokeM");
sets -renderable true -noSurfaceShader true -empty -name ($EfN+"gtEsmokeMSG");
connectAttr -f ($EfN+"gtEsmokeM.outColor") ($EfN+"gtEsmokeMSG.volumeShader");
shadingNode -asUtility particleSamplerInfo -n ($EfN+"gtEsmokeInfo");

connectAttr -f ($EfN+"gtEsmokeInfo.outColor") ($EfN+"gtEsmokeM.color");
connectAttr -f ($EfN+"gtEsmokeInfo.outTransparency") ($EfN+"gtEsmokeM.transparency");

shadingNode -asTexture solidFractal -n ($EfN+"gtEsmokeSolidF");
shadingNode -asUtility place3dTexture -n ($EfN+"gtEsmokeSolidFplace");
connectAttr ($EfN+"gtEsmokeSolidFplace.wim[0]") ($EfN+"gtEsmokeSolidF.pm");
connectAttr -force ($EfN+"gtEsmokeSolidF.outColor") ($EfN+"gtEsmokeM.blobMap");

setAttr ($EfN+"gtEsmokeSolidF.amplitude") 5;

setAttr ($EfN+"gtEsmokeM.surfaceShadingShadow") 1;
setAttr ($EfN+"gtEsmokeM.density") 0.072;
setAttr ($EfN+"gtEsmokeM.roundness") 0.99;
setAttr ($EfN+"gtEsmokeM.diffuseCoeff") 0.6;
setAttr ($EfN+"gtEsmokeM.surfaceColor") -type double3 0.55 0.5 0.5 ;
setAttr ($EfN+"gtEsmokeM.noise") 0.8;
setAttr ($EfN+"gtEsmokeM.noiseFreq") 0.7;
setAttr ($EfN+"gtEsmokeM.noiseAspect") 0.5;
setAttr ($EfN+"gtEsmokeM.noiseAnimRate") 0.3;
setAttr ($EfN+"gtEsmokeM.solidCoreSize") 0.2;
setAttr ($EfN+"gtEsmokeM.solidCoreSize") 0.4;
select -r ($EfN+"gtEout_particle") ;
sets -e -forceElement ($EfN+"gtEsmokeMSG");

createDisplayLayer -name ($EfN+"gtEsmokeLayer") -number 1 -empty;
select -r ($EfN+"gtEfirein_solidFplace") ($EfN+"gtEout_emitter1") ($EfN+"gtEout_emitter2") ($EfN+"gtEout_emitter3") ($EfN+"gtEout_particle") ($EfN+"gtEsmokeSolidFplace") ;
group -n ($EfN+"gtEfirein_Group");

editDisplayLayerMembers -noRecurse ($EfN+"gtEsmokeLayer") `ls -selection`;

emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 40 -srn 30 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 0.8 -n ($EfN+"gtEobj_emitter1");
emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 40 -srn 30 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 0.99 -n ($EfN+"gtEobj_emitter2");
emitter -pos 0 0 0 -type dir   -r 0 -sro 0 -nuv 0 -cye none -cyi 1 -spd 40 -srn 30 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 1 -dz 0 -sp 0.9 -n ($EfN+"gtEobj_emitter3");

particle -n ($EfN+"gtEobj_particle");

connectDynamic -em ($EfN+"gtEobj_emitter1") ($EfN+"gtEobj_particle");
connectDynamic -em ($EfN+"gtEobj_emitter2") ($EfN+"gtEobj_particle");
connectDynamic -em ($EfN+"gtEobj_emitter3") ($EfN+"gtEobj_particle");
setAttr ($EfN+"gtEobj_particleShape.seed[0]") 2;
setAttr ($EfN+"gtEobj_particleShape.seed[1]") 7;
setAttr ($EfN+"gtEobj_particleShape.seed[2]") 9;

setAttr ($EfN+"gtEobj_particleShape.lifespanMode") 2;
setAttr ($EfN+"gtEobj_particleShape.lifespan") 6.2;
setAttr ($EfN+"gtEobj_particleShape.lifespanRandom") 2.4;

setAttr  ($EfN+"gtEobj_particleShape.conserve") 0.965;

string $gtEobj=($EfN);
       $gtEobj+="gtEobj_emitter1.rate=";
       $gtEobj+=($EfN);
       $gtEobj+="gtEbase_emitter1.rate/3;\r\n";
       $gtEobj+=($EfN);
       $gtEobj+="gtEobj_emitter2.rate=";
       $gtEobj+=($EfN);
       $gtEobj+="gtEbase_emitter2.rate/3;\r\n";
       $gtEobj+=($EfN);
       $gtEobj+="gtEobj_emitter3.rate=";
       $gtEobj+=($EfN);
       $gtEobj+="gtEbase_emitter3.rate/3;\r\n";
expression -s $gtEobj -ae 1 -uc all;

addAttr -ln gtErot0 -dt vectorArray  ($EfN+"gtEobj_particleShape");
addAttr -ln gtErot -dt vectorArray  ($EfN+"gtEobj_particleShape");
setAttr -e -keyable true ($EfN+"gtEobj_particleShape.gtErot");
addAttr -ln gtEscale0 -dt vectorArray  ($EfN+"gtEobj_particleShape");
addAttr -ln gtEscale -dt vectorArray  ($EfN+"gtEobj_particleShape");
setAttr -e -keyable true ($EfN+"gtEobj_particleShape.gtEscale");
addAttr -ln gtEspinPP0 -dt vectorArray  ($EfN+"gtEobj_particleShape");
addAttr -ln gtEspinPP -dt vectorArray  ($EfN+"gtEobj_particleShape");
setAttr -e -keyable true ($EfN+"gtEobj_particleShape.gtEspinPP");

gravity -pos 0 0 0 -m 6.2 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 -n ($EfN+"gtEobj_gravity");

connectDynamic -f ($EfN+"gtEobj_gravity")  ($EfN+"gtEobj_particle");

polyCube -ch 0 -o on -ax 0 1 0 -w 3 -h 3 -d 3 -subdivisionsWidth 5 -subdivisionsDepth 5 -subdivisionsHeight 5 -n ($EfN+"gtEobj");

solidShatter( ($EfN+"gtEobjs"), 5, 1, 1, 0, 0, 1, 1, 3, "shapes", 0, 0);
select -r ($EfN+"gtEobjs1");
string $tempN[]=`ls -sl`;
string $objects[]=`listRelatives -c  $tempN[0]`;
int $objSize=`size($objects)`;

select -r $objects[1] ;
parent -world;
rename ($EfN+"gtEojb");

makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

particleInstancer  -addObject -object  ($EfN+"gtEojb") -cycle Sequential -cycleStep 1 
    -cycleStepUnits Frames -levelOfDetail Geometry -rotationUnits Degrees -rotationOrder XYZ 
      -position worldPosition -rotation gtErot -scale gtEscale -age age ($EfN+"gtEobj_particleShape");

select -r ($EfN+"gtEobj_particle") ;
emitter -type omni  -name ($EfN+"gtEobj_emiter") -r 60 -sro 0 -nuv 0 -cye none -cyi 1 -spd 0.2 -srn 0.1 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 0 -dy 0 -dz 0 -sp 0 ;
particle -n ($EfN+"gtEobjSmoke");
connectDynamic -em ($EfN+"gtEobj_emiter") ($EfN+"gtEobjSmoke"); 
addPP -atr rate ($EfN+"gtEobj_emiter");

setAttr ($EfN+"gtEobjSmokeShape.lifespanMode") 3;
setAttr ($EfN+"gtEobjSmokeShape.particleRenderType") 8;
addAttr -is true -ln "betterIllumination" -at bool -dv 1 ($EfN+"gtEobjSmokeShape");
addAttr -is true -ln "surfaceShading" -at "float" -min 0 -max 1 -dv 0 ($EfN+"gtEobjSmokeShape");
addAttr -is true -ln "threshold" -at "float" -min 0 -max 10 -dv 0 ($EfN+"gtEobjSmokeShape");
addAttr -ln radiusPP -dt doubleArray ($EfN+"gtEobjSmokeShape");
addAttr -ln radiusPP0 -dt doubleArray ($EfN+"gtEobjSmokeShape");

string $gtEobjSmokeC=($EfN);
       $gtEobjSmokeC+="gtEobjSmokeShape.radiusPP=";
       $gtEobjSmokeC+=($EfN);
       $gtEobjSmokeC+="gtEobj_particleShape.gtEscale/10;\r\n";
       $gtEobjSmokeC+=($EfN);
       $gtEobjSmokeC+="gtEobjSmokeShape.lifespanPP=";
       $gtEobjSmokeC+=($EfN);
       $gtEobjSmokeC+="gtEobj_particleShape.gtEscale/50;";

dynExpression -s $gtEobjSmokeC -c ($EfN+"gtEobjSmokeShape");

string $gtEobjSmokeRad=($EfN);
       $gtEobjSmokeRad+="gtEobjSmokeShape.radiusPP=1.2*linstep(0,0.72,age/lifespan)+";
       $gtEobjSmokeRad+=($EfN);
       $gtEobjSmokeRad+="gtEobj_particleShape.gtEscale/10;";

dynExpression -s $gtEobjSmokeRad -rad ($EfN+"gtEobjSmokeShape");


string $gtEobjC=($EfN);
       $gtEobjC+="gtEobj_particleShape.gtEscale=rand(0.2,20.6);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.gtErot=rand(-180,180);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.mass=rand(0.8,4);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.gtEspinPP=rand(1,12);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_emiterRatePP=80;\r\n";

dynExpression -s $gtEobjC -c ($EfN+"gtEobj_particleShape");

string $gtEobjRad=($EfN);
       $gtEobjRad+="gtEobj_particleShape.gtErot+=";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.gtEspinPP;\n";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_emiterRatePP-=0.8;\n";

dynExpression -s $gtEobjRad -rad ($EfN+"gtEobj_particleShape");

addAttr -ln "rgbPP" -dt vectorArray ($EfN+"gtEobjSmokeShape");
addAttr -ln "rgbPP0" -dt vectorArray ($EfN+"gtEobjSmokeShape");
addAttr -ln "opacityPP" -dt doubleArray ($EfN+"gtEobjSmokeShape");
addAttr -ln "opacityPP0" -dt doubleArray ($EfN+"gtEobjSmokeShape");

arrayMapper -target ($EfN+"gtEobjSmokeShape") -destAttr rgbPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEobjSmokeShape.rgbPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEobjSmoke_rgbPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEobjSmoke_rgbPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEobjsmoke_color");

arrayMapper -target ($EfN+"gtEobjSmokeShape") -destAttr opacityPP -inputV ageNormalized -type ramp;
string $ramptemp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEobjSmokeShape.opacityPP") `;
select -r $ramptemp[0] ;
rename ($EfN+"gtEobjSmoke_opacityPP_ArrayMapper");
string $ramp[]=`listConnections -source 1 -destination 0 ($EfN+"gtEobjSmoke_opacityPP_ArrayMapper.computeNodeColor") `;
select -r $ramp[0];
rename ($EfN+"gtEobjsmoke_opacity");

removeMultiInstance -break true ($EfN+"gtEobjsmoke_opacity.colorEntryList[1]");
setAttr ($EfN+"gtEobjsmoke_opacity.colorEntryList[2].position") 1;
setAttr ($EfN+"gtEobjsmoke_opacity.colorEntryList[2].color") -type double3 1 1 1 ;
setAttr ($EfN+"gtEobjsmoke_opacity.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEobjsmoke_opacity.colorEntryList[0].color") -type double3 0.65 0.65 0.65 ;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[1].position") 0.28;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[1].color") -type double3 0.3 0.28 0.25 ;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[3].position") 0.12;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[3].color") -type double3 0.550.35 0.;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[0].position") 0;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[0].color") -type double3 1.5 1. 0.9 ;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[2].position") 1;
setAttr ($EfN+"gtEobjsmoke_color.colorEntryList[2].color") -type double3 0 0 0 ;
setAttr ($EfN+"gtEobjSmokeShape.threshold") 0.5;

shadingNode -asShader particleCloud -n ($EfN+"gtEobjsmokeM");
sets -renderable true -noSurfaceShader true -empty -name ($EfN+"gtEobjsmokeSG");
connectAttr -f ($EfN+"gtEobjsmokeM.outColor") ($EfN+"gtEobjsmokeSG.volumeShader");

shadingNode -asUtility particleSamplerInfo -n ($EfN+"gtEobjsmokeInfo");

connectAttr -f ($EfN+"gtEobjsmokeInfo.outColor") ($EfN+"gtEobjsmokeM.color");
connectAttr -f ($EfN+"gtEobjsmokeInfo.outTransparency") ($EfN+"gtEobjsmokeM.transparency");
select -r ($EfN+"gtEobjSmoke") ;
sets -e -forceElement ($EfN+"gtEobjsmokeSG");
setAttr ($EfN+"gtEobjsmokeM.density") 0.01;
setAttr ($EfN+"gtEobjsmokeM.diffuseCoeff") 0.6;
setAttr ($EfN+"gtEobjsmokeM.blobMap") -type double3 0.48 0.48 0.48 ;
setAttr ($EfN+"gtEobjsmokeM.surfaceColor") -type double3 0.5 0.5 0.5 ;

select -r ($EfN+"gtEobjs1");
scale 3 3 3;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

string $tempN[]=`ls -sl`;
string $objects[]=`listRelatives -c  $tempN[0]`;
int $objSize=`size($objects)`;

for($i=0;$i<$objSize;$i++){

select -r  $objects[$i] ;
rename ($EfN+"gtEdFireobjs"+$i);
Fire;
pickWalk -d up;

rename ($EfN+"gtEfire"+$i);

setAttr ($EfN+"gtEfireShape"+$i+".startFrame") 20;
setAttr ($EfN+"gtEfireShape"+$i+".fireLifespan") 2.4;
setAttr ($EfN+"gtEfireShape"+$i+".fireSpeed") 98;
setAttr ($EfN+"gtEfireShape"+$i+".fireSpread") 0.24;

}

select -r ($EfN+"gtEobjs1");

string $tempN[]=`ls -sl`;
string $objects[]=`listRelatives -c  $tempN[0]`;
int $objSize=`size($objects)`;
for($i=0;$i<$objSize;$i++){

select -r  $objects[$i] ;
rigidBody -active -m 1 -dp 1.5 -sf 0.2 -df 0.2 -b 0.01 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 
    -p (rand(-3.5,1.2)) 0 (rand(-2.5,4.3)) -c 0 -pc 0 -i (rand(-.41,.61)) 0 (rand(-.21,.41)) -imp 0 0 0 -si 0 0 0 -sio none -n ($EfN+"gtEfireRigidB"+$i);

setAttr ($EfN+"gtEfireRigidB"+$i+".collisions") 0;
}

select -r ($EfN+"gtEojb");
Fire;
pickWalk -d up;

rename ($EfN+"gtEojbfire");

setAttr ($EfN+"gtEojbfireShape.startFrame") 20;
setAttr ($EfN+"gtEojbfireShape.fireLifespan") 2.4;
setAttr ($EfN+"gtEojbfireShape.fireSpeed") 98;
setAttr ($EfN+"gtEojbfireShape.fireSpread") 0.24;
setAttr ($EfN+"gtEojbfireShape.fireSpread") 1;
setAttr ($EfN+"gtEojbfireShape.flameStartRadius") 3;
setAttr ($EfN+"gtEojbfireShape.flameEndRadius") 1;
setAttr ($EfN+"gtEojbfireShape.fireLifespan") 3;
setAttr ($EfN+"gtEojbfireShape.fireSpeed") 90;

createDisplayLayer -name ($EfN+"gtobjLayer") -number 1 -empty;

select -r ($EfN+"gtEobj_emitter1") ;
select -add ($EfN+"gtEobj_emitter2") ;
select -add ($EfN+"gtEobj_emitter3") ;
select -add ($EfN+"gtEobj_particle") ;
select -add ($EfN+"gtEobj_gravity") ;
select -add ($EfN+"gtEobjSmoke") ;
select -add ($EfN+"gtEout_gravity") ;
select -add ($EfN+"gtEout_air") ;

group -n ($EfN+"gtobj_Group");

editDisplayLayerMembers -noRecurse ($EfN+"gtobjLayer")  `ls -selection`;

spaceLocator -n ($EfN+"MainControler") -p 0 0 0;
scale 10 10 10;
select -r ($EfN+"gtobj_Group");
select -add ($EfN+"gtEfire_Group");
select -add ($EfN+"gtEin_Group");
select -add ($EfN+"gtEfirein_Group");
select -add ($EfN+"gtobj_Group");
select -add ($EfN+"gtEobjs1");
select -add ($EfN+"gtEojb");
select -add ($EfN+"MainControler");

parent;

select -add ($EfN+"MainControler") ;

editDisplayLayerMembers -noRecurse ($EfN+"gtobjLayer")  `ls -selection`;

if($collisionObjEx>0){
for($i=0;$i<$collisionObjEx;$i++){
collision -r 1 -f 0.01 $selCollisionObj[$i];

connectDynamic -c $selCollisionObj[$i] ($EfN+"gtEobj_particle");
connectDynamic -c $selCollisionObj[$i] ($EfN+"gtEbase_particle");
connectDynamic -c $selCollisionObj[$i] ($EfN+"gtEin_particle");
connectDynamic -c $selCollisionObj[$i] ($EfN+"gtEout_particle");
}

event -die 0 -count 0 ($EfN+"gtEobj_particle");
event -die 0 -count 0 ($EfN+"gtEbase_particle");
event -die 0 -count 0 ($EfN+"gtEin_particle");
event -die 0 -count 0 ($EfN+"gtEout_particle");

string $gtEobjC=($EfN);
       $gtEobjC+="gtEobj_particleShape.gtEscale=rand(0.2,10.6);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.gtErot=rand(-180,180);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.mass=rand(0.8,4);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.gtEspinPP=rand(0.24,2.4);\r\n";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_particleShape.";
       $gtEobjC+=($EfN);
       $gtEobjC+="gtEobj_emiterRatePP=80;\r\n";

dynExpression -s $gtEobjC -c ($EfN+"gtEobj_particleShape");

select -r ($EfN+"gtEobj_particleShape");

string $gtEobjRad=($EfN);
       $gtEobjRad+="gtEobj_particleShape.gtErot+=";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.gtEspinPP;\r\nif(";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.event>0){\r\n";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_emiterRatePP-=5;\r\n";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.gtEspinPP=0;}\r\nelse{\r\n";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_emiterRatePP=120;\r\n";
       $gtEobjRad+=($EfN);
       $gtEobjRad+="gtEobj_particleShape.gtEspinPP+=rand(0.5,1.5);}\n";

dynExpression -s $gtEobjRad -rad ($EfN+"gtEobj_particleShape");
}

playbackOptions -e -ast 0 -aet 240 -min 0 -max 240;

changeSelectMode -object;

select -r ($EfN+"MainControler");
}
//MAYA灯光创建工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtSkyLightWin(){

string $gtFrame1on="frameLayout -e -vis  1 gtFrame1;frameLayout -e  gtFrame1;frameLayout -e -vis 0 gtFrame3;frameLayout -e -vis 0 gtFrame2;";

string $gtFrame3on="frameLayout -e -vis 0 gtFrame1;frameLayout -e -vis 1 gtFrame3;frameLayout -e -vis 0 gtFrame2;frameLayout -e  gtFrame3;";

string $gtFrame2on="frameLayout -e -vis 0 gtFrame1;frameLayout -e -vis 0 gtFrame3;frameLayout -e -vis 1 gtFrame2;frameLayout -e  gtFrame2;";

if(`window -ex gtSkyLightWin`) deleteUI -window gtSkyLightWin;
window -t  "老船角色绑定-☆-MAYA灯光创建工具" -wh 420 260 gtSkyLightWin;
formLayout gtForm;
columnLayout -adj 1 gtColumnLmain;
columnLayout -adj 1 gtMaintColumnLay;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1712\"";
frameLayout  -l "灯光形状" -la "center"  gtframeMain;
radioButtonGrp  -l "" -nrb 3 -la3 "球形" "平面" "圆柱" -cw4 100 90 90 90 -sl 1
          -on1 $gtFrame3on -on2 $gtFrame1on  -on3 $gtFrame2on gtRadioShapeType;

setParent..;

frameLayout -l "平面灯光" -la "center" -vis 0   gtFrame1;

columnLayout -adj 1 gtColumnL1;

radioButtonGrp -l "灯光类型" -nrb 3 -cw4 60 100 100 100  -sl 1 -la3 "方向光" "点光" "聚光灯"  gtRadioType1;
radioButtonGrp -l ""  -nrb 3 -cw4 60 100 100 100 -scl "gtRadioType1" -la3 "环境光" "区域光" "体积光" gtRadioType1a;
separator -style single;
rowLayout -nc 5 -cw5 66 29 91 59 80 gtrowL1;
text -l "" texta;
text -l "宽度:" -w 60 text1;
floatField  -v 15  gtfloatF1;
text -l "长宽比:" -w 60 text2;
floatField  -v 1  gtfloatF2;
setParent..;

rowLayout -nc 5 -cw5 60 35 115 35 110 gtrowL2;
text -l "" textb;
text -l "U段数:" text3;
intField  -v 6 gtintF1;
text -l "V段数:" text4;
intField  -v 6 gtintF2;
setParent..;

rowLayout -nc 4 -cw4 60 35 133 160  gtrowL3;
text -l "" textc;
text -l "名称:" text5;
textField  -text "plane" -w 120 gttextF1;
button -l "创建平面灯光" -c "gtLightsplane;" but1;
setParent..;

setParent..;
setParent..; 

frameLayout -l "圆柱灯光" -la "center" -vis 0  gtFrame2;

formLayout gtSubForm2;
columnLayout -adj 1 gtcolumnL2;
radioButtonGrp -l "灯光类型" -nrb 3 -cw4 60 100 100 100  -sl 1 -la3 "方向光" "点光" "聚光灯"  gtRadioType2;
radioButtonGrp -l ""  -nrb 3 -cw4 60 100 100 100 -scl "gtRadioType2" -la3 "环境光" "区域光" "体积光" gtRadioType2a;

separator -style single;
rowLayout -nc 5 -cw5 64 31 122 28 80 gtrowL4; 

text -l "" textd;
text -l "半径:" text6;
floatField  -v 10 gtfloatF3;
text -l "高度:" text7;
floatField -v 2 gtfloatF4;
setParent..;

rowLayout -nc 5 -cw5 60 35 115 35 110 gtrowL5;
text -l "" texte;
text -l "U段数:" text8;
intField  -v 6 gtintF3;
text -l "V段数:" text9; 
intField  -v 6 gtintF4;
setParent..;

rowLayout -nc 4 -cw4 60 35 133 160 gtrowL6;
text -l "" textf;
text -l "名称:" text10;
textField -text "cylinder" -w 120 gttextF2;
button -l "创建圆柱灯光" -c "gtLightscylinder;" but2;
setParent..;
formLayout -e 
 -af gtcolumnL2 left 0 -af gtcolumnL2 right 0  -af gtcolumnL2 top 0 gtSubForm2;

setParent..;
setParent..; 
setParent..; 

frameLayout -l "球形灯光" -la "center" -vis 1   gtFrame3;

formLayout gtSubForm3;
columnLayout -adj 1 gtcolumnL3;
radioButtonGrp -l "灯光类型" -nrb 3 -cw4 60 100 100 100  -sl 1 -la3 "方向光" "点光" "聚光灯"    gtRadioType3;
radioButtonGrp -l ""  -nrb 3 -cw4 60 100 100 100 -scl "gtRadioType3" -la3 "环境光" "区域光" "体积光" gtRadioType3a;

separator -style single;
rowLayout -nc 5 -cw5 64 31 80 71 100 gtrowL7;
text -l "" textg;
text -l "半径:" text11;
floatField  -v 10  gtfloatF6;
text -l "" textg1;
checkBox -l "创建底部灯光" -v 1 gtcheckBox;
setParent..;
rowLayout -nc 5 -cw5 60 35 115 35 110 gtrowL8;
text -l "" texth;
text -l "U段数:" text12;
intField  -v 6 gtfloatF5;
text -l "V段数:" text13;
intField -v 6 gtfloatF5a;
setParent..;
rowLayout -nc 4 -cw4 60 35 133 160 gtrowL9;
text -l "" texti;
text -l "名称:" text14;
textField -text "sphere" -w 120 gttextF3;
button -l "创建球形灯光" -c "gtLightsSphere;" but3;
formLayout -e 
 -af gtcolumnL3 left 0 -af gtcolumnL3 right 0  -af gtcolumnL3 top 0  gtSubForm3;
setParent..;
setParent..; 
setParent..; 
setParent..; 
setParent..; 
formLayout -e 
-af gtColumnLmain left 10 -af gtColumnLmain right 10 -af gtColumnLmain top 10  -af gtColumnLmain bottom 30  
 gtForm;
showWindow  gtSkyLightWin;
}
////////////////////////////////////////////
global proc gtLightRendering(string $kk[]){

int $shapeType=`radioButtonGrp -q -sl gtRadioShapeType`;

setAttr ($kk[0]+".castsShadows") 0;
setAttr ($kk[0]+".receiveShadows") 0;
setAttr ($kk[0]+".motionBlur") 0;
setAttr ($kk[0]+".smoothShading") 0;
setAttr ($kk[0]+".visibleInReflections") 0;
setAttr ($kk[0]+".visibleInRefractions") 0;
setAttr ($kk[0]+".doubleSided") 0;
setAttr ($kk[0]+".opposite") 1;
setAttr ($kk[0]+".primaryVisibility") 0;
if($shapeType==2) setAttr ($kk[0]+".opposite") 0;
}
//////////////////////////
global proc gtConnectLight(string $kk[]){

int $shapeType=`radioButtonGrp -q -sl gtRadioShapeType`;

int $type;
switch($shapeType){
case 1:
  int $typea=`radioButtonGrp -q -sl gtRadioType3`;
int $typeb=`radioButtonGrp -q -sl gtRadioType3a`;
int $type;
if($typea==0) $type=$typeb+3;
if($typea!=0)  $type=$typea;

break;
case 2:
 int $typea=`radioButtonGrp -q -sl gtRadioType1`;
int $typeb=`radioButtonGrp -q -sl gtRadioType1a`;
int $type;
if($typea==0) $type=$typeb+3;
if($typea!=0)  $type=$typea;
break;

case 3:
  int $typea=`radioButtonGrp -q -sl gtRadioType2`;
int $typeb=`radioButtonGrp -q -sl gtRadioType2a`;

int $type;
if($typea==0) $type=$typeb+3;
if($typea!=0)  $type=$typea;
break;
}

int $i;
string $pl[];
select -cl;
select -add ($kk[0]+"_light"+"*"+"Shape");
$pl=`ls -sl -s`;
string $objCtrl=($kk[0]+"SkyLihgts");
float $intensity=3.0/size($pl);

select -r $objCtrl;

if($type==3){
addAttr -ln lightColor -at "float3" -nc 3 -uac;
addAttr -ln lightColorR -at "float"  -p lightColor -dv 1 ;
addAttr -ln lightColorG -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorB -at "float"  -p lightColor -dv 1;
addAttr -ln "intensity" -at "float" -k 1 -dv $intensity;

addAttr -ln "emitDiffuse" -at bool -k 1 -dv 1;
addAttr -ln "emitSpecular" -at bool -k 1 -dv 1;

addAttr -ln "coneAngle" -at "float" -k 1 -dv 60;
addAttr -ln "penumbraAngle" -at "float" -k 1 -dv 10;
addAttr -ln "dropoff" -at "float" -k 1 -dv 5;

addAttr -ln shadowColor -at "float3" -nc 3 -uac;
addAttr -ln shadowColorR -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorG -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorB -at "float"  -p shadowColor -dv 0;

addAttr -ln "useRayTraceShadows" -at bool -k 1 -dv 0;
addAttr -ln "lightRadius" -at "float" -k 1 -dv 5;
addAttr -ln "shadowRays" -at long -k 1 -dv 8;
addAttr -ln "rayDepthLimit" -at long -k 1 -dv 1;

addAttr -ln "useDepthMapShadows" -at bool -k 1 -dv 1;
addAttr -ln "useMidDistDmap" -at bool -k 1 -dv 1;
addAttr -ln "useDmapAutoFocus" -at bool -k 1 -dv 1;

addAttr -ln "dmapResolution" -at long -k 1 -dv 512;
addAttr -ln "dmapFilterSize" -at "float" -k 1 -dv 6;
addAttr -ln "dmapBias" -at "float" -k 1 -dv 0.01;
addAttr -ln "dmapFocus" -at "float" -k 1 -dv 90;
addAttr -ln "centerOfIllumination" -at "float" -k 1 -dv 5;

}

if($type==4){

addAttr -ln lightColor -at "float3" -nc 3 -uac;
addAttr -ln lightColorR -at "float"  -p lightColor -dv 1 ;
addAttr -ln lightColorG -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorB -at "float"  -p lightColor -dv 1;

addAttr -ln "intensity" -at "float" -k 1 -dv $intensity;
addAttr -ln "ambientShade" -at "float" -k 1 -dv 0.45;

addAttr -ln shadowColor -at "float3" -nc 3 -uac;
addAttr -ln shadowColorR -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorG -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorB -at "float"  -p shadowColor -dv 0;

addAttr -ln "useRayTraceShadows" -at bool -k 1 -dv 1;
addAttr -ln "shadowRadius" -at "float" -k 1 -dv 5;
addAttr -ln "shadowRays" -at long -k 1 -dv 8;
addAttr -ln "rayDepthLimit" -at long -k 1 -dv 1;
addAttr -ln "centerOfIllumination" -at "float" -k 1 -dv 5;

}

if($type==2){

addAttr -ln lightColor -at "float3" -nc 3 -uac;
addAttr -ln lightColorR -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorG -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorB -at "float"  -p lightColor -dv 1;
addAttr -ln "intensity" -at "float" -k 1 -dv $intensity;

addAttr -ln "emitDiffuse" -at bool -k 1 -dv 1;
addAttr -ln "emitSpecular" -at bool -k 1 -dv 1;

addAttr -ln shadowColor -at "float3" -nc 3 -uac;
addAttr -ln shadowColorR -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorG -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorB -at "float"  -p shadowColor -dv 0;

addAttr -ln "useRayTraceShadows" -at bool -k 1 -dv 0;
addAttr -ln "lightRadius" -at "float" -k 1 -dv 5;
addAttr -ln "shadowRays" -at long -k 1 -dv 8;
addAttr -ln "rayDepthLimit" -at long -k 1 -dv 1;

addAttr -ln "useDepthMapShadows" -at bool -k 1 -dv 1;
addAttr -ln "useMidDistDmap" -at bool -k 1 -dv 1;
addAttr -ln "useDmapAutoFocus" -at bool -k 1 -dv 1;

addAttr -ln "dmapResolution" -at long -k 1 -dv 512;
addAttr -ln "dmapFilterSize" -at "float" -k 1 -dv 6;
addAttr -ln "dmapBias" -at "float" -k 1 -dv 0.01;
addAttr -ln "dmapFocus" -at "float" -k 1 -dv 90;
addAttr -ln "centerOfIllumination" -at "float" -k 1 -dv 5;

}

if($type==6){

addAttr -ln lightColor -at "float3" -nc 3 -uac;
addAttr -ln lightColorR -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorG -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorB -at "float"  -p lightColor -dv 1;
addAttr -ln "intensity" -at "float" -k 1 -dv $intensity;

addAttr -ln "lightScale" -at "float" -k 1 -dv 1;

addAttr -ln "emitDiffuse" -at bool -k 1 -dv 1;
addAttr -ln "emitSpecular" -at bool -k 1 -dv 1;

addAttr -ln shadowColor -at "float3" -nc 3 -uac;
addAttr -ln shadowColorR -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorG -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorB -at "float"  -p shadowColor -dv 0;

addAttr -ln "useRayTraceShadows" -at bool -k 1 -dv 0;
addAttr -ln "lightRadius" -at "float" -k 1 -dv 5;
addAttr -ln "shadowRays" -at long -k 1 -dv 8;
addAttr -ln "rayDepthLimit" -at long -k 1 -dv 1;

addAttr -ln "useDepthMapShadows" -at bool -k 1 -dv 1;
addAttr -ln "useMidDistDmap" -at bool -k 1 -dv 1;


addAttr -ln "dmapResolution" -at long -k 1 -dv 512;
addAttr -ln "dmapFilterSize" -at "float" -k 1 -dv 6;
addAttr -ln "dmapBias" -at "float" -k 1 -dv 0.01;
addAttr -ln "centerOfIllumination" -at "float" -k 1 -dv 5;

}

if($type==5){

addAttr -ln lightColor -at "float3" -nc 3 -uac;
addAttr -ln lightColorR -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorG -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorB -at "float"  -p lightColor -dv 1;
addAttr -ln "intensity" -at "float" -k 1 -dv $intensity;

addAttr -ln "lightScale" -at "float" -k 1 -dv 1;


addAttr -ln "emitDiffuse" -at bool -k 1 -dv 1;
addAttr -ln "emitSpecular" -at bool -k 1 -dv 1;

addAttr -ln shadowColor -at "float3" -nc 3 -uac;
addAttr -ln shadowColorR -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorG -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorB -at "float"  -p shadowColor -dv 0;

addAttr -ln "useRayTraceShadows" -at bool -k 1 -dv 0;
addAttr -ln "shadowRays" -at long -k 1 -dv 8;
addAttr -ln "rayDepthLimit" -at long -k 1 -dv 1;
addAttr -ln "useDepthMapShadows" -at bool -k 1 -dv 1;
addAttr -ln "useMidDistDmap" -at bool -k 1 -dv 1;
addAttr -ln "dmapResolution" -at long -k 1 -dv 512;
addAttr -ln "dmapFilterSize" -at "float" -k 1 -dv 6;
addAttr -ln "dmapBias" -at "float" -k 1 -dv 0.01;
addAttr -ln "centerOfIllumination" -at "float" -k 1 -dv 5;

}

if($type==1){

addAttr -ln lightColor -at "float3" -nc 3 -uac;
addAttr -ln lightColorR -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorG -at "float"  -p lightColor -dv 1;
addAttr -ln lightColorB -at "float"  -p lightColor -dv 1;
addAttr -ln "intensity" -at "float" -k 1 -dv $intensity;

addAttr -ln "emitDiffuse" -at bool -k 1 -dv 1;
addAttr -ln "emitSpecular" -at bool -k 1 -dv 1;

addAttr -ln shadowColor -at "float3" -nc 3 -uac;
addAttr -ln shadowColorR -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorG -at "float"  -p shadowColor -dv 0;
addAttr -ln shadowColorB -at "float"  -p shadowColor -dv 0;

addAttr -ln "useRayTraceShadows" -at bool -k 1 -dv 0;
addAttr -ln "lightAngle" -at "float" -k 1 -dv 5;
addAttr -ln "shadowRays" -at long -k 1 -dv 8;
addAttr -ln "rayDepthLimit" -at long -k 1 -dv 1;

addAttr -ln "useDepthMapShadows" -at bool -k 1 -dv 1;
addAttr -ln "useMidDistDmap" -at bool -k 1 -dv 1;
addAttr -ln "useDmapAutoFocus" -at bool -k 1 -dv 1;

addAttr -ln "dmapResolution" -at long -k 1 -dv 512;
addAttr -ln "dmapFilterSize" -at "float" -k 1 -dv 6;
addAttr -ln "dmapBias" -at "float" -k 1 -dv 0.01;
addAttr -ln "dmapWidthFocus" -at "float" -k 1 -dv 90;
addAttr -ln "useLightPosition" -at long -k 1 -dv 0;
addAttr -ln "centerOfIllumination" -at "float" -k 1 -dv 5;

}

select -cl;
if($type==5||$type==6){
select -add ($kk[0]+"_light*");
string $plf[]=`ls -sl -transforms`;
for($i=0;$i<size($plf);$i++){
connectAttr -f ($objCtrl+".lightScale") ($plf[$i]+".scaleX");
connectAttr -f ($objCtrl+".lightScale") ($plf[$i]+".scaleY");
connectAttr -f ($objCtrl+".lightScale") ($plf[$i]+".scaleZ");
}
}

for($i=0;$i<size($pl);$i++){

if($type==3){
connectAttr -f ($objCtrl+".coneAngle") ($pl[$i]+".coneAngle");
connectAttr -f ($objCtrl+".penumbraAngle") ($pl[$i]+".penumbraAngle");
connectAttr -f ($objCtrl+".dropoff") ($pl[$i]+".dropoff");

connectAttr -f ($objCtrl+".lightColor") ($pl[$i]+".color");
connectAttr -f ($objCtrl+".intensity") ($pl[$i]+".intensity");

connectAttr -f ($objCtrl+".emitDiffuse") ($pl[$i]+".emitDiffuse");
connectAttr -f ($objCtrl+".emitSpecular") ($pl[$i]+".emitSpecular");
connectAttr -f ($objCtrl+".shadowColor") ($pl[$i]+".shadowColor");

connectAttr -f ($objCtrl+".useRayTraceShadows") ($pl[$i]+".useRayTraceShadows");
connectAttr -f ($objCtrl+".lightRadius") ($pl[$i]+".lightRadius");
connectAttr -f ($objCtrl+".shadowRays") ($pl[$i]+".shadowRays");
connectAttr -f ($objCtrl+".rayDepthLimit") ($pl[$i]+".rayDepthLimit");

connectAttr -f ($objCtrl+".useDepthMapShadows") ($pl[$i]+".useDepthMapShadows");
connectAttr -f ($objCtrl+".useMidDistDmap") ($pl[$i]+".useMidDistDmap");
connectAttr -f ($objCtrl+".useDmapAutoFocus") ($pl[$i]+".useDmapAutoFocus");
connectAttr -f ($objCtrl+".dmapFocus") ($pl[$i]+".dmapFocus");
connectAttr -f ($objCtrl+".dmapResolution") ($pl[$i]+".dmapResolution");
connectAttr -f ($objCtrl+".dmapBias") ($pl[$i]+".dmapBias");

connectAttr -f ($objCtrl+".dmapFilterSize") ($pl[$i]+".dmapFilterSize");
connectAttr -f ($objCtrl+".centerOfIllumination") ($pl[$i]+".centerOfIllumination");
}

if($type==4){
connectAttr -f ($objCtrl+".lightColor") ($pl[$i]+".color");
connectAttr -f ($objCtrl+".intensity") ($pl[$i]+".intensity");
connectAttr -f ($objCtrl+".ambientShade") ($pl[$i]+".ambientShade");
connectAttr -f ($objCtrl+".shadowColor") ($pl[$i]+".shadowColor");
connectAttr -f ($objCtrl+".useRayTraceShadows") ($pl[$i]+".useRayTraceShadows");
connectAttr -f ($objCtrl+".shadowRadius") ($pl[$i]+".shadowRadius");
connectAttr -f ($objCtrl+".shadowRays") ($pl[$i]+".shadowRays");
connectAttr -f ($objCtrl+".rayDepthLimit") ($pl[$i]+".rayDepthLimit");
connectAttr -f ($objCtrl+".centerOfIllumination") ($pl[$i]+".centerOfIllumination");
}

if($type==2){

connectAttr -f ($objCtrl+".lightColor") ($pl[$i]+".color");
connectAttr -f ($objCtrl+".intensity") ($pl[$i]+".intensity");

connectAttr -f ($objCtrl+".emitDiffuse") ($pl[$i]+".emitDiffuse");
connectAttr -f ($objCtrl+".emitSpecular") ($pl[$i]+".emitSpecular");
connectAttr -f ($objCtrl+".shadowColor") ($pl[$i]+".shadowColor");

connectAttr -f ($objCtrl+".useRayTraceShadows") ($pl[$i]+".useRayTraceShadows");
connectAttr -f ($objCtrl+".lightRadius") ($pl[$i]+".lightRadius");
connectAttr -f ($objCtrl+".shadowRays") ($pl[$i]+".shadowRays");
connectAttr -f ($objCtrl+".rayDepthLimit") ($pl[$i]+".rayDepthLimit");

connectAttr -f ($objCtrl+".useDepthMapShadows") ($pl[$i]+".useDepthMapShadows");
connectAttr -f ($objCtrl+".useMidDistDmap") ($pl[$i]+".useMidDistDmap");
connectAttr -f ($objCtrl+".useDmapAutoFocus") ($pl[$i]+".useDmapAutoFocus");
connectAttr -f ($objCtrl+".dmapFocus") ($pl[$i]+".dmapFocus");
connectAttr -f ($objCtrl+".dmapResolution") ($pl[$i]+".dmapResolution");
connectAttr -f ($objCtrl+".dmapBias") ($pl[$i]+".dmapBias");

connectAttr -f ($objCtrl+".dmapFilterSize") ($pl[$i]+".dmapFilterSize");
connectAttr -f ($objCtrl+".centerOfIllumination") ($pl[$i]+".centerOfIllumination");

}

if($type==6){

connectAttr -f ($objCtrl+".lightColor") ($pl[$i]+".color");
connectAttr -f ($objCtrl+".intensity") ($pl[$i]+".intensity");

connectAttr -f ($objCtrl+".emitDiffuse") ($pl[$i]+".emitDiffuse");
connectAttr -f ($objCtrl+".emitSpecular") ($pl[$i]+".emitSpecular");
connectAttr -f ($objCtrl+".shadowColor") ($pl[$i]+".shadowColor");

connectAttr -f ($objCtrl+".useRayTraceShadows") ($pl[$i]+".useRayTraceShadows");
connectAttr -f ($objCtrl+".lightRadius") ($pl[$i]+".lightRadius");
connectAttr -f ($objCtrl+".shadowRays") ($pl[$i]+".shadowRays");
connectAttr -f ($objCtrl+".rayDepthLimit") ($pl[$i]+".rayDepthLimit");

connectAttr -f ($objCtrl+".useDepthMapShadows") ($pl[$i]+".useDepthMapShadows");
connectAttr -f ($objCtrl+".useMidDistDmap") ($pl[$i]+".useMidDistDmap");


connectAttr -f ($objCtrl+".dmapResolution") ($pl[$i]+".dmapResolution");
connectAttr -f ($objCtrl+".dmapBias") ($pl[$i]+".dmapBias");

connectAttr -f ($objCtrl+".dmapFilterSize") ($pl[$i]+".dmapFilterSize");
connectAttr -f ($objCtrl+".centerOfIllumination") ($pl[$i]+".centerOfIllumination");

}

if($type==5){

connectAttr -f ($objCtrl+".lightColor") ($pl[$i]+".color");
connectAttr -f ($objCtrl+".intensity") ($pl[$i]+".intensity");

connectAttr -f ($objCtrl+".emitDiffuse") ($pl[$i]+".emitDiffuse");
connectAttr -f ($objCtrl+".emitSpecular") ($pl[$i]+".emitSpecular");
connectAttr -f ($objCtrl+".shadowColor") ($pl[$i]+".shadowColor");

connectAttr -f ($objCtrl+".useRayTraceShadows") ($pl[$i]+".useRayTraceShadows");
connectAttr -f ($objCtrl+".shadowRays") ($pl[$i]+".shadowRays");
connectAttr -f ($objCtrl+".rayDepthLimit") ($pl[$i]+".rayDepthLimit");

connectAttr -f ($objCtrl+".useDepthMapShadows") ($pl[$i]+".useDepthMapShadows");
connectAttr -f ($objCtrl+".useMidDistDmap") ($pl[$i]+".useMidDistDmap");

connectAttr -f ($objCtrl+".dmapResolution") ($pl[$i]+".dmapResolution");
connectAttr -f ($objCtrl+".dmapBias") ($pl[$i]+".dmapBias");

connectAttr -f ($objCtrl+".dmapFilterSize") ($pl[$i]+".dmapFilterSize");
connectAttr -f ($objCtrl+".centerOfIllumination") ($pl[$i]+".centerOfIllumination");

}

if($type==1){

connectAttr -f ($objCtrl+".lightColor") ($pl[$i]+".color");
connectAttr -f ($objCtrl+".intensity") ($pl[$i]+".intensity");

connectAttr -f ($objCtrl+".emitDiffuse") ($pl[$i]+".emitDiffuse");
connectAttr -f ($objCtrl+".emitSpecular") ($pl[$i]+".emitSpecular");
connectAttr -f ($objCtrl+".shadowColor") ($pl[$i]+".shadowColor");

connectAttr -f ($objCtrl+".useRayTraceShadows") ($pl[$i]+".useRayTraceShadows");
connectAttr -f ($objCtrl+".lightAngle") ($pl[$i]+".lightAngle");
connectAttr -f ($objCtrl+".shadowRays") ($pl[$i]+".shadowRays");
connectAttr -f ($objCtrl+".rayDepthLimit") ($pl[$i]+".rayDepthLimit");

connectAttr -f ($objCtrl+".useDepthMapShadows") ($pl[$i]+".useDepthMapShadows");
connectAttr -f ($objCtrl+".useMidDistDmap") ($pl[$i]+".useMidDistDmap");
connectAttr -f ($objCtrl+".useDmapAutoFocus") ($pl[$i]+".useDmapAutoFocus");
connectAttr -f ($objCtrl+".dmapWidthFocus") ($pl[$i]+".dmapWidthFocus");
connectAttr -f ($objCtrl+".dmapResolution") ($pl[$i]+".dmapResolution");
connectAttr -f ($objCtrl+".dmapBias") ($pl[$i]+".dmapBias");

connectAttr -f ($objCtrl+".dmapFilterSize") ($pl[$i]+".dmapFilterSize");
connectAttr -f ($objCtrl+".useLightPosition") ($pl[$i]+".useLightPosition");

connectAttr -f ($objCtrl+".centerOfIllumination") ($pl[$i]+".centerOfIllumination");
    }
}

select -cl;
}
///////////////////////////////////////////
global proc gtLightscylinder(){
int $i,$j,$u,$v;
vector $po[];
float $pp[];

int $typea=`radioButtonGrp -q -sl gtRadioType2`;
int $typeb=`radioButtonGrp -q -sl gtRadioType2a`;

int $type;
if($typea==0) $type=$typeb+3;
if($typea!=0)  $type=$typea;


$u=`intField -q -v gtintF3`;
$v=`intField -q -v gtintF4`;
float $hight=`floatField -q -v gtfloatF4`;
float $radius=`floatField -q -v gtfloatF3`;
string $name=`textField -q -text gttextF2`;
string $kk[];
int $tokN=`tokenize $name "_" $kk`;

int $ex=`objExists ($kk[0]+"SkyLihgts")`;
if($ex==1) error "the same object is exists please enter a new name in the field";

string $kkk[]=`cylinder -radius $radius -hr $hight -s $v -spans ($u-3) -d 3 -ax 0 1 0 -n ($kk[0]+"SkyLihgts")`;
$u=$u+3;
$v=$v;

float $scale=$radius/20.0;
float $scalea=$radius/5.0;

switch($type){

case 1:
defaultDirectionalLight(1, 1,0,1, "0", 0,0,0, 0);
rename  ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;

case 2:
defaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);
rename  ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;

case 3:
defaultSpotLight(1, 1,1,1, 0, 40, 0, 0, 0, 0,0,0, 1, 0);
rename  ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;

case 4:
defaultAmbientLight(1, 0.45, 1,1,1, "0", 0,0,0, "1");
rename  ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;

case 5:
defaultAreaLight(1, 1,1,1, 0, 0, 0,0,0, 1, 0);
rename  ($kk[0]+"_light");
scale $scalea $scalea $scalea;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;

case 6:
defaultVolumeLight(1, 1,1,1, 0, 0, 0,0,0, 1);
rename  ($kk[0]+"_light");
scale $scalea $scalea $scalea;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;
}

for($i=0;$i<$u;$i++){

 for($j=0;$j<$v;$j++){

$pp=`pointPosition($kkk[0]+".cv["+$i+"]["+$j+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];
  }
}

select -r ($kk[0]+"_light");
delete;


select -cl;
select -add ($kk[0]+"_light"+"*");
string $lights[]=`ls -type transform -sl`;
for($i=0;$i<size($lights);$i++){
select -cl;
select -r $kkk[0] $lights[$i];
string $gtAimconstraint[]=`aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0`;
delete $gtAimconstraint[0];
select -r $lights[$i] $kkk[0];
parent;
}

gtConnectLight($kk);
gtLightRendering($kkk);

}

///////////////////////////////////////
global proc gtLightsSphere(){
int $i,$j;
int $u,$v;

float $pp[];
int $checkS=`checkBox -q -v gtcheckBox`;
int $typea=`radioButtonGrp -q -sl gtRadioType3`;
int $typeb=`radioButtonGrp -q -sl gtRadioType3a`;
int $type;
if($typea==0) $type=$typeb+3;
if($typea!=0)  $type=$typea;

float $radius=`floatField -q -v gtfloatF6`; 
string $name=`textField -q -text gttextF3`; 
$u=`intField -q -v gtfloatF5`;
$v=`intField -q -v gtfloatF5a`;

string $kk[];
int $tonN=`tokenize $name "_" $kk`;

int $ex=`objExists ($kk[0]+"SkyLihgts")`;
if($ex==1) error "the same object is exists please enter a new name in the field";

string $kkk[]=`sphere -radius $radius -nsp ($u-3) -s $v -d 3 -ax 0 1 0 -n ($kk[0]+"SkyLihgts")`;

int $va=$v-1;

float $scale=$radius/20.0;
float $scalea=$radius/5.0;

switch($type){
case 1:
defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
rename ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;
case 2:
defaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);
rename ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;
case 3:
defaultSpotLight(1, 1,1,1, 0, 40, 0, 0, 0, 0,0,0, 1, 0);
rename ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;
case 4:
defaultAmbientLight(1, 0.45, 1,1,1, "0", 0,0,0, "1");
rename ($kk[0]+"_light");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;
case 5:
defaultAreaLight(1, 1,1,1, 0, 0, 0,0,0, 1, 0);
rename  ($kk[0]+"_light");
scale $scalea $scalea $scalea;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;

case 6:
defaultVolumeLight(1, 1,1,1, 0, 0, 0,0,0, 1);
rename  ($kk[0]+"_light");
scale $scalea $scalea $scalea;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
break;
}

if($checkS){

$pp=`pointPosition ($kkk[0]+".cv[0]["+$va+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];

$pp=`pointPosition ($kkk[0]+".cv["+$u+"]["+$va+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];

for($i=1;$i<$u-1;$i++){
   for($j=0;$j<$v;$j++){
     
$pp=`pointPosition ($kkk[0]+".cv["+$i+"]["+$j+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];
}
}
}

if(!$checkS){

$pp=`pointPosition ($kkk[0]+".cv["+$u+"]["+$va+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];

for($i=$u/2;$i<$u-1;$i++){
   for($j=0;$j<$v;$j++){
     
$pp=`pointPosition ($kkk[0]+".cv["+$i+"]["+$j+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];
}
}
}

select -r ($kk[0]+"_light");
delete;

select -cl;
select -add ($kk[0]+"_light"+"*");
string $lights[]=`ls -type transform -sl`;
for($i=0;$i<size($lights);$i++){
select -cl;
select -r $kkk[0] $lights[$i];
string $gtAimconstraint[]=`aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0`;
delete $gtAimconstraint[0];
select -r $lights[$i]  $kkk[0];
parent;
}

gtConnectLight($kk);
gtLightRendering($kkk);

}
////////////////////////
global proc gtLightsplane(){
int $i,$j,$u,$v;
int $deg[];
float $pp[];


int $typea=`radioButtonGrp -q -sl gtRadioType1`;
int $typeb=`radioButtonGrp -q -sl gtRadioType1a`;
int $type;
if($typea==0) $type=$typeb+3;
if($typea!=0)  $type=$typea;

float $width=`floatField -q -v gtfloatF1`;
float $lratio=`floatField -q -v gtfloatF2`;
$u=`intField -q -v gtintF1`;
$v=`intField -q -v gtintF2`;
string $name=`textField -q -text gttextF1`;

string $kk[];
int $tokN=`tokenize $name "_" $kk`;
int $ex=`objExists ($kk[0]+"SkyLihgts")`;
if($ex==1) error "the same object is exists please enter a new name in the field";

string $kkk[]=`nurbsPlane -w $width -lr $lratio -d 3 -ax 0 1 0  -u ($u-3) -v ($v-3) -n ($kk[0]+"SkyLihgts")`;


float $scale=$width/20.0;
float $scalea=$width/5.0;
switch($type){
case 1:
defaultDirectionalLight(1, 1,0,1, "0", 0,0,0, 0);
rotate 90 0 0;
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
rename  ($kk[0]+"_light");
break;

case 2:
defaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
rename  ($kk[0]+"_light");
break;

case 3:
defaultSpotLight(1, 1,1,1, 0, 40, 0, 0, 0, 0,0,0, 1, 0);
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
rotate 90 0 0;
rename  ($kk[0]+"_light");
break;

case 4:
defaultAmbientLight(1, 0.45, 1,1,1, "0", 0,0,0, "1");
scale $scale $scale $scale;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
rename  ($kk[0]+"_light");
break;

case 5:
defaultAreaLight(1, 1,1,1, 0, 0, 0,0,0, 1, 0);
rotate 90 0 0;
scale $scalea $scalea $scalea;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
rename  ($kk[0]+"_light");
break;

case 6:
defaultVolumeLight(1, 1,1,1, 0, 0, 0,0,0, 1);
scale $scalea $scalea $scalea;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
rename  ($kk[0]+"_light");
break;
}

for($i=0;$i<$u;$i++)
 {
    for($j=0;$j<$v;$j++)
       {
  $pp=`pointPosition ($kkk[0]+".cv"+"["+$i+"]"+"["+$j+"]")`;
select -r ($kk[0]+"_light");
duplicate;
move -r -ls -wd $pp[0] $pp[1] $pp[2];
}
}
select -r ($kk[0]+"_light");
delete;

select -cl;
select -add ($kk[0]+"_light"+"*");
string $lights[]=`ls -type transform -sl`;
for($i=0;$i<size($lights);$i++){
select -cl;
select -r $lights[$i]  $kkk[0];
parent;
}
gtConnectLight($kk);
gtLightRendering($kkk);
}
//高低模型烘焙法线贴图动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////

global proc gtNormalTextureWin(){
string $workspacePath=`workspace -q -fn`+"/";
if(`window -ex gtNormalCreateTNWin`==1) deleteUI -window gtNormalCreateTNWin;
window -t "老船角色绑定-☆-高低模型烘焙法线贴图动画工具" -wh 600 300 gtNormalCreateTNWin;
    columnLayout -adj 1 mainColumnattr;
text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1714\"";
string $form=`formLayout gtFormL`;
frameLayout -lv 0  -cll 0 -cl 0 -h 35 mianFrame1;
formLayout gtF;

string $Bof="textFieldButtonGrp -e -en 0 gtTextFieldGA;";
string $Bon="textFieldButtonGrp -e -en 1 gtTextFieldGA;";

string $Aof="textFieldButtonGrp -e -en 0 gtTextFieldG;optionMenu -e -en 0 gtNBT_menu;textField -e -en 0  gtNBT_textField;intField  -e -en 0 gtNBT_intField;";

string $Aon="textFieldButtonGrp -e -en 1 gtTextFieldG;optionMenu -e -en 1 gtNBT_menu;textField -e -en 1  gtNBT_textField;intField  -e -en 1 gtNBT_intField;";
help radioButtonGrp;

string $radioBG=`radioButtonGrp -l "操作项:"  -nrb 3 -cw4 50 155  155 160  -la3 "创建并连接法线贴图" "连接法线贴图" "删除法线贴图" -sl 1 -on1 $Aon -of1  $Aof -on2 $Bon -of2 $Bof  gtradioBG`;
setParent..;
setParent..;
formLayout -e

-af gtradioBG left 15 -af gtradioBG right 5 -af gtradioBG top 5 -af gtradioBG bottom 5 gtF;

frameLayout -lv 0  -cll 0 -cl 0 mainFrame2;
formLayout gtForm1;
text -l "贴图名称:" text1;
textField -text "normalBumpTexture" -w 95 gtNBT_textField;
text -l "贴图尺寸:" text2;
intField  -min 128 -max 4096 -value 512 -w 95 gtNBT_intField;
separator -style single sep3;
optionMenu -l "贴图格式:" gtNBT_menu;
menuItem -l "als";
menuItem -l "bmp";
menuItem -l "gif";
menuItem -l "iff";
menuItem -l "jpg";
menuItem -l "pic";
menuItem -l "rla";
menuItem -l "sgi";
menuItem -l "tif";
menuItem -l "tga";
optionMenu -e -sl 9 gtNBT_menu;
textFieldButtonGrp -cw3 80 415 80 -l "输出贴图路径:" -text $workspacePath -bl "浏       览" -bc "gtNormalTexGetfile;" gtTextFieldG;

textFieldButtonGrp -en 0 -cw3 80 415 80 -l "读取贴图路径:" -text $workspacePath -bl "浏       览" -bc "gtNormalTexGetfileA;" gtTextFieldGA;

setParent..;
setParent..;

formLayout -e 
-af text1 left 15 -af text1 top 5 -ap text1 right 0 15
-ac gtNBT_textField left 0 text1 -af gtNBT_textField top 5 -ap gtNBT_textField right 15 42
-ac text2 left 25 gtNBT_textField  -af text2 top 5 -ap text2 right 45 62

-ac gtNBT_intField left 0 text2 -af gtNBT_intField top 5 -ap gtNBT_intField right 68 87
-ac gtNBT_menu left 0 gtNBT_intField -af gtNBT_menu top 5 -af gtNBT_menu right 5

-af sep3 left 10 -ac sep3 top 2 gtNBT_intField -af sep3 right 10

-af gtTextFieldG left 0 -ac gtTextFieldG top 2 sep3  -af gtTextFieldG right 2

-af gtTextFieldGA left 0 -ac gtTextFieldGA top 2 gtTextFieldG  -af gtTextFieldGA right 2  gtForm1;

formLayout gtForm2;

button -l "应         用" -w 120 -c "gtNormTextureMake" but2;
formLayout -e 
-af but2 left 5  -af but2 right 5 -af but2 top 5 gtForm2; 

setParent..;
setParent..;

formLayout -e 
-af mianFrame1 left 10 -af mianFrame1 top 5 -af mianFrame1 right 10
-af mainFrame2 left 10 -ac mainFrame2 top 2 mianFrame1 -af mainFrame2 right 10
-af gtForm2 left 5 -ac gtForm2 top 2 mainFrame2 -af gtForm2 right 5 gtFormL;

showWindow gtNormalCreateTNWin;
}

///////////////////////////////////////
global proc gtNormalTexGetName(string $dir,string $type){
textFieldButtonGrp -e -text ($dir) gtTextFieldG;
}
global proc gtNormalTexGetNameA(string $dir,string $type){
textFieldButtonGrp -e -text ($dir) gtTextFieldGA;
}
global proc gtNormalTexGetfile(){
string $filename[] = `fileDialog2 -fileMode 2 -caption "Import Image"`;
if (1 == `size($filename)`)
    {
   gtNormalTexGetName($filename[0], "");
    }
}
global proc gtNormalTexGetfileA(){
string $filename[] = `fileDialog2 -fileMode 1 -caption "Import Image"`;
if (1 == `size($filename)`)
    {
   gtNormalTexGetNameA($filename[0], "");
    }
}
////////////////////////////////
global proc gtNormTextureMake(){

 string $option=`radioButtonGrp -q -sl gtradioBG`;
 string $texName=`textField -q -text "gtNBT_textField"`;
 int    $outResolution=`intField -q -value "gtNBT_intField"`;
 string $outFormat=`optionMenu -q -v "gtNBT_menu"`;

 string $outName=$texName+"."+$outFormat;
 string $texturepath=`textFieldGrp -q -text gtTextFieldG`;
 string $texturepathA=`textFieldGrp -q -text gtTextFieldGA`;

 string $texPath=$texturepath+"/"+$outName;
 string $texPathA=$texturepathA;

  if($option==1){

  string $sel[]=`ls -sl`;
  int $size=size($sel);
  if($size==0) confirmDialog -title "NormalTextureWarning" -message "no object selected" -button "OK";
     if($size>2) error "too many objects are selected. one or two should be fine";
     if($size==2){

     string $selShape0[]=`listRelatives -s $sel[0]`;
     string $selShape1[]=`listRelatives -s $sel[1]`;

     string $type0[]=`ls -st $selShape0[0]`;
     string $type1[]=`ls -st $selShape1[0]`;


     select -r ($selShape0[0]+".f[*]");
     string $face1[]=`filterExpand -sm 34`;
     int $size1=`size($face1)`;
     select -r ($selShape1[0]+".f[*]");
     string $face2[]=`filterExpand -sm 34`;
     int $size2=`size($face2)`;

     string $sourceSelect;
     string $targetSelect;

     string $sourceShape;
     string $targetShape;
     
     string $tmpN="";
 
     if($size1==$size2) error "the object selected are have the same shape and no high and low model can be distinct";

     if($size1>$size2){
     
      $sourceSelect=$sel[0];
      $targetSelect=$sel[1];

      $sourceShape=$selShape0[0];
      $targetShape=$selShape1[0];
      $tmpN=($sel[1]+"_");}
     
     if($size1<$size2){
     
      $sourceSelect=$sel[1];
      $targetSelect=$sel[0];

      $sourceShape=$selShape1[0];
      $targetShape=$selShape0[0];
      $tmpN=($sel[0]+"_");}
  
     if($type0[1]!="mesh"&&$type0[1]!="nurbsSurface")
          {error "the first object is not mesh or nurbs";}
     
     if($type1[1]!="mesh"&&$type1[1]!="nurbsSurface")
          {error "the secound object is not mesh or nurbs";}

     if($type0[1]=="mesh"||$type0[1]=="nurbsSurface"){
     if($type1[1]=="mesh"||$type1[1]=="nurbsSurface"){

     shadingNode -au vectorProduct -n ($tmpN+"normalBump_VProduct1");   setAttr ".op" 3;
     shadingNode -au samplerInfo -n ($tmpN+"normalBump_samplerInfo");
     shadingNode -au vectorProduct -n ($tmpN+"normalBump_VProduct2");   setAttr ".op" 3;
     shadingNode -as surfaceShader -n ($tmpN+"normalBump_InShader");
     sets -renderable true -noSurfaceShader true -empty -name ($tmpN+"surfaceShaderSG");
     connectAttr -f ($tmpN+"normalBump_InShader.outColor") ($tmpN+"surfaceShaderSG.surfaceShader");


     shadingNode -au setRange -n ($tmpN+"normalBump_setRange");
     setAttr ".m" -type "float3"   1 1 1 ;
     setAttr ".on" -type "float3" -1 -1 -1 ;
     setAttr ".om" -type "float3"  1 1 1 ;

     connectAttr ($tmpN+"normalBump_samplerInfo.normalCamera") ($tmpN+"normalBump_VProduct1.i1");
     connectAttr ($tmpN+"normalBump_VProduct1.output") ($tmpN+"normalBump_VProduct2.input1");
     connectAttr ($tmpN+"normalBump_setRange.o") ($tmpN+"normalBump_InShader.oc");
     connectAttr ($tmpN+"normalBump_VProduct2.o") ($tmpN+"normalBump_setRange.v");
    
     connectAttr ("perspShape.worldMatrix[0]") ($tmpN+"normalBump_VProduct1.matrix");
     connectAttr ($sourceShape+".worldInverseMatrix[0]") ($tmpN+"normalBump_VProduct2.matrix");

     string $selShadSG[]=`listConnections -source 0 -destination 1 ($sourceShape+".instObjGroups[0]")`;
     string $selShad[]=`listConnections -source 1 -destination 0 ($selShadSG[0]+".surfaceShader")`;

     string $beforeShad=$selShad[0];

     defaultNavigation -source ($tmpN+"normalBump_InShader") -destination ($sourceShape+".instObjGroups[0]") -connectToExisting;
//print $outName
     string $finalTex[]=`convertSolidTx -antiAlias 1 -bm 3 -fts 1 -sp 0 -sh 0 -alpha 0 -doubleSided 0
                     -componentRange 0 -resolutionX  $outResolution -resolutionY $outResolution 
                     -fileFormat $outFormat -fileImageName $texPath ($tmpN+"normalBump_setRange.outValue") $sourceSelect`;
 
//help convertSolidTx;

     string $fileTex=$finalTex[0];
     string $inShadSG[]=`listConnections -source 0 -destination 1 ($tmpN+"normalBump_InShader.outColor")`;

     defaultNavigation -source $beforeShad -destination ($sourceShape+".instObjGroups[0]") -connectToExisting;

     select -r ($tmpN+"normalBump_samplerInfo");
     select -add ($tmpN+"surfaceShaderSG");
     select -add ($tmpN+"normalBump_VProduct1");
     select -add ($tmpN+"normalBump_VProduct2");
     select -add ($tmpN+"normalBump_setRange");
     select -add ($tmpN+"normalBump_InShader");
     select -add  $fileTex;
     select -add -ne $inShadSG[0];
     delete;

     string $inputN=$texPath;

     string $targetShadSG[]=`listConnections -source 0 -destination 1 ($targetShape+".instObjGroups[0]")`;
     string $targetShad[]=`listConnections -source 1 -destination 0 ($targetShadSG[0]+".surfaceShader")`;
     string $bumpInput[]=`listConnections -source 1 -destination 0 ($targetShad[0]+".normalCamera")`;
     
     string $connectNode;
     int $bumpSize=size($bumpInput);
     if($bumpSize==1){
     int    $exbumpNormalCamera=`attributeExists normalCamera $bumpInput[0]`; 
     if($exbumpNormalCamera==0) error "normalBumpTexture completed but can not assign to object your specified please check the shader's normalCamera of the object";

     string $connectToBumpN[]=`listConnections -source 1 -destination 0 ($bumpInput[0]+".normalCamera")`;
    
     int $connectTBNtypesize=`size($connectToBumpN)`;
     if($connectTBNtypesize==1)
          error "normalBumpTexture completed but can not assign to object your specified please check the bump'normalCmaera attribute of the shader of the object";

       $connectNode=$bumpInput[0];}

     if($bumpSize==0){
     $connectNode=$targetShad[0];}

     string $file=`createNode file -n ($tmpN+"BNT_file")`;
     shadingNode -au setRange    -n ($tmpN+"BNT_setRange");
     setAttr ".max" -type "float3" 1 1 1 ;
     setAttr ".min" -type "float3" -1 -1 -1 ;
     setAttr ".om" -type "float3" 1 1 1 ;
     shadingNode -au vectorProduct -n ($tmpN+"BNT_VProduct");  setAttr ".op" 3;
     connectAttr -f ($tmpN+"BNT_file.outColor") ($tmpN+"BNT_setRange.value");
     connectAttr -f ($tmpN+"BNT_setRange.outValue") ($tmpN+"BNT_VProduct.input1");


        connectAttr -f ($tmpN+"BNT_VProduct.output") ($connectNode+".normalCamera");

        //$texturepath=`workspace -q -fn`;
        //$texPath=$texturepath+"/"+$texName+"."+$outFormat;
//print $texPath;
       // textFieldButtonGrp -e -text $texPath gtTextFieldG;

        string $fileFullPath=$texPath;
        setAttr -type "string"  ($file+".ftn") $fileFullPath;
        select -r $file;
        showEditor $file;
        }        
    }
}

  if($size==1){

  string $selShape0[]=`listRelatives -s $sel[0]`;
  string $type0[]=`ls -st $selShape0[0]`;
  string $sourceSelect=$sel[0];
  string $sourceShape=$selShape0[0];

  string $tmpN=($sel[1]+"_");

  if($type0[1]!="mesh"&&$type0[1]!="nurbsSurface")
          {error "the object is not mesh or nurbs";}
     
  if($type0[1]=="mesh"||$type0[1]=="nurbsSurface"){

   shadingNode -au vectorProduct -n ($tmpN+"normalBump_VProduct1");    setAttr ".op" 3;
   shadingNode -au samplerInfo -n ($tmpN+"normalBump_samplerInfo");
   shadingNode -au vectorProduct -n ($tmpN+"normalBump_VProduct2");    setAttr ".op" 3;
   shadingNode -as surfaceShader -n ($tmpN+"normalBump_InShader");
   sets -renderable true -noSurfaceShader true -empty -name ($tmpN+"surfaceShaderSG");
   connectAttr -f ($tmpN+"normalBump_InShader.outColor") ($tmpN+"surfaceShaderSG.surfaceShader");


   shadingNode -au setRange -n ($tmpN+"normalBump_setRange");
	setAttr ".m" -type "float3" 1 1 1 ;
	setAttr ".on" -type "float3" -1 -1 -1 ;
	setAttr ".om" -type "float3" 1 1 1 ;

   connectAttr ($tmpN+"normalBump_samplerInfo.normalCamera") ($tmpN+"normalBump_VProduct1.i1");
   connectAttr ($tmpN+"normalBump_VProduct1.output") ($tmpN+"normalBump_VProduct2.input1");
   connectAttr ($tmpN+"normalBump_setRange.o") ($tmpN+"normalBump_InShader.oc");


   connectAttr ($tmpN+"normalBump_VProduct2.o") ($tmpN+"normalBump_setRange.v");
   connectAttr ("perspShape.worldMatrix[0]") ($tmpN+"normalBump_VProduct1.matrix");
   connectAttr ($sourceShape+".worldInverseMatrix[0]") ($tmpN+"normalBump_VProduct2.matrix");

   string $selShadSG[]=`listConnections -source 0 -destination 1 ($sourceShape+".instObjGroups[0]")`;
   string $selShad[]=`listConnections -source 1 -destination 0 ($selShadSG[0]+".surfaceShader")`;

   string $beforeShad=$selShad[0];

   defaultNavigation -source ($tmpN+"normalBump_InShader") -destination ($sourceShape+".instObjGroups[0]") -connectToExisting;

   string $texName=`textField -q -text "gtNBT_textField"`;
   int    $outResolution=`intField -q -value "gtNBT_intField"`;
   string $outFormat=`optionMenu -q -v "gtNBT_menu"`;

   string $outName=$texName+"."+$outFormat;
   string $texturepath=`textFieldGrp -q -text gtTextFieldG`;
   string $texPath=$texturepath+"/"+$outName;

   string $finalTex[]=`convertSolidTx -antiAlias 1 -bm 3 -fts 1 -sp 0 -sh 0 -alpha 0 -doubleSided 0
                     -componentRange 0 -resolutionX  $outResolution -resolutionY $outResolution 
                     -fileFormat $outFormat -fileImageName $outName ($tmpN+"normalBump_setRange.outValue") $sourceSelect`;

   string $fileTex=$finalTex[0];
   string $inShadSG[]=`listConnections -source 0 -destination 1 ($tmpN+"normalBump_InShader.outColor")`;
   defaultNavigation -source $beforeShad -destination ($sourceShape+".instObjGroups[0]") -connectToExisting;

   select -r ($tmpN+"normalBump_samplerInfo");
   select -add ($tmpN+"surfaceShaderSG"); 
   select -add ($tmpN+"normalBump_VProduct1");
   select -add ($tmpN+"normalBump_VProduct2");
   select -add ($tmpN+"normalBump_setRange");
   select -add ($tmpN+"normalBump_InShader");
   select -add  $fileTex;
   select -add -ne $inShadSG[0];
   delete;

   $texturepath=`workspace -q -fn`;

   $texPath=$texturepath+"/"+$texName+"."+$outFormat;

   textFieldButtonGrp -e -text $texPath gtTextFieldG;

   string $fileFullPath=`textFieldButtonGrp -q -text gtTextFieldG`;
    }
  }
}

  if($option==2){
  string $fileFullPath=`textFieldButtonGrp -q -text gtTextFieldGA`;
  int $checkEx=`file -q -ex $fileFullPath`;
  if($checkEx==0) error "texturePath of file do not exist please browser the file first";

  string $sel[]=`ls -sl`;
  int $size=size($sel);
   if($size==0) confirmDialog -title "NormalTextureWarning" -message "no object selected" -button "OK";
   
    if($size>1) error "only one object is needed";
    if($size==1){

    string $selShape0[]=`listRelatives -s $sel[0]`;
    string $type0[]=`ls -st $selShape0[0]`;
    string $Select=$sel[0];
    string $sShape=$selShape0[0];

    if($type0[1]!="mesh"&&$type0[1]!="nurbsSurface") { error "the object is not mesh or nurbs";}
          
     
    if($type0[1]=="mesh"||$type0[1]=="nurbsSurface"){

    string $tmpN=($sel[0]+"_");
    string $inputN=$fileFullPath;

    string $ShadSG[]=`listConnections -source 0 -destination 1 ($sShape+".instObjGroups[0]")`;
    string $Shad[]=`listConnections -source 1 -destination 0 ($ShadSG[0]+".surfaceShader")`;
    string $bumpInput[]=`listConnections -source 1 -destination 0 ($Shad[0]+".normalCamera")`;
    
    string $connectNode;
    int $bumpSize=size($bumpInput);

    if($bumpSize==1){
    int $exbumpNormalCamera=`attributeExists normalCamera $bumpInput[0]`;
    if($exbumpNormalCamera==0) error "please check the shader's normalCamera attribute of the object";

    string $tempBump[]=`listConnections -source 1 -destination 0 ($bumpInput[0]+".normalCamera")`;
    int $size=`size($tempBump)`;
     if($size==1) error "please check the bumpMap's normalCamera attribute of shader of the object";
       
    $connectNode=$bumpInput[0];}

     if($bumpSize==0){
     $connectNode=$Shad[0];}
      
    string $file=`createNode file -n ($tmpN+"BNT_file")`;
    shadingNode -au setRange    -n ($tmpN+"BNT_setRange");
    setAttr ".max" -type "float3" 1 1 1 ;
	setAttr ".min" -type "float3" -1 -1 -1 ;
	setAttr ".om" -type "float3" 1 1 1 ;
    shadingNode -au vectorProduct -n ($tmpN+"BNT_VProduct");  setAttr ".op" 3;
    connectAttr -f ($tmpN+"BNT_file.outColor") ($tmpN+"BNT_setRange.value");
    connectAttr -f ($tmpN+"BNT_setRange.outValue") ($tmpN+"BNT_VProduct.input1");
     
      connectAttr -f ($tmpN+"BNT_VProduct.output") ($connectNode+".normalCamera");

      setAttr -type "string"  ($file+".ftn") $fileFullPath;
      select -r $file;
      showEditor $file;
      }else{
      error "please select a polygon or nurbs object";
      }
   }
}


  if($option==3){

  string $sel[]=`ls -sl`;
  int $size=`size($sel)`;
   if($size==0) confirmDialog -title "NormalTextureWarning" -message "no object selected" -button "OK";
   if($size>1) confirmDialog -title "NormalTextureWarning" -message "too many object selected and once for one object" -button "OK";
if($size==1){
   string $selShape0[]=`listRelatives -s $sel[0]`;
   string $type0[]=`ls -st $selShape0[0]`;

   string $Select=$sel[0];
   string $sShape=$selShape0[0];


   if($type0[1]!="mesh"&&$type0[1]!="nurbsSurface")
          { error "the object is not mesh or nurbs";}

    if($type0[1]=="mesh"||$type0[1]=="nurbsSurface"){
    string $ShadSG[]=`listConnections -source 0 -destination 1 ($sShape+".instObjGroups[0]")`;
    string $Shad[]=`listConnections -source 1 -destination 0 ($ShadSG[0]+".surfaceShader")`;
    string $bumpInput[]=`listConnections -source 1 -destination 0 ($Shad[0]+".normalCamera")`;

    string $connectNode;
     if($bumpInput[0]=="") confirmDialog -title "NormalTextureWarning" -message "Normal Bump already cancelled" -button "OK";
       if($bumpInput[0]!=""){
       int $attrEx=`attributeExists normalCamera $bumpInput[0]`;

        if($attrEx==0){
        $connectNode=$Shad[0];
        }else{
        $connectNode=$bumpInput[0];}       

        string $vectorPnode[]=`listConnections -source 1 -destination 0 ($connectNode+".normalCamera")`;

         if($vectorPnode[0]!=""){
         string $setRange[]=`listConnections -source 1 -destination 0 ($vectorPnode[0]+".input1")`;
          if($setRange[0]!=""){
          string $fileNode[]=`listConnections -source 1 -destination 0 ($setRange[0]+".value")`;
          select -r $fileNode[0] $setRange[0] $vectorPnode[0];
          delete;
          } 
          }else{
          confirmDialog -title "NormalTextureWaring" -message "bump Normal already cancelled" -button "ok";
          }
        }
      }
    }
  }
}
////////////////////
//MAYA软修改变形绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtSoftDeformToolWin(){

if(`window -ex gtSoftDeformToolWin`) deleteUI -window gtSoftDeformToolWin;
window -wh 420 200 -t "老船角色绑定-☆-MAYA软修改变形绑定工具" gtSoftDeformToolWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" texta1;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1762\"";
separator -style single  sep1;
floatSliderGrp -l "控制器大小："  -f 1 -v 1 -min 0.01 -max 10  gtSoftDefConradius;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "全部变形模型" -tx "请载入全部变形模型" -ed 0 gtTextBSLSoft3;
button -l "载入变形物体" -c "gtBSLoadSoftMesh" gtButBSC3;

setParent..;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "选择模型顶点";

button -l "软修改变形绑定" -c "gtSoftToolProc;" but3ab;
setParent..;
separator -style single  sep2;

showWindow  gtSoftDeformToolWin;
}
///////////////////////
global proc gtBSLoadSoftMesh(){
string $sel[]=`ls -sl`;
string $obj="";
for($i=0;$i<size($sel);$i++){
    $obj+=(" "+$sel[$i]);
}
textFieldGrp -e -tx ($obj) gtTextBSLSoft3;
}
////////////////////
global proc gtSoftToolProc (){
    string $sel[]=`ls -sl -fl`;
    string $meshAll=`textFieldGrp -q -text  gtTextBSLSoft3`;
    float $scl=`floatSliderGrp -q -v  gtSoftDefConradius`;

    string $tm[];
    int $t=`tokenize ($meshAll) " " $tm`;
    
    string $objName[];

    for($i=0;$i<$t;$i++){
       $objName[$i]=$tm[$i]; 
    }
    //print ($objName[1]);
    string $mesh=($objName[0]);
    
    string $shap[]=`listRelatives -s  ($mesh)`;
    string $nodeType=`nodeType $shap[0]`;
    
    if($nodeType=="mesh"||$nodeType=="nurbsSurface"){
    
    int $ex=`objExists ($mesh+"_SoftConGrp")`;
if($ex==0){
    select -cl;
    group -empty -n ($mesh+"_SoftConGrp");
    }
    
        int $ex=`objExists ($mesh+"_SoftModGrp")`;
if($ex==0){
    select -cl;
    group -empty -n ($mesh+"_SoftModGrp");
    setAttr ($mesh+"_SoftModGrp.visibility") 0;
    setAttr -lock true ($mesh+"_SoftModGrp.v");
    }
    
        int $ex=`objExists ($mesh+"_SoftCenterPivGrp")`;
if($ex==0){
    select -cl;
    group -empty -n ($mesh+"_SoftCenterPivGrp");
    select -cl;
    joint -p 0 0 0 -n ($mesh+"_SoftCenterBn");
    select -r ($mesh);
    select -add ($mesh+"_SoftCenterBn");
    delete`pointConstraint`;
    select -r ($mesh+"_SoftCenterBn"); 
    group -n ($mesh+"_SoftCenterBnGrp");   
    select -add  ($mesh+"_SoftCenterPivGrp");
    parent;
   
    select -r ($mesh);  
    duplicate -rr; 
    rename   ($mesh+"SoftPivMesh"); 
    select -add  ($mesh+"_SoftCenterPivGrp");
    parent;
    select -r ($mesh+"_SoftCenterBn"); 
    select -add  ($mesh+"SoftPivMesh"); 
    newSkinCluster "-mi 3 -omi true -dr 3 -rui true";
    spaceLocator -p 0 0 0 -n ($mesh+"SoftPivLoc");
    group -n ($mesh+"SoftPivLocGrp");
    select -r ($mesh);
    select -add ($mesh+"SoftPivLocGrp");
    delete`pointConstraint`;
    select -r ($mesh+"SoftPivLoc");
    select -add ($mesh+"_SoftCenterBnGrp");   
    parentConstraint -mo;
    scaleConstraint;
    string $shap[]=`listRelatives -s ($mesh+"SoftPivLoc")`;
    setAttr ($shap[0]+".visibility") 0;
    setAttr -lock true ($shap[0]+".visibility");
    
    select -r ($mesh+"_SoftCenterPivGrp");  
    select -add  ($mesh+"_SoftModGrp");
    parent;
    }    
    
        
    for($i=0;$i<size($sel);$i++){
    float $pos[]=`xform -q -ws -t -a ($sel[$i])`;
    string $tm[];
    int $t=`tokenize ($sel[$i]) "[" $tm`;
    string $tmm=$tm[1];
    string $ttmm[];
    int $t=`tokenize ($tmm) "]" $ttmm`;
    int $pointnum=($ttmm[0]);
    int $num=$pointnum;

    select -cl;
    spaceLocator -p 0 0 0;
    rename ($mesh+"_"+$num+"_loc");
    select -r ($mesh+"_"+$num+"_loc"); 
    setAttr -type float3 ($mesh+"_"+$num+"_loc.t")  $pos[0] $pos[1] $pos[2];
		
curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($mesh+"_"+$num+"Con"+$i);
group -n ($mesh+"_"+$num+"ConGrp"+$i);
group -n  ($mesh+"_"+$num+"ConGrpA"+$i);

scale -r ($scl) ($scl) ($scl);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

select -r ($mesh+"_"+$num+"_loc"); 
select -add ($mesh+"_"+$num+"ConGrpA"+$i);
delete `parentConstraint`;
select -r ($mesh+"_"+$num+"_loc");
delete;

string $shape[]=`listRelatives -s ($mesh+"_"+$num+"Con"+$i)`;
setAttr ($shape[0]+".overrideEnabled") 1;
setAttr ($shape[0]+".overrideColor") 22;
select -r ($mesh+"_"+$num+"ConGrpA"+$i);
select -add ($mesh+"_SoftConGrp");
parent;

select -r  ($mesh+"_"+$num+"Con"+$i);
addAttr -ln "influenceRadius"  -at double  -k 1 -dv 2;

addAttr -ln "showCenterPivLoc"  -at bool  -k 1;
addAttr -ln "centerPivX"  -at double  -k 1 -dv 0;
addAttr -ln "centerPivY"  -at double  -k 1 -dv 0;
addAttr -ln "centerPivZ"  -at double  -k 1 -dv 0;

 
select -r ($objName);
$tempString=`softMod -falloffMode 1 -falloffAroundSelection 0`;

string $softMod[]=`ls -sl`;
rename ($mesh+"_"+$num+"SoftHandle"+$i);
string $softDeform[]=`listConnections ($mesh+"_"+$num+"SoftHandle"+$i+".worldMatrix[0]")`;
setAttr -type float3 ($softDeform[0]+".falloffCenter")  $pos[0] $pos[1] $pos[2];
move -a $pos[0] $pos[1] $pos[2] ($mesh+"_"+$num+"SoftHandle"+$i+".scalePivot") ($mesh+"_"+$num+"SoftHandle"+$i+".rotatePivot") ;

connectAttr -f ($mesh+"_"+$num+"Con"+$i+".translate") ($mesh+"_"+$num+"SoftHandle"+$i+".translate");
connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".rotate") ($mesh+"_"+$num+"SoftHandle"+$i+".rotate");
connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".scale") ($mesh+"_"+$num+"SoftHandle"+$i+".scale");
connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".influenceRadius") ($softDeform[0]+".falloffRadius");
select -r ($mesh+"_"+$num+"SoftHandle"+$i);
select -add ($mesh+"_SoftModGrp");
parent;
select -cl;
group -empty -n ($softDeform[0]+"pos");
select -add ($mesh+"_SoftModGrp");
parent;

select -r  ($mesh+"_"+$num+"Con"+$i);
select -add ($softDeform[0]+"pos");
pointConstraint;
shadingNode -asUtility multiplyDivide -n ($mesh+"_"+$num+"Multiply"+$i);
connectAttr -f ($mesh+"_"+$num+"Con"+$i+".translate") ($mesh+"_"+$num+"Multiply"+$i+".input1");
setAttr -type float3 ($mesh+"_"+$num+"Multiply"+$i+".input2") -1 -1 -1;
connectAttr -f ($mesh+"_"+$num+"Multiply"+$i+".output") ($mesh+"_"+$num+"ConGrp"+$i+".translate");


if($nodeType=="mesh"||$nodeType=="nurbsSurface"){
    
select -r ($mesh+"_"+$num+"ConGrpA"+$i);
string $selc[]=`ls -sl`;

string $bigManM=$mesh;
string $shape[]=`listRelatives -s $bigManM`;

string $type=`objectType  $shape[0]`;
if($type!="mesh"&&$type!="nurbsSurface")error "需要多边形或者曲面作为固定的面";

int $exsit=`objExists ($bigManM+"follicleGrp")`;

if($exsit==0){
group -em -n ($bigManM+"follicleGrp");
    select -r ($bigManM+"follicleGrp");  
    select -add  ($mesh+"_SoftModGrp");
    parent;
}

for($ii=0;$ii<size($selc);$ii++){
spaceLocator -p 0 0 0 -n ($selc[$ii]+"Loc");

group -n ($selc[$ii]+"LocGrp");

select -r ($selc[$ii]);
select -add ($selc[$ii]+"LocGrp");
delete `parentConstraint`;
select -r ($selc[$ii]+"Loc");
select -add ($selc[$ii]);
pointConstraint -mo;
string $shap[]=`listRelatives -s ($selc[$ii]+"Loc")`;
setAttr ($shap[0]+".localScaleZ") 0.01;
setAttr ($shap[0]+".localScaleX") 0.01;
setAttr ($shap[0]+".localScaleY") 0.01;

float $pos[]=`xform -q -a -ws -t ($selc[$ii]+"Loc")`;
string $type=`objectType  $shape[0]`;

////////////////////////
if($type=="mesh"){
createNode closestPointOnMesh -n ($selc[$ii]+"cpom"+$ii);
connectAttr -f ($bigManM+".outMesh") ($selc[$ii]+"cpom"+$ii+".inMesh");

setAttr ($selc[$ii]+"cpom"+$ii+".inPositionX") $pos[0] ;
setAttr ($selc[$ii]+"cpom"+$ii+".inPositionY") $pos[1] ;
setAttr ($selc[$ii]+"cpom"+$ii+".inPositionZ") $pos[2] ;
float $u=`getAttr ($selc[$ii]+"cpom"+$ii+".parameterU")`;
float $v=`getAttr ($selc[$ii]+"cpom"+$ii+".parameterV")`;

createNode follicle -n ($selc[$ii]+"follicleShape"+$ii);
select -r ($selc[$ii]+"follicleShape"+$ii);
pickWalk -d up;
rename ($selc[$ii]+"follicle"+$ii);
connectAttr -f ($bigManM+".outMesh") ($selc[$ii]+"follicleShape"+$ii+".inputMesh");
connectAttr -f ($bigManM+".worldMatrix[0]") ($selc[$ii]+"follicleShape"+$ii+".inputWorldMatrix");

connectAttr -f ($selc[$ii]+"follicleShape"+$ii+".outTranslate") ($selc[$ii] +"follicle"+$ii+".translate");
connectAttr -f ($selc[$ii]+"follicleShape"+$ii+".outRotate") ($selc[$ii]+"follicle"+$ii+".rotate");

setAttr  ($selc[$ii]+"follicleShape"+$ii+".parameterU") $u;
setAttr  ($selc[$ii]+"follicleShape"+$ii+".parameterV") $v;

select -r ($selc[$ii]+"follicle"+$ii);
select -add ($bigManM+"follicleGrp");
parent;
select -r ($selc[$ii]+"cpom"+$ii);
delete;
}
else
{
createNode closestPointOnSurface -n ($selc[$ii]+"cpom"+$ii);
string $shape[]=`listRelatives -s $bigManM`;
connectAttr -f ($shape[0]+".worldSpace") ($selc[$ii]+"cpom"+$ii+".inputSurface");

setAttr ($selc[$ii]+"cpom"+$ii+".inPositionX") $pos[0] ;
setAttr ($selc[$ii]+"cpom"+$ii+".inPositionY") $pos[1] ;
setAttr ($selc[$ii]+"cpom"+$ii+".inPositionZ") $pos[2] ;
float $u=`getAttr ($selc[$ii]+"cpom"+$ii+".parameterU")`;
float $v=`getAttr ($selc[$ii]+"cpom"+$ii+".parameterV")`;

createNode follicle -n ($selc[$ii]+"follicleShape"+$ii);
select -r ($selc[$ii]+"follicleShape"+$ii);
pickWalk -d up;
rename ($selc[$ii]+"follicle"+$ii);
connectAttr -f ($shape[0]+".local") ($selc[$ii]+"follicleShape"+$ii+".inputSurface");
connectAttr -f ($shape[0]+".worldMatrix[0]") ($selc[$ii]+"follicleShape"+$ii+".inputWorldMatrix");

connectAttr -f ($selc[$ii]+"follicleShape"+$ii+".outTranslate") ($selc[$ii] +"follicle"+$ii+".translate");
connectAttr -f ($selc[$ii]+"follicleShape"+$ii+".outRotate") ($selc[$ii]+"follicle"+$ii+".rotate");

setAttr  ($selc[$ii]+"follicleShape"+$ii+".parameterU") $u;
setAttr  ($selc[$ii]+"follicleShape"+$ii+".parameterV") $v;

select -r ($selc[$ii]+"follicle"+$ii);
select -add ($bigManM+"follicleGrp");
parent;
select -r ($selc[$ii]+"cpom"+$ii);
delete;
        }
    select -r ($selc[$ii]+"follicle"+$ii);
    select -add ($selc[$ii]+"LocGrp");
    delete `parentConstraint`;

    select -r ($selc[$ii]+"LocGrp");
    select -add ($selc[$ii]+"follicle"+$ii);
    parent;
    float $pos[]=`getAttr ($selc[$ii]+"follicle"+$ii+".translate")`;
    move $pos[0] $pos[1] $pos[2]  ($selc[$ii]+".scalePivot")  ($selc[$ii]+".rotatePivot") ;       
    }   
}    
    
    spaceLocator -p 0 0 0 -n ($mesh+"_"+$num+"PivLoc"+$i);
    select -r  ($mesh+"_"+$num+"Con"+$i);
    select -add ($mesh+"_"+$num+"PivLoc"+$i);
    delete`pointConstraint`;
    select -r  ($mesh+"SoftPivMesh"); 
    select -add ($mesh+"_"+$num+"PivLoc"+$i);
    geometryConstraint -weight 1;
    select -r ($mesh+"_"+$num+"PivLoc"+$i);
    group -n  ($mesh+"_"+$num+"PivLocGrp"+$i);  
    connectAttr -f ($mesh+"_"+$num+"PivLoc"+$i+".translate")($softDeform[0]+".falloffCenter") ;
    select -r ($mesh+"_"+$num+"PivLocGrp"+$i);  
    select -add  ($mesh+"_SoftModGrp");
    parent;
    
    spaceLocator -p 0 0 0 -n ($mesh+"_"+$num+"PivLocCon"+$i);
    group -n ($mesh+"_"+$num+"PivLocConGrpA"+$i);
    group -n ($mesh+"_"+$num+"PivLocConGrp"+$i);
    
    select -r  ($mesh+"_"+$num+"Con"+$i);
    select -add ($mesh+"_"+$num+"PivLocConGrp"+$i);
    delete`pointConstraint`;
    select -r  ($mesh+"SoftPivMesh"); 
    select -add ($mesh+"_"+$num+"PivLocConGrp"+$i);
    delete`normalConstraint -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0`;
    select -r ($mesh+"_"+$num+"PivLocCon"+$i);
    select -add ($mesh+"_"+$num+"PivLoc"+$i);
    pointConstraint;
    select -r ($mesh+"_"+$num+"PivLocConGrp"+$i);
    select -add  ($mesh+"SoftPivLoc");
    parent;
    connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".centerPivX") ($mesh+"_"+$num+"PivLocConGrpA"+$i+".tx");
    connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".centerPivY") ($mesh+"_"+$num+"PivLocConGrpA"+$i+".ty");
    connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".centerPivZ") ($mesh+"_"+$num+"PivLocConGrpA"+$i+".tz");
    connectAttr -f  ($mesh+"_"+$num+"Con"+$i+".showCenterPivLoc") ($mesh+"_"+$num+"PivLocCon"+$i+".v"); 
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".rx");
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".ry");
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".rz");
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".sx");
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".sy");
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".sz");
    setAttr -lock true ($mesh+"_"+$num+"PivLocCon"+$i+".v");  
    }
    }else{
        error "请选择多边形或者曲面模型的点元素";
    }
}
//////////////////////
//MAYA线变形权重绘制工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtWireWeightPaintWin(){

if(`window -ex gtWireWeightPaintWin`) deleteUI -window gtWireWeightPaintWin;
window -wh 420 200 -t "老船角色绑定-☆-MAYA线变形权重绘制工具" gtWireWeightPaintWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" texta1;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1764\"";
separator -style single  sep1;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;

textFieldGrp  -cw2 100 130 -l "变形模型" -tx "请载入变形模型" -ed 0 gtTextBSLW3;
button -l "载入变形模型" -c "gtBSLoadWireMesh" gtButBSC3;

setParent..;
separator -style single  sep3;

rowColumnLayout -nc 2 -cw 1 240 -cw 2 140;
text -l "选择变形曲线";

button -l "绘制线变形权重" -c "gtWireWeightPaintProc;" but3ab;

setParent..;
separator -style single  sep2;

showWindow  gtWireWeightPaintWin;
}
///////////////////////
global proc gtBSLoadWireMesh(){
string $sel[]=`ls -sl`;
int $size=size($sel);
if($size>1) error "只能选择一个模型";
textFieldGrp -e -tx ($sel[0]) gtTextBSLW3;
}
////////////////////
global proc gtWireWeightPaintProc (){
    string $sel[]=`ls -sl`;
    string $mesh=`textFieldGrp -q -text  gtTextBSLW3`;
    string $shap[]=`listRelatives -s ($sel[0])`;
    
    string $clusA[]=`listConnections -s 0 -d 1 ($shap[0]+".worldSpace[0]")`;   
    select -cl;
     string $clusterSets[];
    string $currentMembers[];
    int $num=100;
    for($i=0;$i<size($clusA);$i++){
    string $baseW[]=`listConnections -s 1 -d 0 ($clusA[$i]+".baseWire[0]")`;   

    int $ex=`objExists  ($baseW[0])`;
    if($ex==1){
    string  $clusterSetsA[]=`listConnections ($clusA[$i]+".message")`;
    $clusterSets[0]=$clusterSetsA[0];
    string $currentMembersa[]=`sets -q ($clusterSets[0])`;
    $currentMembers[0]=$currentMembersa[0];
    $num=$i;
             }
    }
		select ($mesh+".vtx[0:999999]");
		select -d $currentMembers;
		string $vex[]=`ls -sl`;
		if(size($vex)>0){
		sets -add ($clusterSets[0]) `ls -sl`;
		percent -v 0 $clusA[0] `ls -sl`;
		}
    artAttrToolScript 4 "wire";
eval ("artSetToolAndSelectAttr( \"artAttrCtx\", \"cluster."+$clusA[$num]+".weights\")");
select $mesh;
evalEcho ("artSetToolAndSelectAttr( \"artAttrCtx\", \"cluster."+$clusA[$num]+".weights\")");
}
///////////////////////////////////////////
//批量锁定/解锁物体绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtLockAndUnlockObjWin(){
   if(`window -ex gtLockAndUnlockObjWin`) deleteUI -window gtLockAndUnlockObjWin;
    window -wh 400 200 -t "老船角色绑定-☆-批量锁定/解锁物体绑定工具!" gtLockAndUnlockObjWin;
    columnLayout -adj 1 mainColumnattr;
text -l "点击下方按钮↓↓↓↓↓" texta1;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1766\"";

    formLayout  gtCOTAF;
     
    text -l "锁定或者解除节点锁定" tgtextTempB;
    checkBox -l "节点锁定"  gtLoarSkinObjB;
     radioButtonGrp  -l "方式" -nrb  2 -la2 "选择的物体" "所有子层级"  -select 1 gtlockStyle;

    button -l "编辑节点锁定"   -c "gtLockNodeProc" but4;
    
     
    formLayout -e
    
    -af tgtextTempB left 5 -af tgtextTempB top 5  -ap tgtextTempB right 0 50
    -ac gtLoarSkinObjB left 5 tgtextTempB -af gtLoarSkinObjB top 5  -af gtLoarSkinObjB right 5
    -af gtlockStyle left 5 -ac gtlockStyle top 5 tgtextTempB  -af gtlockStyle right 10
    -af but4 left 5  -ac but4 top 5 gtlockStyle -af but4 right 5 
     
    gtCOTAF;     
    showWindow gtLockAndUnlockObjWin;   
}
/////////////////////////
global proc gtLockNodeProc(){
    int $state=`checkBox -q -v gtLoarSkinObjB`;
    int $style=`radioButtonGrp -q -sl gtlockStyle`;

    string $sel[]=`ls -sl`;

for($i=0;$i<size($sel);$i++){
select -r ($sel[$i]);
lockNode  -lock $state;  
    if($style==2){   
    string $childs[]=`listRelatives -c -ad -fullPath ($sel[$i])`;
    for($ii=0;$ii<size($childs);$ii++){
        select -r ($childs[$ii]);
        lockNode  -lock $state; 
            }
       }
   }  
   select -cl;
   if($style==2&&$state==1)  print "选择的物体及其子物体都已经被锁定，不能被删除"; 
   if($style==1&&$state==1)  print "选择的物体已经被锁定，不能被删除"; 
   if($style==2&&$state==0)  print "选择的物体及其子物体都已经被解除锁定"; 
   if($style==1&&$state==0)  print "选择的物体已经被解除删除"; 
}
/////////////////////////
//绘制关节绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
//help window ;

global proc gtDrawJointsWin ()	
{	
	global int $DrawJoints_ScriptJobId=10000000;	
    if(`window -exists gtDrawJointsWin`) deleteUI gtDrawJointsWin;
    if(`windowPref -exists gtDrawJointsWin`) windowPref -r gtDrawJointsWin;
	window -t "老船角色绑定-☆-绘制关节绑定工具!" -tb 1 -tlb 1 -i 0 -wh 300 200 gtDrawJointsWin;

	columnLayout-adj 1  gtlayout;
    text -l "点击下方按钮↓↓↓↓↓";
    button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1768\"";
	
    text -l "勾选生成关节选项，自动生成关节" -h 25;
	
	rowLayout -nc 3 -columnAlign 3 "center"  -cw 1 40 -cw 2 100 -cw 3 120  ;
	text -l "";
	checkBox -l "生成关节" -v 0 -cc gtdrawJointsProc gtDrawJointsBox;
	intField -w 120 -v 10 gtCreateJointsF;
	setParent..;
	button -l "绘制关节" -bgc 0.3 0.2 0.1 -w 145 -align "center" -command "PencilCurveTool" gtCreateJointsDB;
    text -l "请点击下面按钮，关闭窗口，并清除脚本事件\n不然后续创建关节会报错" -h 45;
	button -l "点击关闭/清除事件" -bgc 0.3 0.2 0.1 -w 145 -align "center" -command "deleteUI gtDrawJointsWin;int $ee=`scriptJob -ex $DrawJoints_ScriptJobId`;	if($ee==1)scriptJob -kill $DrawJoints_ScriptJobId;" gtCreateJointsDBa;
			
    showWindow gtDrawJointsWin;
    int $ee=`scriptJob -ex $DrawJoints_ScriptJobId`;
	if($ee==1)scriptJob -kill $DrawJoints_ScriptJobId;
    gtdrawJointsProc;   
}

/////////////////////////////////
global proc gtdrawJointsProc() {		
	global int $DrawJoints_ScriptJobId;	
    int $ex=`checkBox -q -v gtDrawJointsBox`;	
	if ( $ex== 0)
	{
	    int $ee=`scriptJob -ex $DrawJoints_ScriptJobId`;
	    if($ee==1)scriptJob -kill $DrawJoints_ScriptJobId;
	} 
	else 
	{
		$DrawJoints_ScriptJobId = `scriptJob -event DagObjectCreated gtDrawJointsC`;
	}
}

//////////////////////////////////////////
global proc gtDrawJointsC () {	
	string $selectedCurves[] = `ls -sl`;
	string $shape_zero[] = `listRelatives -s $selectedCurves[0]`;
	if (size ($selectedCurves) != 0 && (`nodeType $shape_zero[0]` == "nurbsCurve"))
	{
	int $numberOfJoints = `intField -q -v gtCreateJointsF`;
	
	for($each in $selectedCurves) 
	{
		string $shape[] = `listRelatives -s $each`;	
		
		if (`nodeType $shape[0]` == "nurbsCurve")
		{				
		for ($each in $selectedCurves) 
			{				
			float $step = (1.0 / $numberOfJoints);
			float $i;
			
			for ($i=0.0; $i<=1.0 ; $i = $i + $step) 
			{
			float $pos[] = `pointOnCurve -turnOnPercentage 1 -parameter $i $each`;	
			joint -p $pos[0] $pos[1] $pos[2];
			    }
			}
		}
		string $child[] = `listRelatives -c $each`;
		select -r $child[1];
		parent -w;
		delete $each;
		}
	}
}
///////////////////////
//测试渲染彩色黑白切换动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////
global proc gtautoLights(){
string $selLights[]=`ls -sl`;
string $everyLight;
string $collect[];
string $allLights[]=eval("listRelatives -p (`ls -lights`)");
for($everyLight in $allLights){
int $count=stringArrayCount($everyLight,$selLights);
if($count>0){
setAttr ($everyLight+".v") 1;
}else{
setAttr ($everyLight+".v") 0;
int $i;
$collect[$i]=$everyLight;
$i=$i+1;
}
}
renderIntoNewWindow render;
string $finalLight;
for ($finalLight in $collect){
setAttr ($finalLight+".v") 1;
}
clear ($allLights);
clear ($collect);
clear ($selLights);
}

//////////////////////////////
global proc gtsmartMaterial(int $switch){
string $attrs[]={"color","transparency","transparencyR","transparencyG","transparencyB",
                 "ambientColor","ambientColorR","ambientColorG","ambientColorB",
                 "incandescence","incandescenceR","incandescenceG","incandescenceB",
                 "diffuse","normalCamera","translucence"};

string $shaders[]=`ls -materials`;
string $shader;
string $attr;
for($shader in $shaders){
 for($attr in $attrs){
 int $attrEx=`attributeQuery -node $shader -exists $attr`;
if($attrEx==1){
shadingConnection -e -cs $switch ($shader+"."+$attr);
        }
    }
}

renderIntoNewWindow render;

for($shader in $shaders){
 for($attr in $attrs){
 int $attrEx=`attributeQuery -node $shader -exists $attr`;
if($attrEx==1){


shadingConnection -e -cs 1 ($shader+"."+$attr);
            }
        }
    }
}
///////////////////////////////
global proc gtsmartNoMaterial(int $switch){

string $attrs[]={"color","transparency","transparencyR","transparencyG","transparencyB",
                 "ambientColor","ambientColorR","ambientColorG","ambientColorB",
                 "incandescence","incandescenceR","incandescenceG","incandescenceB",
                 "diffuse","normalCamera","translucence"};

string $shaders[]=`ls -materials`;
string $shader;
string $attr;
for($shader in $shaders){
 for($attr in $attrs){
 int $attrEx=`attributeQuery -node $shader -exists $attr`;
if($attrEx==1){
shadingConnection -e -cs $switch ($shader+"."+$attr);
        }
    }
}

renderWindowRenderRegion renderView;

for($shader in $shaders){
 for($attr in $attrs){
 int $attrEx=`attributeQuery -node $shader -exists $attr`;
if($attrEx==1){


shadingConnection -e -cs 1 ($shader+"."+$attr);
            }
        }
    }
}

///////////////////////////////
global proc gtSmartMaterialC(){

if(`window -ex gtSmartMwin`==1){deleteUI -window gtSmartMwin;}
window -t "老船角色绑定-☆-测试渲染彩色黑白切换动画工具!!!" -wh 400 300 gtSmartMwin;
columnLayout -adj 1;
text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1770\"";
text -l "使用说明：\n点击彩色贴图渲染按钮，渲染当前帧，贴图参与渲染";
text -l "点击屏蔽（无）贴图渲染按钮，渲染当前帧，贴图不参与渲染";

columnLayout -adj 1  gtmaterialF;;
separator -style "double" sep1;
rowColumnLayout -nc 3 -cw 1 200 -cw 2 5 -cw 3 200 ;

button -l "彩色贴图渲染" -bgc  0.3 0.2 0.1 -c "gtsmartMaterial 1" but1;
text -l "";
button -l "屏蔽（无）贴图渲染" -bgc 0.5 0.5 0.5  -c "gtsmartMaterial 0" but2;
setParent..;

separator -style "double" sep3;
rowColumnLayout -nc 3 -cw 1 200 -cw 2 5 -cw 3 200 ;
button -l "局部彩色贴图渲染"  -bgc  0.3 0.2 0.1 -c "gtsmartNoMaterial 1;" but3;
text -l "";

button -l "局部屏蔽（无）贴图渲染" -bgc 0.5 0.5 0.5 -c "gtsmartNoMaterial 0;" but4;
setParent..;

setParent..;
text -l "使用说明：\n选择灯光，点击使用选择的灯光渲染按钮，只有选择的灯光参与渲染 " ltext1;
columnLayout -adj 1;
separator -style "double" lsep3;
button  -l "使用选择的灯光渲染"  -bgc  0.3 0.2 0.1 -c "gtautoLights" lbut1;
separator -style "double" lsep1;
setParent..;

separator -style "double" sep4;
showWindow gtSmartMwin;
}
//////////////////
//物体发射粒子数量动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtObjectEmitWin(){
if(`window -ex  gtObjectEmitWin`)deleteUI -window  gtObjectEmitWin;
window -wh 400 300 -t "老船角色绑定-☆-物体粒子发射动画工具！" gtObjectEmitWin;
columnLayout -adj 1 ;
text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1772\"";
formLayout gtform;
text -l "使用说明\n只针对有关键帧动画的物体，并且物体必须发射粒子\n程序会在粒子物体上创建物体发射粒子数量属性\n包括：gtRate：控制整体发射数量；gtSpeed：控制发射速度\ngtRandomSpeed：控制随机发送速度；gtNormalSpeed：控制发线发射速度\ngtThreshold：控制该数值一下的运动速度完全不发射粒子" text1;
intSliderGrp -l "发射数量" -f 1 -v 100  -max 10000 -min 0 intsf;
button -l "应用" -c "gtObjectEmit" but1;
formLayout -e
-af text1 left   5 -af text1 top   10 -af  text1 right  5 
-af intsf left 5  -ac intsf top 5 text1  -af intsf right 5 
-af but1 left 5  -ac but1 top 5 intsf  -af but1 right 5
 gtform;
showWindow  gtObjectEmitWin;
}
/////////////////////////////////////////////////////
global proc gtObjectEmit(){

string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
string $c[]=`listRelatives -c ($sel[$i])`;
string $emit;
for($j=0;$j<size($c);$j++){
string $type=`nodeType $c[$j]`;
if($type=="pointEmitter")$emit=$c[$j];
}
string $part[]=`listConnections -s 0 -d 1 ($emit+".output[0]")`;
int $state=`objectExists ($part[0]+".gtRate")`;
if($state==0){
addAttr -ln "gtRate"  -at long -k 1 -dv 500 $part[0];
addAttr -ln "gtSpeed"  -at double -k 1  -dv 1 $part[0];
addAttr -ln "gtRandomSpeed"  -at double -k 1 -dv 1  $part[0];
addAttr -ln "gtNormalSpeed"  -at double -k 1 -dv 1  $part[0];
addAttr -ln "gtThreshold"  -at double -k 1 -dv 0  $part[0];
}
string $exp="";
	$exp+="float $rate=`getAttr ";
	$exp+=($part[0]);
	$exp+=".gtRate`;\n";
	$exp+="float $gts=`getAttr ";
	$exp+=($part[0]);
	$exp+=".gtThreshold`;\n";
	$exp+="float $spd=`getAttr ";
	$exp+=($part[0]);
	$exp+=".gtSpeed`;\n";
	$exp+="float $rSpd=`getAttr ";
	$exp+=($part[0]);
	$exp+=".gtRandomSpeed`;\n";
	$exp+="float $nSpd=`getAttr ";
	$exp+=($part[0]);
	$exp+=".gtNormalSpeed`;\n";

	$exp+="int $ct=`currentTime -q `;\n";
	$exp+="float $p1[]=`getAttr -t ($ct-1) ";
	$exp+=($sel[$i]);
	$exp+=".translate`;\n";
	$exp+="float $p2[]=`getAttr -t $ct ";
	$exp+=($sel[$i]);
	$exp+=".translate`;\n";
	$exp+="float $dis=mag(<<$p1[0],$p1[1],$p1[2]>>-<<$p2[0],$p2[1],$p2[2]>>);\n";
	$exp+="if($dis>$gts)setAttr ";
	$exp+=($emit);
	$exp+=".rate ($rate*$dis);\n";
	$exp+="else setAttr ";
	$exp+=($emit);
	$exp+=".rate 0;\n";
	$exp+="setAttr ";
	$exp+=($emit);
	$exp+=".speed ($spd*$dis);\n";
	$exp+="setAttr ";
	$exp+=($emit);
	$exp+=".speedRandom ($rSpd*$dis);\n";
	$exp+="setAttr ";
	$exp+=($emit);
	$exp+=".normalSpeed ($nSpd*$dis);\n";
expression  -s ($exp)  -ae 1 -uc all  -n ($sel[$i]+"exp"+$i);
    }   
    select -cl;
}
///////////////
//老船绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc gtAddThreeConProc(){
float $radius=`floatSliderGrp -q -v  gtAddConradius`;
string $sel[]=`ls -sl`;
string $childs[]=`listRelatives -c -fullPath -type "transform" ($sel[0])`;
select -r $childs;
group -n  ($sel[0]+"ChildGrp");
parent -world;
float $pivet[]=`xform -q -ws -t ($sel[0])`;

select -r ($sel[0]+".cv[0:7]") ;
scale -r -p $pivet[0] $pivet[1] $pivet[2] $radius $radius $radius;
select -r ($sel[0]);
duplicate -rr -n ($sel[0]+"ConA");
group -n ($sel[0]+"ConGrpA");
select -r ($sel[0]+"ConA.cv[0:7]") ;
scale -r -p $pivet[0] $pivet[1] $pivet[2] 0.775841 0.775841 0.775841 ;

select -r ($sel[0]);
duplicate -rr -n ($sel[0]+"ConB");
group -n ($sel[0]+"ConGrpB");
select -r ($sel[0]+"ConB.cv[0:7]") ;
scale -r -p $pivet[0] $pivet[1] $pivet[2] 0.553886 0.553886 0.553886 ;

select -r ($sel[0]+"ConGrpA");
select -add ($sel[0]);
parent;

select -r ($sel[0]+"ConGrpB");
select -add ($sel[0]+"ConA");
parent;
select -r ($sel[0]+"ChildGrp");
select -add ($sel[0]+"ConB");
parent;
string $attas[]=`listAttr -ud ($sel[0]+"ConB")`;
for($i=0;$i<size($attas);$i++){
    setAttr -l 0 ($sel[0]+"ConB."+$attas[$i]);
    deleteAttr ($sel[0]+"ConB."+$attas[$i]);
}
setAttr -lock true ($sel[0]+"ConB.sx");
setAttr -lock true ($sel[0]+"ConB.sy");
setAttr -lock true ($sel[0]+"ConB.sz");

string $attas[]=`listAttr -ud  ($sel[0]+"ConA")`;
for($i=0;$i<size($attas);$i++){
    setAttr -l 0 ($sel[0]+"ConA."+$attas[$i]);
    deleteAttr ($sel[0]+"ConA."+$attas[$i]);
    }   
setAttr -lock true ($sel[0]+"ConA.sx");
setAttr -lock true ($sel[0]+"ConA.sy");
setAttr -lock true ($sel[0]+"ConA.sz");    
select -r ($sel[0]);    
}
//uv传递工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtUVtransforWin(){
if(`window -ex gtUVtransforWin`) deleteUI  -window gtUVtransforWin;
if(`windowPref -ex gtUVtransforWin`) windowPref -r gtUVtransforWin;
window -wh 350 250 -title "老船动画吧-uv传递工具" gtUVtransforWin;

columnLayout -adj 1   mainColumnL;
text -l "老船绑定工具-老船动画吧：http://www.animate8.com/";
button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 45  -c "showHelp -a \"http://www.animate8.com/archives/1896\"";
radioButtonGrp  -cw3 100  100  100  -numberOfRadioButtons 2 -l "层级方式："  -la2 "选择的物体:" "所有子层级"  -sl 1 gtUVRad; 
radioButtonGrp  -cw3 100  100  100  -numberOfRadioButtons 2 -l "判断方式："  -la2 "顶点数量:" "当前位置"  -sl 1 gtUVcondition;  

//rowColumnLayout -nc 2 -cw 1 40 -cw 2 320 ;
//text -l "";
//checkBox -l "强制批量载入模型（使用当前位置选项勾选）" -v 0 gtUVtransformCheckLoad;
//setParent..;
rowColumnLayout -nc 2 -cw 1 240 -cw 2 100 ;

textFieldGrp -l "编辑好UV的模型：" -text "" -ed 0 -cw2  100 120 gtUVobj;
button  -l "载入模型" -c "gtUVtransforProcLoad" gtUVBut;

setParent..;
separator -style double;	
rowColumnLayout -nc 3 -cw 1 168 -cw 2 4  -cw 3 168  ;;

button  -l "等数量传递UV" -c "gtUVtransforProc" gtIntsecoundBnButA;
text -l "";
button  -l "一对N传递UV" -c "gtUVtransforProcA" gtIntsecoundBnButAA;

setParent..;
separator -style double;
text -l "可以载入全部编辑好UV的多变形模型，或者一个" -bgc 0.38 0.38 0.38 -h 50 gtVexSameNum;	
separator -style double;
showWindow gtUVtransforWin;
}
/////////////////////////////
global proc gtUVtransforProcLoad(){
    int $condition=`radioButtonGrp  -q  -sl  gtUVcondition`; 
    string $sel[]=`ls -sl`;
    string $name="";
    string $nameE="";    
    if($condition==1){      
        for($j=0;$j<size($sel);$j++){
        select -r $sel;
        select -d $sel[$j];
        int $tempvex[]=`polyEvaluate -v $sel[$j]`;
        
        string $tempSel[]=`ls -sl`;
        for($i=0;$i<size($tempSel);$i++){
        int $tempvexa[]=`polyEvaluate -v $tempSel[$i]`;
        if($tempvexa[0]==$tempvex[0])$nameE+=$tempSel[$i]+" ";
            }
        }

        string $mm[];
        if($nameE!=""){
        int $num=`tokenize $nameE " " $mm`;
        select -r $sel;
        select -d ($mm);
        text -e -bgc 0.3 0 0 -l ($nameE+":\n当前选择的这些模型顶点数量相同\n无法自动识别对应物体，请逐个传递UV数据") gtVexSameNum;       
        }else{
        select -r $sel;  
        text -e -bgc 0.1 0.2 0 -l ("所有选择的模型全部载入到输入框中") gtVexSameNum;                 
        }
        string $nam[]=`ls -sl`;
        for($i=0;$i<size($nam);$i++){
        $name+=$nam[$i]+" ";
        }

    textFieldGrp -e -tx ($name) gtUVobj; 
    if($nameE!=""){
    select -r ($mm);
    }else{
    select -r $nam;   
        }
    }else{
        string $nam[]=`ls -sl`;
        for($i=0;$i<size($nam);$i++){
        $name+=$nam[$i]+" ";
        }

    textFieldGrp -e -tx ($name) gtUVobj; 
    text -e -bgc 0.1 0.2 0 -l ("所有选择的模型全部载入到输入框中") gtVexSameNum;                    
    }
}
///////////////
global proc gtUVtransforProcAA()
{
    string $sel[]=`ls -sl -l`;
    string $unDoObj[];
    string $targetO= `textFieldGrp -q -tx  gtUVobj`;
    int $style=`radioButtonGrp  -q  -sl  gtUVRad`;  
    string $mm[];
    int $tm=`tokenize $targetO " " $mm`;
    string $targetObj[];
    for($i=0;$i<size($mm);$i++){
       $targetObj[$i]=$mm[$i]; 
    }
    if($style==2){
        select -cl;
        for($i=0;$i<size($sel);$i++){
   string $objMm[]=`listRelatives -c -ad  -type "mesh" $sel[$i]`;
         select -add   $objMm; 
        }
        string $objMesh[]=`ls -sl -type "mesh"`;
   string  $objAll[];
     for($i=0;$i<size($objMesh);$i++){
       string $temp[]=`listRelatives -p $objMesh[$i]`;
       $objAll[$i]=$temp[0]; 

    }
    select -r $objAll;
    string $objM[]=`ls -type "transform" -sl`;
    select -r $objM;
    select -d $targetObj;
    }
    
    string $objMeshT[]=`ls -sl`;
    for($i=0;$i<size($objMeshT);$i++){
   string $obj=$objMeshT[$i];
   int $objV[]=`polyEvaluate -v $obj`;
   string $oldObj="";
   for($j=0;$j<size($targetObj);$j++){
   int $objVe[]=`polyEvaluate -v $targetObj[$j]`;
   if($objV[0]==$objVe[0])
   $oldObj=$targetObj[$j]; 
   }
   if($oldObj==""){
      int $undoS=size($unDoObj);
      $unDoObj[$undoS] =$obj;
   }else{
    string $inputs[]= `listHistory  $obj`;
    int $skin=0;
    for($ii=3;$ii<size($inputs);$ii++){
        string $type=`nodeType ($inputs[$ii])`;
        if($type=="tweak")$skin=1;
    }
    if($skin==1){
     string $targetShape[]= `listRelatives -shapes $obj`;  
    string $targetOrigin = ($targetShape[1]);
    select -r $targetOrigin ;
    setAttr ($targetOrigin +".intermediateObject") 0;
    select -r  $oldObj;
    select -add $targetOrigin ;
    transferAttributes -transferPositions 0 -transferNormals 0 -transferUVs 2 -transferColors 0 -sampleSpace 5 -sourceUvSpace "map1" -targetUvSpace "map1" -searchMethod 3-flipUVs 0 -colorBorders 1 ;
    select -r $targetOrigin;
    DeleteHistory;
    setAttr ($targetOrigin +".intermediateObject") 1;
    select -d;
    }   
    if($skin==0){  
    select -r  $oldObj;
    select -add $obj ;  
    transferAttributes -transferPositions 0 -transferNormals 0 -transferUVs 2 -transferColors 0 -sampleSpace 5 -sourceUvSpace "map1" -targetUvSpace "map1" -searchMethod 3 -flipUVs 0 -colorBorders 1 ;
    select -r $obj;
    DeleteHistory;
                }
            }
        }     
    int $undoS=size($unDoObj);
    if($undoS>0){
    string $unDoO="";
   for($i=0;$i<$undoS;$i++){
       $unDoO+=$unDoObj[$i]+"、";
   }
    text -e -bgc 0.3 0 0 -l ($unDoO+":\n当前选择的模型没有对应目标模型\n请手动查找，并逐个传递UV数据") gtVexSameNum;       
    select -r $unDoObj;
    clear $unDoObj;
       }else{
    text -e -bgc 0.1 0.3 0 -l ("当前选择的模型全部完成传递UV数据操作") gtVexSameNum;       
       select -r  $objMeshT;   
       }
}
///////////////////
global proc gtUVtransforProcBB()
{
    string $sel[]=`ls -sl -l`;
    string $unDoObj[];
    string $targetO= `textFieldGrp -q -tx  gtUVobj`;
    int $style=`radioButtonGrp  -q  -sl  gtUVRad`;  
    string $mm[];
    int $tm=`tokenize $targetO " " $mm`;
    string $targetObj[];
    for($i=0;$i<size($mm);$i++){
       $targetObj[$i]=$mm[$i]; 
    }

    if($style==2){
        select -cl;
        for($i=0;$i<size($sel);$i++){
   string $objMm[]=`listRelatives -c -ad  -type "mesh" $sel[$i]`;
         select -add   $objMm; 
        }
        string $objMesh[]=`ls -sl -type "mesh"`;
   string  $objAll[];
     for($i=0;$i<size($objMesh);$i++){
       string $temp[]=`listRelatives -p $objMesh[$i]`;
       $objAll[$i]=$temp[0]; 

    }
    select -r $objAll;
    string $objM[]=`ls -type "transform" -sl`;
    select -r $objM;
    select -d $targetObj;
    }
    
   string $objMeshT[]=`ls -sl`;
   for($i=0;$i<size($objMeshT);$i++){
   string $obj=$objMeshT[$i];
   
   float $posA[]=`xform -q -ws -t ($obj+".vtx[0]")`;      
   string $oldObj="";
   float $dis=1000000;
   for($j=0;$j<size($targetObj);$j++){
   float $posB[]=`xform -q -ws -t ($targetObj[$j]+".vtx[0]")`;
   float $cdis=mag(<<$posA[0],$posA[1],$posA[2]>>-<<$posB[0],$posB[1],$posB[2]>>);
   if($cdis<$dis){
       $dis=$cdis;
       $oldObj=$targetObj[$j]; 
       }
   }

   if($oldObj==""){
      int $undoS=size($unDoObj);
      $unDoObj[$undoS] =$obj;
   }else{
    string $inputs[]= `listHistory  $obj`;
    int $skin=0;
    for($ii=3;$ii<size($inputs);$ii++){
        string $type=`nodeType ($inputs[$ii])`;
        if($type=="tweak")$skin=1;
    }
    if($skin==1){
    string $targetShape[]= `listRelatives -shapes $obj`;  
    string $targetOrigin = ($targetShape[1]);
    select -r $targetOrigin ;
    setAttr ($targetOrigin +".intermediateObject") 0;
    select -r  $oldObj;
    select -add $targetOrigin ;
    transferAttributes -transferPositions 0 -transferNormals 0 -transferUVs 2 -transferColors 0 -sampleSpace 5 -sourceUvSpace "map1" -targetUvSpace "map1" -searchMethod 3-flipUVs 0 -colorBorders 1 ;
    select -r $targetOrigin;
    DeleteHistory;
    setAttr ($targetOrigin +".intermediateObject") 1;
    select -d;
    }   
    if($skin==0){  
    select -r  $oldObj;
    select -add $obj ;  
    transferAttributes -transferPositions 0 -transferNormals 0 -transferUVs 2 -transferColors 0 -sampleSpace 5 -sourceUvSpace "map1" -targetUvSpace "map1" -searchMethod 3 -flipUVs 0 -colorBorders 1 ;
    select -r $obj;
    DeleteHistory;
                }
            }
        }  
           
    int $undoS=size($unDoObj);
    if($undoS>0){
    string $unDoO="";
   for($i=0;$i<$undoS;$i++){
       $unDoO+=$unDoObj[$i]+"、";
   }
    text -e -bgc 0.3 0 0 -l ($unDoO+":\n当前选择的模型没有对应目标模型\n请手动查找，并逐个传递UV数据") gtVexSameNum;       
    select -r $unDoObj;
    clear $unDoObj;
       }else{
    text -e -bgc 0.1 0.3 0 -l ("当前选择的模型全部完成传递UV数据操作") gtVexSameNum;       
       select -r  $objMeshT;   
    }
}
//////////////////
global proc gtUVtransforProc()
{
   int $condition=`radioButtonGrp  -q  -sl  gtUVcondition`; 
   if($condition==1)
       gtUVtransforProcAA;
   else
       gtUVtransforProcBB;   
}
/////////////////////////
global proc gtUVtransforProcA(){
   string $targetO= `textFieldGrp -q -tx  gtUVobj`;
   int $ex=`objExists $targetO`;
   if($ex==0)error "请载入一个编辑好UV的多边形物体名称";     
    int $style=`radioButtonGrp  -q  -sl  gtUVRad`;  
    string $sel[]=`ls -sl`; 
    if($style==2){
        select -cl;
        for($i=0;$i<size($sel);$i++){
         string $objMm[]=`listRelatives -c -ad  -type "mesh" $sel[$i]`;
         select -add   $objMm; 
        }
        string $objMesh[]=`ls -sl -type "mesh"`;
        string  $objAll[];
     for($i=0;$i<size($objMesh);$i++){
       string $temp[]=`listRelatives -p $objMesh[$i]`;
       $objAll[$i]=$temp[0]; 
    }
    select -r $objAll;
    string $objM[]=`ls -type "transform" -sl`;
    select -r $objM;
    select -d $targetO;  
    }
                
   string $objMeshT[]=`ls -sl`;
   int $numA=size($objMeshT);       
   string $notMatchM[];
   clear $notMatchM;
   
for($i=0;$i<size($objMeshT);$i++){
   string $obj=$objMeshT[$i];
   string $shap[]=`listRelatives -s $obj`;
   $ex=`objExists $shap[0]`;
   string $type;
   if($ex!=0)$type=`nodeType $shap[0]`;

   if($type!="mesh"){
       print ($obj+":不是多边形物体！");
   }else{  
   int $objV[]=`polyEvaluate -v $obj`;
   string $oldObj=$targetO;
   int $objVe[]=`polyEvaluate -v $oldObj`;

   if($objV[0]!=$objVe[0]){
       int $nsize=size($notMatchM);
       $notMatchM[$nsize]=$obj;
   }else{
 
    string $inputs[]= `listHistory  $obj`;
    int $skin=0;
    for($ii=0;$ii<size($inputs);$ii++){
        string $type=`nodeType ($inputs[$ii])`;
        if($type=="tweak")$skin=1;
    }
    if($skin==1){
     string $targetShape[]= `listRelatives -shapes $obj`;  
    string $targetOrigin = ($targetShape[1]);
    select -r $targetOrigin ;
    setAttr ($targetOrigin +".intermediateObject") 0;
    select -r  $oldObj;
    select -add $targetOrigin ;
    transferAttributes -transferPositions 0 -transferNormals 0 -transferUVs 2 -transferColors 0 -sampleSpace 5 -sourceUvSpace "map1" -targetUvSpace "map1" -searchMethod 3-flipUVs 0 -colorBorders 1 ;
    select -r $targetOrigin;
    DeleteHistory;
    setAttr ($targetOrigin +".intermediateObject") 1;
    select -d;
    }   
    if($skin==0){  
    select -r  $oldObj;
    select -add $obj ;  
    transferAttributes -transferPositions 0 -transferNormals 0 -transferUVs 2 -transferColors 0 -sampleSpace 5 -sourceUvSpace "map1" -targetUvSpace "map1" -searchMethod 3 -flipUVs 0 -colorBorders 1 ;
    select -r $obj;
    DeleteHistory;
        }
    }
    int $nsize=size($notMatchM);
    if($nsize==0){
        text -e -bgc 0.1 0.3 0 -l ("当前选择的模型全部完成传递UV数据操作") gtVexSameNum; 
        select -r  $objMeshT;
    }else{
        string $noeOM="";
        for($i=0;$i<$nsize;$i++)
            $noeOM+=($notMatchM[$i]+"、");
        text -e -bgc 0.1 0.3 0 -l ("当前选择的模型中："+$noeOM+"这些模型顶点不匹配，没有传递UV数据操作") gtVexSameNum; 
        select -r $notMatchM; 
            }
        }           
    }  
}
//老船绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtAdvReplaceConProcWin(){
if(`window -ex gtAdvReplaceConProcWin`) deleteUI  -window gtAdvReplaceConProcWin;
window -wh 400 200 -title "老船动画吧-曲线控制器绑定工具" gtAdvReplaceConProcWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1894\"";
rowColumnLayout -nc 3 -cw 1 100 -cw 2 100 ; 
text -l "";
checkBox -l "…球形控制器…" -v 0 gtAdvReplaceConShapeCB; 
setParent..;       
button  -l "曲线/曲面控制器转换" -c "gtAdvReplaceConProc" ;
separator -style double;	
showWindow gtAdvReplaceConProcWin;
}
/////////////////////
global proc gtAdvReplaceConProc(){    
string $sel[]=`ls -sl`;
int $shapCon=`checkBox -q -v  gtAdvReplaceConShapeCB`; 
for($i=0;$i<size($sel);$i++){
int $ex=`objExists   ($sel[$i]+".tgNew")`; 
if($ex==1){
  string $oldC[]=`listConnections -s 0 -d 1  ($sel[$i]+".t")`;
    setAttr -lock 0 ($oldC[0]+".v");
    setAttr ($oldC[0]+".v") 1;
    delete ($sel[$i]);
    rename ($oldC[0]) ($sel[$i]);
    select -r ($sel[$i]);    
}else{   
setAttr ($sel[$i]+".translateZ") 0;
setAttr ($sel[$i]+".translateY") 0;
setAttr ($sel[$i]+".translateX") 0;
setAttr ($sel[$i]+".rx") 0;
setAttr ($sel[$i]+".ry") 0;
setAttr ($sel[$i]+".rz") 0;
if($shapCon==1){
 ttgCSimbolCreate; 
 rename ($sel[$i]+"Con");  
}else{
curve -d 1 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 
-p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 
-p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 
-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -n   ($sel[$i]+"Con");
}
float $bb[]=`getAttr ($sel[$i]+".boundingBoxSize")`;
select -r ($sel[$i]+"Con");
if($shapCon==1)
scale -r ($bb[0]*0.9) ($bb[0]*0.9) ($bb[0]*0.9);
else
scale -r ($bb[0]*0.8) ($bb[0]*0.8) ($bb[0]*0.8);

makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
string $parent[]=`listRelatives -p ($sel[$i])`;
select -r ($sel[$i]+"Con");
select -add $parent[0];
parent;

select -r ($sel[$i]);
select -add ($sel[$i]+"Con");
delete`parentConstraint`;
string $shap[]=`listRelatives -s $sel[$i]`;
string $type=`nodeType $shap[0]`;
if($type=="mesh")select -r ($sel[$i]+".vtx[0:99999]") ;
else 
select -r ($sel[$i]+".cv[0:1000][0:1000]") ;
newCluster " -envelope 1";
rename ($sel[$i]+"tempCluser");

string $shap[]=`listRelatives -s ($sel[$i]+"Con")`;
select -cl;
for($j=0;$j<size($shap);$j++){
select -add ($shap[$j]+".cv[0:1000]") ;
}
newCluster " -envelope 1";
rename ($sel[$i]+"tempCluserA");

select -r ($sel[$i]+"tempCluser");
select -add ($sel[$i]+"tempCluserA");
delete`pointConstraint`;

select -r ($sel[$i]+"Con");
DeleteHistory;
delete ($sel[$i]+"tempCluser");

select -r ($sel[$i]+"Con");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
connectAttr -f ($sel[$i]+"Con.translate") ($sel[$i]+".translate");
connectAttr -f ($sel[$i]+"Con.rotate") ($sel[$i]+".rotate");
connectAttr -f ($sel[$i]+"Con.scale") ($sel[$i]+".scale");
setAttr -lock 0 ($sel[$i]+".visibility"); 
setAttr ($sel[$i]+".visibility") 0;
setAttr -lock true ($sel[$i]+".visibility"); 

string $shap[]=`listRelatives -s ($sel[$i]+"Con")`;
for($j=0;$j<size($shap);$j++){
setAttr ($shap[$j]+".overrideEnabled") 1;
setAttr ($shap[$j]+".overrideColor") 22; 
}
addAttr -ln "tgNew"  -at bool ($sel[$i]+"Con");
rename ($sel[$i]) ($sel[$i]+"Old");
rename ($sel[$i]+"Con") ($sel[$i]);
        }
    }    
}
global proc ttgCSimbolCreate(){
circle -ch 0 -o on -r 0.5 -n "gttempSimbol"  ;
select -r "gttempSimbol";
duplicate -rr;
rotate -r -os 0 90 0 ;
select -r "gttempSimbol";
duplicate -rr;
rotate -r -os 90 0 0 ;
select -r gttempSimbol gttempSimbol1  gttempSimbol2 ;
string $sel[]=`ls -sl`;
int $num=size($sel)-1;
makeIdentity -apply true -t 1 -r 1 -s 1 -n  0;
select -d $sel[$num];
if($num==0){
confirmDialog -title "makeSymbolError" - message "there are more objects needed" - button "ok";}
else{
select -hi;
string $child[]=`ls -sl`;
for($i=0;$i<size($child);$i++){
string $type=`nodeType $child[$i]`;
if(($type=="mesh")||($type=="nurbsCurve")|| ($type=="nurbsSurface")||($type=="subdiv") ||     ($type=="locator")){
parent -s -add $child[$i] $sel[$num];
}
select -cl;
}
select $sel;
select -d $sel[$num];
doDelete;
select -r $sel[$num];
    }
}
//老船角色模型检查及编辑绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtMeshCheckWin (){
	global int $abSymTable[];
	
	global string $abSbg;
	int $sbgBnsEn = false; 
	string $selBaseGeo;
	
	if (size($abSymTable) > 0){ 
		$selBaseGeo = $abSbg;
		$sbgBnsEn = true;
	}
	
	if (`window -exists gtMeshCheckWin`)deleteUI -window gtMeshCheckWin;
		window -t "老船角色绑定-☆-角色模型检查绑定工具" -w 180 -h 315 gtMeshCheckWin;
	columnLayout -adj 1 mainColumnattr;
    text -l "老船绑定工具-老船动画吧：http://www.animate8.com/";
    button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1784\"";        
	separator sep1;
	rowColumnLayout -nc 2 -cw 1 80 -cw 2 100 -vis 0 ;

	text -l "全局容差：" tolTxt;
	textField -editable true -text "0.001" tolFld;
	setParent..;
	rowColumnLayout -nc 2 -cw 1 200 -cw 2  105 ;
	radioButtonGrp -en 1  -l "方式：" -nrb  2 -la2 "选择及子物体" "全部" -cw3 45 100 55 -select 1 gtRenamMeshR;

	button -l "编辑重名模型" -command "gtModelCleanMakeUniqueNames" gtacsBn;
    setParent..;
	rowColumnLayout -nc 2 -cw 1 200 -cw 2  105 ;
	radioButtonGrp -en 1  -l "方式：" -nrb  2 -la2 "选择及子物体" "全部" -cw3 45 100 55 -select 1 gtRenamMeshShapeR;

	button -l "重命名形节点" -command "gtRenameShapestoMesh" gtacsBnf;
	setParent..;
		separator sep2b;
	rowColumnLayout -nc 3 -cw 1 150 -cw 2  5 -cw 3 150 ;

	button -l "删除物体名字空间字符：" -command "gtRemoveNameSpaces" gtacsBnb;
	text -l "";		
	button -l "删除历史中间物体" -command "gtdeleteIntermediateObjects" gtacsBnc;	

	button -l "删除ImagePlane节点" -command "gtdeleteImagePlane" gtacsBnd;
	text -l "";	
	button -l "整理3D贴图坐标" -command "gtUnParentAllPlace3dTextures" gtacsBne;	
		
	setParent..;
	
	separator sep2;
	rowColumnLayout -nc 3 -cw 1 150 -cw 2 5 -cw 3 150 ;

	button -l "检查模型左右对称" -command "clear($abSymTable);gtabSymCtl" sbgBn;
	text -l "";
	button -l "选择角色模型" -command "gtSelectAllSymCtl";

	setParent..;
	
	rowColumnLayout -nc 2 -cw 1 80 -cw 2 230 ;

	text -l "全部模型：" allGtolTxt;
	textField -editable 0 -text "" allGtsbgFld;
	
    text -l "问题模型：" gtolTxt;
	textField -editable 0 -text "" gtsbgFld;
	
	setParent..;
	separator sep3;
	rowColumnLayout -nc 4 -cw 1 85 -cw 2 25 -cw 3 80 -cw 4 120 ;
	text -l "问题模型总数：";
	textField  -en 0 gtAllolTxt;
		text -l "当前选择第：";
	textField  -en 0 gtSingleolTxt;

	setParent..;
		
	rowColumnLayout -nc 3 -cw 1 150 -cw 2 5 -cw 3 150 ;

	button -l "选择全部问题模型" -command "gtSelectSymCtl" gtcsBn;
	text -l "";
	button -l "循环选择问题模型" -command "gtSelectSingleSymCtl" csBn;
	setParent..;
		separator sep2a;
	
	columnLayout -adj 1 -vis 1 mainColumnattrA;
	
		rowColumnLayout -nc 2 -cw 1 150 -cw 2 150;
	button -label "选择中心顶点" -c "gtMeshSelectMiddleVex"  buta;
	button -label "修正中心顶点" -c "gtMeshModifyMiddleVex"   butab;
setParent..;
		rowColumnLayout -nc 3 -cw 1 100 -cw 2 100 -cw 3 100;
	button -label "删除左侧模型" -c "gtss_delHalf 0"  buta;
	button -label "删除右侧模型" -c "gtss_delHalf 1"  butbb;
	button -label "镜像合并物体" -c "gtMeshMirrorCombineModel"   butab;
setParent..;
	rowColumnLayout -nc 3 -cw 1 100 -cw 2 100 -cw 3 100;
	text -l "选择模型物体";
	button -label "左到右镜像" -c "gtMeshMirrorProc 0"  ;
	button -label "右到左镜像" -c "gtMeshMirrorProc 1"  ;
	text -l "选择左右顶点";
	button -label "左到右镜像" -c "gtMeshVextMirrorProc 0"  ;
	button -label "右到左镜像" -c "gtMeshVextMirrorProc 1"  ;	
setParent..;
////////////////////
rowColumnLayout -nc 3 -cw 1 195 -cw 2 5 -cw 3 100 -vis 0;
textFieldGrp  -cw2 100 130 -l "目标顶点:" -tx "" -ed 0 gtTextMeshVextMirroRAim;
text -l "";
button -l "载入目标顶点" -c "gtMeshMirrorLoadAimVextProc";
textFieldGrp  -cw2 100 130 -l "编辑顶点:" -tx "" -ed 0 gtTextMeshVextMirroREidt;
text -l "";
button -l "载入编辑顶点" -c "gtMeshMirrorLoadEidtVextProc";
text -l "左右按顺序载入对称顶点";
text -l "";
button -label "镜像顶点形态" -c "gtMeshMultiVextMirrorProc"  ;	
setParent..;
separator -style single  sep1b;	
showWindow gtMeshCheckWin;
}
/////////////////////////
global proc gtMeshMirrorLoadAimVextProc (){
    string $sel[]=`ls -fl -orderedSelection`;
    string $vext="";

    for($i=0;$i<size($sel);$i++){
    $vext+=$sel[$i]+" ";    
    }
textFieldGrp  -e -tx $vext gtTextMeshVextMirroRAim;
}
////////////////
global proc gtMeshMirrorLoadEidtVextProc (){
    string $sel[]=`ls -fl -orderedSelection `;
    string $vext="";
    for($i=0;$i<size($sel);$i++){
    $vext+=$sel[$i]+" ";    
    }
textFieldGrp  -e -tx $vext gtTextMeshVextMirroREidt;
}
//////////////
global proc gtMeshMultiVextMirrorProc (){
string $ssVext=`textFieldGrp  -q -tx  gtTextMeshVextMirroRAim`;
string $ddVext=`textFieldGrp  -q -tx  gtTextMeshVextMirroREidt`;

string $tempString[];
int $num=`tokenize $ssVext " "  $tempString`;
string $sVext[];
clear $sVext;
for($i=0;$i<$num;$i++){
    $sVext[$i]=$tempString[$i];
    }
//print $sVext;
string $tempString[];
int $num=`tokenize $ddVext " "  $tempString`;
string $dVext[];
clear $dVext;
for($i=0;$i<$num;$i++){
    $dVext[$i]=$tempString[$i];
    }
//print $dVext;
int $sizeA=0;
if(size($dVext)>size($sVext))
$sizeA=size($sVext);
else
$sizeA=size($dVext);

global string $gMainProgressBar;
progressBar -e -st ("镜像顶点形态：") -bp -ii 1 -min 0 -max $sizeA $gMainProgressBar;
for ($i=0;$i<$sizeA;$i++)
	{
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
	$posB=`xform -q -ws -t $sVext[$i]`;
	xform -ws -t ($posB[0]*-1) $posB[1] $posB[2] ($dVext[$i]);			
	}
progressBar -e -ep $gMainProgressBar;
}
/////////////////////
global proc gtMeshMirrorProc (int $side){
//int $side=0;
string $sel[]=`ls -sl`;

for($ii=0;$ii<size($sel);$ii++){
string $mesh=$sel[$ii];
int $vexAll[]=`polyEvaluate -v $mesh`;
    
select -r ($mesh+".vtx[0:999999]");
$vtxs=`ls -sl -fl`;

int $vexNum=size($vtxs);
string $geometry=$mesh;

select -cl;
for ($i=0;$i<size($vtxs);$i++)
	{
	$pos=`xform -q -ws -t $vtxs[$i]`;
	if($pos[0]>0.0001)
	   select -add $vtxs[$i];
	}	
string $posSideVex[]=`ls -sl -fl`;

select -cl;
for ($i=0;$i<size($vtxs);$i++)
	{
	$pos=`xform -q -ws -t $vtxs[$i]`;
	if($pos[0]<-0.0001)
	   select -add $vtxs[$i];	
	}
string $negSideVex[]=`ls -sl -fl`;	
int $negNum=size($negSideVex);
int $posNum=size($posSideVex);
if($negNum!=$posNum)error "左右顶点数量不一致，请手动检查模型";

if($negNum==$posNum){
string $sVext[];
clear $sVext;
string $dVext[];
clear $dVext;
if($side==0){
  $sVext=$posSideVex;
  $dVext=$negSideVex;  
}else{
  $dVext=$posSideVex;
  $sVext=$negSideVex;      
}

createNode -n closestSampler closestPointOnMesh;
$tempString=`listRelatives -ni -s $geometry`;
connectAttr -f ($tempString[0]+".outMesh") closestSampler.inMesh;
connectAttr -f ($geometry+".worldMatrix[0]") closestSampler.inputMatrix;
int $closestOppositeVtxNr;
global string $gMainProgressBar;

progressBar -e -st ("镜像簇权重："+$sel[$ii]) -bp -ii 1 -min 0 -max `size($sVext)` $gMainProgressBar;
for ($i=0;$i<size($sVext);$i++)
	{
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
	$posB=`xform -q -ws -t $sVext[$i]`;
	setAttr -type float3 closestSampler.inPosition ($posB[0]*-1) $posB[1] $posB[2];
	$closestOppositeVtxNr=`getAttr closestSampler.result.closestVertexIndex`;
	xform -ws -t ($posB[0]*-1) $posB[1] $posB[2] ($geometry+".vtx["+$closestOppositeVtxNr+"]");			
	}
progressBar -e -ep $gMainProgressBar;

delete closestSampler;
        }
    }
select -r $sel;    
}
///////////////////////////
global proc gtMeshVextMirrorProc (int $side){
//int $side=0;
string $sel[]=`ls -sl -fl`;

select -cl;
for ($i=0;$i<size($sel);$i++){
	$pos=`xform -q -ws -t $sel[$i]`;
	if($pos[0]>0.0001)
	   select -add $sel[$i];
	}	
string $posSideVex[]=`ls -sl -fl`;

select -cl;
for ($i=0;$i<size($sel);$i++){
	$pos=`xform -q -ws -t $sel[$i]`;
	if($pos[0]<-0.0001)
	   select -add $sel[$i];
	}	
string $negSideVex[]=`ls -sl -fl`;	

int $negNum=size($negSideVex);
int $posNum=size($posSideVex);
if($negNum!=1&&$posNum!=1)error "请左右各选择一个顶点";

if($negNum==$posNum){
string $ssVext="";
string $ddVext="";
if($side==0){
  $ssVext=$posSideVex[0];
  $ddVext=$negSideVex[0];
}else{
  $ssVext=$negSideVex[0];      
  $ddVext=$posSideVex[0];
}
	$posB=`xform -q -ws -t $ssVext`;
	xform -ws -t ($posB[0]*-1) $posB[1] $posB[2] $ddVext;			
    }
select -r $sel;       
}
////////////////////////////////////
global proc gtss_delHalf(int $axis_dig)
{    
   // int $axis_dig=1;
    string $meshSel[]=`ls -sl`;
	string $shapeNode[] = `pickWalk -d "down"`; 
	PolySelectConvert 3;
	string $selection[] = `filterExpand -sm 31`; 
	int $s = `size($selection)`;
	float $middleVertex = 0.001;
	
	for($each in $selection) {
		float $values[] = `xform -q -t -os $each`;
		float $eachVertexValue = $values[0];
		if($axis_dig==0){		
		if($eachVertexValue<=$middleVertex) 
		select -d $each;
	}else{
	   if($eachVertexValue>=$middleVertex*-1) 
		select -d $each;
        }
    }		
PolySelectConvert 1;
		doDelete;
	select -r $meshSel;		
}	
//////////////////////////////
global proc gtMeshMirrorCombineModel(){
int $as=1;
string $axis="";
if($as==1)$axis="X";
if($as==2)$axis="Y";
if($as==3)$axis="Z";

float $x=1;
float $y=1;
float $z=1;
if($as==1)$x=-1;
if($as==2)$y=-1;
if($as==3)$z=-1;

string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
 float $sc[]=`getAttr  ($sel[$i]+".s")`;
if($sc[0]<0||$sc[1]<0||$sc[2]<0)error ("当前选择物体"+$sel[$i]+"缩放数值不能是负数");
}
for($i=0;$i<size($sel);$i++){
float $sc[]=`getAttr  ($sel[$i]+".s")`;
setAttr ($sel[$i]+".scalePivot"+$axis) 0;
setAttr  ($sel[$i]+".rotatePivot"+$axis) 0 ;
select -r ($sel[$i]);
duplicate -rr;
string $o[]=`ls -sl`;
scale -r ($x*$sc[0]) ($y*$sc[1]) ($z*$sc[2]);
select -add ($sel[$i]);
polyUnite -ch 0 -mergeUVSets 1 ($o[0]) ($sel[$i]);
string $model[]=`ls -sl`;
polyMergeVertex  -d 0.01 -am 1 -ch 0 ($model[0]+".vtx[0:9999999]");
rename $model[0] ($sel[$i]);
    }
select -r ($sel);
}
////////////
 global proc gtMeshSelectMiddleVex(){
string $sel[]=`ls -sl`;
float $tollorence=`textField -q -tx tolFld`;
int $as=1;

int $index=0;
if($as==1)$index=0;
if($as==2)$index=1;
if($as==3)$index=2;

for($i=0;$i<size($sel);$i++){
select -r ($sel[$i]+".vtx[0:99999999]");
string $vex[]=`ls -sl -fl`;
select -cl;
for($j=0;$j<size($vex);$j++){
    float $posA[]=`xform -q -ws -t -a ($vex[$j])`;
    if($posA[$index]<$tollorence&&$posA[$index]>(0-$tollorence))select -add ($vex[$j]);
        }
    }
}
//////////////////////////
global proc gtMeshModifyMiddleVex(){
int $as=1;

float $x=1;
float $y=1;
float $z=1;
if($as==1)$x=0;
if($as==2)$y=0;
if($as==3)$z=0;

string $vex[]=`ls -sl -fl`;
for($j=0;$j<size($vex);$j++){
    float $posA[]=`xform -q -ws -t -a ($vex[$j])`;
    xform -ws -t ($posA[0]*$x) ($posA[1]*$y) ($posA[2]*$z) ($vex[$j]) ;
    }
}
///////////////////////////
global proc int gtabCheckSym (string $obj, int $axis, float $tol, int $bTable, int $usePiv) {
    int $badM=0;
   // string $obj=$selMesh;
    // int $axis=$axisSel;
   // int $bTable=1;    
	global int $abSymTable[];
	string $aNegVerts[];
	string $aPosVerts[];
	string $aNonSymVerts[];
	string $aStr[];
	string $vtx;
	string $str;
	int $aPosVertsInt[];
	int $aNegVertsInt[];
	int $aInt[];
	int $totVtx;
	int $i;
	int $j;
	int $mAxisInd = $axis - 1; 
	int $axis2Ind = ($mAxisInd + 1) % 3;
	int $axis3Ind = ($mAxisInd + 2) % 3;
	int $mod;
	int $prog;
	int $vertCounter = 0;
	float $aNegVertTrans[];
	float $aPosVertTrans[];
	float $aVtxTrans[];
	float $aVtx2Trans[];
	float $bBox[];
	float $mid;
	float $midOffset;
	float $posOffset;
	float $negOffset;
	float $flt;
	float $progNum;
	float $progDenom;
	float $test1;
	float $test2;
	
	if ($usePiv){
		$aVtxTrans = `xform -q -ws -t $obj`;
		$mid = $aVtxTrans[$mAxisInd];
	}else{
		//if ($bTable){
			//clear($abSymTable);
			//$bBox = `xform -q -ws -boundingBox $obj`;
			//$mid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);
		//}else{
			$mid = 0; 
	//	}
	}
		//print $mid;
	$aInt = `polyEvaluate -v $obj`; 
	$totVtx = $aInt[0];
	
	waitCursor -state on;
	progressWindow -title "工作" -progress 0 -status "检索";
	$progDenom = $totVtx;
	$flt = ceil($progDenom/50);
	$mod = $flt;

	for ($i=0;$i<$totVtx;$i++){
		

		if (($i % $mod) == 0){ 
			$progNum = $i;
			$prog = ($progNum/$progDenom)*100.0;
			progressWindow -e -progress $prog;
		}
		
		$vtx = $obj+".vtx["+$i+"]";
		$aVtxTrans = `xform -q -ws -translation $vtx`;
		$midOffset = $aVtxTrans[$mAxisInd] - $mid;
		if ($midOffset >= 0){
			$aPosVerts[size($aPosVerts)] = $vtx;
			if ($bTable){$aPosVertsInt[size($aPosVertsInt)] = $i;}
			$aVtxTrans = `xform -q -ws -t $vtx`;
			$aPosVertTrans[size($aPosVertTrans)] = $aVtxTrans[$mAxisInd];
		}else{
			if ($midOffset < 0){
				$aNegVerts[size($aNegVerts)] = $vtx;
				if ($bTable){$aNegVertsInt[size($aNegVertsInt)] = $i;}
				$aVtxTrans = `xform -q -ws -t $vtx`;
				$aNegVertTrans[size($aNegVertTrans)] = $aVtxTrans[$mAxisInd];
			}
		}
	}

	if ($bTable){$str = "检查";}else{$str = "检查对称结果";}
	progressWindow -e -progress 0 -status $str;
	$progDenom = size($aPosVerts);
	$flt = ceil($progDenom/50);
	$mod = $flt;
		
	for ($i=0;$i<size($aPosVerts);$i++){
		
		if (($i % $mod) == 0){ 
			$progNum = $i;
			$prog = ($progNum/$progDenom)*100.0;
			progressWindow -e -progress $prog;
		}
		
		$vtx = $aPosVerts[$i];
		$posOffset = ($aPosVertTrans[$i] - $mid);
		if ($posOffset < $tol){
			$aPosVerts[$i] = "m";
			$vertCounter ++;
			continue;
		}
		for ($j=0;$j<size($aNegVerts);$j++){
			if ($aNegVerts[$j] == "m"){continue;}
			$negOffset = $mid - $aNegVertTrans[$j];
			if ($negOffset < $tol){
				$aNegVerts[$j] = "m";
				$vertCounter ++;
				continue;
			}
			if (abs($posOffset - $negOffset) <= $tol){
				$aVtxTrans = `xform -q -ws -t $vtx`;
				$aVtx2Trans = `xform -q -ws -t $aNegVerts[$j]`;
				$test1 = $aVtxTrans[$axis2Ind] - $aVtx2Trans[$axis2Ind];
				$test2 = $aVtxTrans[$axis3Ind] - $aVtx2Trans[$axis3Ind];
				if (abs($test1) < $tol && abs($test2) < $tol){

					if ($bTable){
						$abSymTable[size($abSymTable)] = $aPosVertsInt[$i];
						$abSymTable[size($abSymTable)] = $aNegVertsInt[$j];
						$vertCounter += 2;
					}
					$aPosVerts[$i] = $aNegVerts[$j] = "m"; 
					break;
				}
			}
		}
	}
	$aStr = {"m"};
	$aPosVerts = stringArrayRemove($aStr, $aPosVerts);
	$aNegVerts = stringArrayRemove($aStr, $aNegVerts);
	$aNonSymVerts = stringArrayCatenate($aPosVerts, $aNegVerts);

	if ($bTable){$int = size($abSymTable) + $vertCounter;
		if ($vertCounter != $totVtx){
			$badM=1;
		}else{
			$badM=0;
		}
	}
	progressWindow -endProgress;
	waitCursor -state off;
	return  $badM;
}
////////////////////////////////
global proc gtabSymCtl (){
	global int $abSymTable[];
	global string $abSbg;
	string $sel[] = `ls -sl -fl`;
	string $aStr[];
	string $aSelVerts[];
	string $aHiliteObj[];
	string $baseObj = `textField -q -text gtsbgFld`;
	string $str;
	string $selMesh;
	float $tol = `textField -q -text tolFld`;
	int $axisSel = 1;
	int $negToPos = 1;
	int $usePiv = 0;
	int $warned = false; 
	string $badMesh[];
	for($i=0;$i<size($sel);$i++){
	$aStr = `filterExpand -sm 12 $sel[$i]`;
    if(size($aStr)==1){
    $selMesh = $aStr[0]; 
		        int $bad=0;
				int $bad=gtabCheckSym($selMesh, $axisSel, $tol, 1, $usePiv);
				$abSbg = $selMesh;
				//print $bad;
				if($bad==1){
				int $size=size($badMesh);
				$badMesh[$size]=$abSbg;
				}			
			}
		}
		//print $badMesh;
			string $text="";
			for($i=0;$i<size($badMesh);$i++){
			   $text+=$badMesh[$i]+" "; 
			}
			//print $text;
	textField -e -text $text gtsbgFld;	
	textField -e -tx (size($badMesh)) gtAllolTxt;
	
	string $text="";
			for($i=0;$i<size($sel);$i++){
			   $text+=$sel[$i]+" "; 
			}
			//print $text;
	textField -e -text $text allGtsbgFld;	
	
    select -r $badMesh;
}
///////////////////////
global proc gtSelectSymCtl (){
    string $text=`textField -q -text  gtsbgFld`;
    string $name[];	
    int $size=`tokenize $text " " $name`;
    int $ex=`objExists $name[0]`;
    if($ex==1)
    select -r $name;
    else
    print "\n没有发现问题模型";
}
///////////////////
global proc gtSelectSingleSymCtl (){

    string $text=`textField -q -text  gtsbgFld`;
    string $label=`textField -q -tx  gtAllolTxt`;

    int $gtAllNumM=$label;
    string $name[];	
    global int $gtCurrentNum;
    if($gtCurrentNum>=($gtAllNumM)){
        $gtCurrentNum=0;
    }
    int $size=`tokenize $text " " $name`;
    
    int $ex=`objExists $name[$gtCurrentNum]`;
    if($ex==1){
    select -r $name[$gtCurrentNum];
    textField -e -tx ($gtCurrentNum+"："+$name[$gtCurrentNum]) gtSingleolTxt;
      $gtCurrentNum+=1;}
    else{
    print "\n没有发现问题模型";}
}
////////////////////////
global proc gtModelCleanMakeUniqueNames ()
{
    int $objss=`radioButtonGrp -q -sl gtRenamMeshR`;
    string $sel[]=`ls -sl -fl`;
    if($objss==1){
        select -cl;
        for($i=0;$i<size($sel);$i++){
         string $childs[]=`listRelatives -c -ad -fullPath -type "mesh" $sel[$i]`;
         select -add $childs ;
         }
       pickWalk -d up;       
    }else{
    SelectAllGeometry;
    }

string $alls[]=`ls -sl`;
string $alls2[],$tempString[];
string $suffix;
int $clash;
for ($i=0;$i<size($alls);$i++)
    {
    $break=0;
    select -cl;
    for ($ii=0;$ii<size($alls);$ii++){
        int $ex=`objExists ($alls[$ii])`;
        if($ex==1)select -add ($alls[$ii]);
    }
    select -d $alls[$i];
    $alls2=`ls -sl -sn`;
    int $ex=size($alls2);
    
    if($ex>0){
    $suffix="";
    $clash=0;
    tokenize $alls[$i] "|" $tempString;
    $newName=$tempString[size($tempString)-1]+$suffix;
    for ($z=0;$z<size($alls2);$z++)
        {
        tokenize $alls2[$z] "|" $tempString;
        if ($newName==$tempString[size($tempString)-1])
            {
            for ($aa=0;$aa<9999;$aa++)
            if (!`objExists ($newName+$aa)`)
                {
                print("// 重新命名： "+$alls[$i]+" "+$alls[$i]+"1\n");                
                rename $alls[$i] ($newName+$aa);
                $break=1;
                break;         
                }
            if ($break)
                break;
            }
        if ($break)
            break;
            }
        }
    }
   // if(`size($sel)`)select -r $sel;
}

////////////////////////////
global proc gtdeleteIntermediateObjects ()
{
string $tempString[]=`ls -intermediateObjects -type mesh`;
if (size($tempString))
	delete $tempString;
	}
	
///////////////////////////////
global proc gtdeleteImagePlane ()
{
string $imagePlanes[]=`ls -type imagePlane`;
if (size($imagePlanes))
	delete $imagePlanes;
}

/////////////////////////
global proc gtUnParentAllPlace3dTextures ()
{
string $place3ds[]=`ls -type place3dTexture`;
int $ex=`objExists gtPlace3dTextureGrp`;
if($ex==0){
    select -cl;
    group -empty -n gtPlace3dTextureGrp;
}
for ($i=0;$i<size($place3ds);$i++)
{
string $tempString[]=`listRelatives -p $place3ds[$i]`;
if($tempString[0]!="gtPlace3dTextureGrp"){
    select -r $place3ds[$i] ;
    select -add gtPlace3dTextureGrp;
	parent ; 
        }
    }
}
////////////////////
global proc gtRemoveNameSpaces ()
{
string $allObj[]=`ls -type transform`;
for ($i=0;$i<size($allObj);$i++){
    string $tempString[];
    if (`gmatch $allObj[$i] "*:*"`)
        {            
        tokenize $allObj[$i] ":" $tempString;
        rename $allObj[$i] $tempString[size($tempString)-1];
        }
    }
}
////////////////////
global proc gtRenameShapestoMesh ()
{
int $objss=`radioButtonGrp -q -sl gtRenamMeshShapeR`;
    string $sel[]=`ls -sl -fl`;
    if($objss==1){
        select -cl;
        for($i=0;$i<size($sel);$i++){
         string $childs[]=`listRelatives -c -ad -fullPath -type "mesh" $sel[$i]`;
         select -add $childs ;
         }
    }else{
string $allM[]=`ls -type mesh`;
    }
string $meshes[]=`ls -type mesh -sl`;
for ($i=0;$i<size($meshes);$i++)
    if (`objExists $meshes[$i]`)
    	{
    	$tempString=`listRelatives -p $meshes[$i]`;
    	rename $meshes[$i] ($tempString[0]+"TEMPShape");
    	}
$meshes=`ls -type mesh`;
for ($i=0;$i<size($meshes);$i++)
    if (`objExists $meshes[$i]`)
    	{
	    $tempString=`listRelatives -p $meshes[$i]`;
    	rename $meshes[$i] ($tempString[0]+"Shape");
    	}
}
//////////////////
global proc gtSelectAllSymCtl (){

    string $text=`textField -q -text  allGtsbgFld`; 
    string $name[];	
  
    int $size=`tokenize $text " " $name`;
    select -r $name;   
}
//机械分段骨骼拉伸IK绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtPartStrechIksetupWin(){
if(`window -ex gtPartStrechIksetupWin`) deleteUI  -window gtPartStrechIksetupWin;
window -wh 450 210  -title "老船动画吧-☆-机械分段骨骼拉伸IK绑定工具"  gtPartStrechIksetupWin;
columnLayout -adj 1   mainColumnL;
text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1782\"";
    rowColumnLayout -nc 3 -cw 1 100 -cw 2 150 -cw 3 150;
text -l "   "  -h 24  textConName;
textField -text ""  ttgRigConName;

button -l "载入总控制器" -c  "ttgLaodConNamProc;"   loadConNamBut;
setParent..;
	floatSliderGrp -l "控制器大小："  -f 1 -v 1 -s 0.0001 -min 0.001 -max 10  gtConradius;
	separator -style double;
    rowColumnLayout -nc 4 -cw 1 30 -cw 2 160 -cw 3 40  -cw 4 250 ;
	text -l "";
	text -l "手掌模式：";
    checkBox -l "" gthandikBox;
    text -l "";

	setParent..;
	separator -style double;
    intSliderGrp -l "IK关节段数"  -f 1 -v 2 -min 1 -max 10  gtIntsegmentFNum;
    
	rowColumnLayout -nc 11  ;
	text -l "     ";
	text -l "确定需要拉伸的关节段：";
 checkBox -l "1" gtchkb1;
 checkBox -l "2" gtchkb2;
 checkBox -l "3" gtchkb3;
 checkBox -l "4" gtchkb4;
 checkBox -l "5" gtchkb5;
 checkBox -l "6" gtchkb6;
 checkBox -l "7" gtchkb7;
 checkBox -l "8" gtchkb8;
 checkBox -l "9" gtchkb9;
    setParent..;
	rowColumnLayout -nc 4 -cw 1 30 -cw 2 160 -cw 3 50  -cw 4 160 ;
	text -l "     ";
	text -l "创建FK控制：";
    checkBox -l "" -v 1 gtikNoFkBoxA;	
	button -label "创建分段拉伸IK手柄" -c "gtikhandleSegmentStrechSetup";

	setParent..;
separator -style double;	
showWindow gtPartStrechIksetupWin;
}
//////////////////////////
global proc ttgLaodConNamProc(){

string $gtCname="";
string $sel[]=`ls -sl`;
string $teststring=$sel[0];
$gtCname=$teststring;
textField  -e -text $gtCname ttgRigConName;
}
///////////////////////////
global proc  gtikhandleSegmentStrechSetup(){
    int $fk=`checkBox -q -v gtikNoFkBoxA`;
    int $segment=`intSliderGrp -q -v gtIntsegmentFNum`;
    float $scale=`floatSliderGrp -q -v gtConradius`;
    	int $ch1=`checkBox -q -v gtchkb1`;
    	int $ch2=`checkBox -q -v gtchkb2`;
    	int $ch3=`checkBox -q -v gtchkb3`;
    	int $ch4=`checkBox -q -v gtchkb4`;
    	int $ch5=`checkBox -q -v gtchkb5`;
    	int $ch6=`checkBox -q -v gtchkb6`;
    	int $ch7=`checkBox -q -v gtchkb7`;
    	int $ch8=`checkBox -q -v gtchkb8`;
    	int $ch9=`checkBox -q -v gtchkb9`;
    int $handFoot=`checkBox -q -v gthandikBox`;

$ikfk=1;
string $sel[]=`ls -sl`;

for($ii=0;$ii<size($sel);$ii++){
    
string $basebn=$sel[$ii];

string $gttextm[];
int $gttextnum=`tokenize ($basebn) "_" $gttextm`;
string $gtside=($gttextm[1]);


float $rx=`getAttr ($basebn+".rx")`;
if($rx!=0)error "选择的关节旋转数值必须为：0";
float $ry=`getAttr ($basebn+".ry")`;
if($ry!=0)error "选择的关节旋转数值必须为：0";
float $rz=`getAttr ($basebn+".rz")`;
if($rz!=0)error "选择的关节旋转数值必须为：0";

string $childs[]=`listRelatives -c -ad ($basebn)`;
int $size=size($childs);
if($segment>$size){
    $segement=$size;
}
if($segment==$size&&$segment>1){
    select -r ($childs[1]);
    select -add ($childs[0]);
    delete `orientConstraint`;
    select -r ($childs[0]);
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
}
if($segment==$size&&$segment==1){
    select -r ($basebn);
    select -add ($childs[0]);
    delete `orientConstraint`;
    select -r ($childs[0]);
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
}

select -r $basebn;

if($ikfk==1){

    if($fk==1){
 select -r  $basebn;
   duplicate -rr;
   rename ($basebn+"legIkBnA");
setAttr ($basebn+"legIkBnA.radius") 0.01;
    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"legIkBn"+$i);
setAttr ($basebn+"legIkBn"+$i+".radius") 0.01;

}

if($segment<($size)){
    select -r ($basebn+"legIkBnA");
    for($i=1;$i<($segment+2);$i++){
     pickWalk -d down;
    }
    rename ($basebn+"endIkbn");
    string $deletBn[]=`listRelatives -c ($basebn+"endIkbn")`;
    for($jjj=0;$jjj<size($deletBn);$jjj++){
        select -r ($basebn+"endIkbn");
        pickWalk -d down;
        delete;
    }
}

 select -r  $basebn;
duplicate -rr;
   rename ($basebn+"legFkBnA");
setAttr ($basebn+"legFkBnA.radius") 0.01;

    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"legFkBn"+$i);
setAttr ($basebn+"legFkBn"+$i+".radius") 0.01;
}

if($segment<$size){
    select -r ($basebn+"legFkBnA");
    for($i=1;$i<($segment+2);$i++){
     pickWalk -d down;
    }
    rename ($basebn+"endFkbn");
    string $deletBn[]=`listRelatives -c ($basebn+"endFkbn")`;
    for($jjj=0;$jjj<size($deletBn);$jjj++){
        select -r ($basebn+"endFkbn");
        pickWalk -d down;
        delete;
    }
}

 select -r  $basebn;
   rename ($basebn+"BnA");

    for($i=1;$i<($segment+1);$i++){
 pickWalk -d down;
rename ($basebn+"Bn"+$i);
}

select -r ($basebn+"legFkBnA");
select -add ($basebn+"legIkBnA");
select -add ($basebn+"BnA");
string $upconstraintp[]=`parentConstraint`;

 for($i=1;$i<($segment+1);$i++){
select -r ($basebn+"legFkBn"+$i);
select -add ($basebn+"legIkBn"+$i);
select -add ($basebn+"Bn"+$i);
string $constraintp[]=`parentConstraint`;
}

shadingNode -asUtility blendColors -n ($basebn+"scaleColorBlend");
connectAttr -f ($basebn+"legIkBnA.scale") ($basebn+"scaleColorBlend.color2");
connectAttr -f ($basebn+"legFkBnA.scale") ($basebn+"scaleColorBlend.color1");
connectAttr -f ($basebn+"scaleColorBlend.outputR")  ($basebn+"BnA.scaleX");

 for($i=1;$i<($segment);$i++){
shadingNode -asUtility blendColors -n ($basebn+"scaleColorBlend"+$i);
connectAttr -f ($basebn+"legIkBn"+$i+".scale") ($basebn+"scaleColorBlend"+$i+".color2");
connectAttr -f ($basebn+"legFkBn"+$i+".scale") ($basebn+"scaleColorBlend"+$i+".color1");
connectAttr -f ($basebn+"scaleColorBlend"+$i+".outputR")  ($basebn+"Bn"+$i+".scaleX");
}


////////////////////////// 
select -r ($basebn+"legFkBnA"); 
 for($i=1;$i<($segment+1);$i++){
select -add ($basebn+"legFkBn"+$i);
}


 string $fksel[]=`ls -sl`;
for($i=0;$i<size($fksel);$i++){
    circle -ch 0 -o on -nr 1 0 0 -r ($scale*0.5)  -n ($fksel[$i]+"Con");
    group -n ($fksel[$i]+"ConGrpB");
    group -n ($fksel[$i]+"ConGrp");
    group -n ($fksel[$i]+"ConGrpA");
    select -r ($fksel[$i]);
    select -add ($fksel[$i]+"ConGrpA");
    delete `parentConstraint`;
    select -r ($fksel[$i]+"Con");
    select -add ($fksel[$i]);
    parentConstraint;
 //   scaleConstraint;
    setAttr -lock true ($fksel[$i]+"Con.tx");
    setAttr -lock true ($fksel[$i]+"Con.ty");
    setAttr -lock true ($fksel[$i]+"Con.tz");  
    setAttr -lock true ($fksel[$i]+"Con.sx");
    setAttr -lock true ($fksel[$i]+"Con.sy");
    setAttr -lock true ($fksel[$i]+"Con.sz"); 
    
    string $shape[]=`listRelatives -s ($fksel[$i]+"Con")`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
}else{
    setAttr ($shape[0]+".overrideColor") 6;
    }   
     
}

select -r ($basebn+"legFkBn1ConGrpA");
select -add ($basebn+"legFkBnACon");
parent;


 for($i=1;$i<($segment);$i++){
int $j=$i+1;
    select -r ($basebn+"legFkBn"+$j+"ConGrpA");
select -add ($basebn+"legFkBn"+$i+"Con");
parent;
}

/////////////////
int $fknumbn=size($fksel);
select -r ($fksel[($fknumbn-1)]+"Con");
addAttr -ln "rotx"  -at double -k 1 ;
addAttr -ln "roty"  -at double -k 1 ;
addAttr -ln "rotz"  -at double -k 1 ;
addAttr -ln "showCon"  -at bool -k 1 ;
   

for($i=0;$i<($fknumbn);$i++){
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.rotx") ($fksel[$i]+"ConGrp.rotateX");
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.roty") ($fksel[$i]+"ConGrp.rotateY");
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.rotz") ($fksel[$i]+"ConGrp.rotateZ");    
}

for($i=0;$i<($fknumbn-1);$i++){
     string $shap[]=`listRelatives -s ($fksel[$i]+"Con")`;
    connectAttr -f ($fksel[(size($fksel)-1)]+"Con.showCon") ($shap[0]+".v");    
}

//////////////////////////////////////

select -r ($basebn+"Bn"+$segment);

circle -ch 0 -o on -nr 1 0 0 -r ($scale*0.5)  -n ($basebn+"IKFK");
    group -n ($basebn+"IKFKGrp");
    select -r ($basebn+"Bn"+$segment);
    select -add ($basebn+"IKFKGrp");
    parentConstraint;
    
    setAttr -lock true($basebn+"IKFK.tx");
    setAttr -lock true ($basebn+"IKFK.ty");
    setAttr -lock true ($basebn+"IKFK.tz");  
    setAttr -lock true ($basebn+"IKFK.sx");
    setAttr -lock true ($basebn+"IKFK.sy");
    setAttr -lock true ($basebn+"IKFK.sz");

    setAttr -lock true ($basebn+"IKFK.rx");
    setAttr -lock true ($basebn+"IKFK.ry");
    setAttr -lock true ($basebn+"IKFK.rz"); 
        setAttr -lock true ($basebn+"IKFK.v"); 
        
select -r ($basebn+"IKFK.cv[1]");
select -tgl ($basebn+"IKFK.cv[3]");
select -tgl ($basebn+"IKFK.cv[5]");
select -tgl ($basebn+"IKFK.cv[7]");

scale -r  0.2 0.2 0.2 ;       

       
select -r ($basebn+"IKFK.cv[0:7]") ;
string $gttextm[];
int $gttextnum=`tokenize ($basebn) "_" $gttextm`;
string $gtside=($gttextm[1]);
if($gtside=="r"){
move -r -ls -wd 0 (0-$scale*1.5) 0 ;
}else{
move -r -ls -wd 0 ($scale*1.5) 0 ; 
}

setAttr ($basebn+"IKFK.overrideEnabled") 1;
setAttr ($basebn+"IKFK.overrideColor") 6;

/////////////
string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
select -r ($conN);
select -add ($basebn+"IKFKGrp");
scaleConstraint;
}
////////////////

  select -r ($basebn+"IKFK");
addAttr -ln "ikfk"  -at double  -min 0 -max 10 -dv 10 -k 1;
shadingNode -asUtility setRange -n  ($basebn+"ikfksetrange");
connectAttr -f ($basebn+"IKFK.ikfk") ($basebn+"ikfksetrange.valueX");
setAttr ($basebn+"ikfksetrange.maxX") 1;
setAttr ($basebn+"ikfksetrange.oldMaxX") 10;
shadingNode -asUtility reverse -n ($basebn+"ikfkreverse");

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($basebn+"ikfkreverse.inputX");

connectAttr -f ($basebn+"ikfkreverse.outputX") ($basebn+"scaleColorBlend.blender");
 for($i=1;$i<($segment);$i++){
connectAttr -f ($basebn+"ikfkreverse.outputX") ($basebn+"scaleColorBlend"+$i+".blender");
}

connectAttr -f ($basebn+"ikfksetrange.outValueX") ($upconstraintp[0]+"."+$basebn+"legIkBnAW1");
connectAttr -f ($basebn+"ikfkreverse.outputX") ($upconstraintp[0]+"."+$basebn+"legFkBnAW0");

 for($i=1;$i<($segment+1);$i++){
    string $constraintpC[]=`listConnections -s 0 -d 1 ($basebn+"legIkBn"+$i+".scale")`;
connectAttr -f ($basebn+"ikfksetrange.outValueX") ($constraintpC[0]+"."+$basebn+"legIkBn"+$i+"W1");
connectAttr -f ($basebn+"ikfkreverse.outputX") ($constraintpC[0]+"."+$basebn+"legFkBn"+$i+"W0");
    }
}else{
    select -r  $basebn;
    rename ($basebn+"legIkBnA");
    for($i=1;$i<($segment+1);$i++){
    pickWalk -d down;
    rename ($basebn+"legIkBn"+$i);
        }    
    }

select -r ($basebn+"legIkBnA");
}

 string $iksel[]=`ls -sl`;
    $basebn=$iksel[0];
  
    select -r ($basebn);
    pickWalk -d down;
    if($segment>2){
        pickWalk -d down;
    }
    string $elbowbn[]=`ls -sl`;
    
     select -r ($basebn);
    pickWalk -d down;
    for($i=1;$i<$segment;$i++){
            pickWalk -d down;
    }
    string $end[]=`ls -sl`;
    string $endbn=$end[0];


select -r ($basebn+".rotatePivot") ;
select -add ($endbn+".rotatePivot") ;

 ikHandle -sol ikRPsolver; 

string $ikhandle[]=`ls -sl`;
select -r ($ikhandle[0]);
rename ($sel[$ii]+"ikhandle");

string $endEffector[]=`listConnections -s 1 -d 0 ($sel[$ii]+"ikhandle.endEffector")`;
setAttr ($endEffector[0]+".visibility") 0;
setAttr -lock true ($endEffector[0]+".v");

setAttr ($basebn+".rx") 0 ;
setAttr ($basebn+".ry") 0 ;
setAttr ($basebn+".rz") 0 ;
///////////////////////
curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($sel[$ii]+"polerCon");

group -n ($sel[$ii]+"polerConGrp");
group -n ($sel[$ii]+"polerConGrpB");
group -n ($sel[$ii]+"polerConGrpA");
scale -r ($scale*0.5) ($scale*0.5) ($scale*0.5);
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

select -r ($elbowbn[0]);

select -add ($sel[$ii]+"polerConGrpA");
delete `parentConstraint`;

float $dis=`getAttr ($elbowbn[0]+".tx")`;
///////////////////
spaceLocator -p 0 0 0 -n ($elbowbn[0]+"locTemp");
select -r ($basebn) ;
select -add ($endbn) ;
select -add ($elbowbn[0]+"locTemp");
delete `pointConstraint`;


select -r ($elbowbn[0]);
pickWalk -d down;
select -add ($sel[$ii]+"polerConGrpA");
delete`aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 -1 0 -worldUpType "object" 
-worldUpObject  ($elbowbn[0]+"locTemp")`;

delete ($elbowbn[0]+"locTemp");
setAttr  ($sel[$ii]+"polerConGrp.ty") ($segment*(abs($dis))/2);

spaceLocator -p 0 0 0 -n ($elbowbn[0]+"PolerFollowLoc");
group -n ($elbowbn[0]+"PolerFollowLocGrp");

select -r ($basebn);
select -add ($elbowbn[0]+"PolerFollowLocGrp");
delete`parentConstraint`;
string $bnP[]=`listRelatives -p ($basebn)`;
if(size($bnP)>0){
    select -r ($elbowbn[0]+"PolerFollowLocGrp");
    select -add ($bnP[0]);
    parent;
}else if($fk==1){
  select -r ($elbowbn[0]+"PolerFollowLocGrp");
    select -add ($sel[$ii]+"legFkBnAConGrpA") ;
    parent;     
}


setAttr ($elbowbn[0]+"PolerFollowLoc.v") 0;
setAttr -lock true ($elbowbn[0]+"PolerFollowLoc.v");

spaceLocator -p 0 0 0 -n ($elbowbn[0]+"PolerFixLoc");
group -n ($elbowbn[0]+"PolerFixLocGrp");

select -r ($sel[$ii]+"polerCon");
select -add ($elbowbn[0]+"PolerFixLocGrp");
delete`parentConstraint`;

setAttr ($elbowbn[0]+"PolerFixLoc.v") 0;
setAttr -lock true ($elbowbn[0]+"PolerFixLoc.v");

select -r ($elbowbn[0]+"PolerFixLoc");
select -add ($elbowbn[0]+"PolerFollowLoc");
select -add  ($sel[$ii]+"polerConGrpB");
string $polerCons[]=`parentConstraint -mo`;
select -add  ($sel[$ii]+"polerCon");
addAttr -ln "follow"  -at double  -min 0 -max 10 -dv 0 -k 1;
shadingNode -asUtility setRange -n ($elbowbn[0]+"PolerFollowSetRange");
connectAttr -f ($sel[$ii]+"polerCon.follow") ($elbowbn[0]+"PolerFollowSetRange.valueX");
setAttr ($elbowbn[0]+"PolerFollowSetRange.maxX") 1;
setAttr ($elbowbn[0]+"PolerFollowSetRange.oldMaxX") 10;
shadingNode -asUtility reverse -n ($elbowbn[0]+"PolerFollowReverse");
connectAttr -f ($elbowbn[0]+"PolerFollowSetRange.outValueX") ($elbowbn[0]+"PolerFollowReverse.inputX");
connectAttr -f ($elbowbn[0]+"PolerFollowSetRange.outValueX") ($polerCons[0]+"."+$elbowbn[0]+"PolerFollowLocW1");
connectAttr -f ($elbowbn[0]+"PolerFollowReverse.outputX") ($polerCons[0]+"."+$elbowbn[0]+"PolerFixLocW0");


curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 
-p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p 
-0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 
-0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 
-k 15 -n ($sel[$ii]+"Con");

group -n ($sel[$ii]+"ConGrp");
group -n ($sel[$ii]+"ConGrpA");

string $gttextm[];
int $gttextnum=`tokenize ($basebn) "_" $gttextm`;
string $gtside=($gttextm[1]);
if($gtside=="r"){
select -r ($sel[$ii]+"ConGrpA");
scale -r (0-$scale) (0-$scale) (0-$scale);
setAttr ($sel[$ii]+"ConGrpA.rx") 180;
setAttr ($sel[$ii]+"polerConGrp.sz") -1 ;
}else{
select -r ($sel[$ii]+"ConGrpA");
scale -r ($scale) ($scale) ($scale);      
}

select -r ($sel[$ii]+"ikhandle");
select -add ($sel[$ii]+"ConGrpA");
delete `pointConstraint`;

if($handFoot==1){
  select -r ($endbn); 
  select -add ($sel[$ii]+"ConGrpA");
delete `parentConstraint`; 
}


spaceLocator -p 0 0 0 -n ($sel[$ii]+"legIkBn"+$segment+"rotLoc");
group -n ($sel[$ii]+"legIkBn"+$segment+"rotLocGrp");

select -r ($sel[$ii]+"legIkBn"+$segment);
select -add ($sel[$ii]+"legIkBn"+$segment+"rotLocGrp");
delete `parentConstraint`;

select -r ($sel[$ii]+"legIkBn"+$segment+"rotLocGrp");
select -add ($sel[$ii]+"Con");
parent;

select -r ($sel[$ii]+"legIkBn"+$segment+"rotLoc");
select -add ($sel[$ii]+"legIkBn"+$segment);
orientConstraint;

setAttr ($sel[$ii]+"legIkBn"+$segment+"rotLoc.visibility") 0;
setAttr -lock true ($sel[$ii]+"legIkBn"+$segment+"rotLoc.v");
//////////////////


select -r ($sel[$ii]+"polerCon");
select -add ($sel[$ii]+"ikhandle");
poleVectorConstraint -weight 1;

select -r ($sel[$ii]+"ikhandle");
select -add ($sel[$ii]+"Con");
parent;


select -r ($sel[$ii]+"polerCon");
select -add ($sel[$ii]+"Con");
string $iksel[]=`ls -sl`;
for($i=0;$i<size($iksel);$i++){
    string $shape[]=`listRelatives -s ($iksel[$i])`;
 setAttr ($shape[0]+".overrideEnabled") 1;
 if($gtside=="r"){
setAttr ($shape[0]+".overrideColor") 13;
}else if($gtside=="l"){
setAttr ($shape[0]+".overrideColor") 22;
     }else{
        setAttr ($shape[0]+".overrideColor") 6; 
     }
}

select -r ($elbowbn[0]+"PolerFollowLoc");
duplicate -rr;
rename ($elbowbn[0]+"PolerFollowLocUp");
select -r ($sel[$ii]+"Con");
setAttr ($elbowbn[0]+"PolerFollowLocUp.ty") 0.5;
select -add ($elbowbn[0]+"PolerFollowLoc");
int $aimX=1;
 if($gtside=="r")$aimX=-1;

aimConstraint -mo -weight 1 -aimVector $aimX 0 0 -upVector 0 1 0 -worldUpType "object" -worldUpObject ($elbowbn[0]+"PolerFollowLocUp");

select -r ($sel[$ii]+"Con");
addAttr -ln "strech"  -at double  -min 1 -max 20 -dv 10 -k 1;
addAttr -ln "shortLimit"  -at double  -min .1 -max 5 -dv 1.0 -k 1;

distanceDimension -sp 0 0 0 -ep 0 1 0 ;
string $disnam[]=`ls -sl`;
select -r $disnam[0];
pickWalk -d up;
rename ($basebn+"upDisLoc");
select -r  $disnam[1];
rename  ($basebn+"legDis");
string $disShape[]=`listRelatives -s  ($basebn+"legDis")`;
string $loc[]=`listConnections -s 1 -d 0  ($disShape[0]+".startPoint")`;
rename ($loc[0])  ($basebn+"downDisLoc");

select -r ($basebn);
select -add ($basebn+"upDisLoc");
pointConstraint;

select -r ($sel[$ii]+"ikhandle");
select -add ($basebn+"downDisLoc");
pointConstraint;

setAttr ($sel[$ii]+"ikhandle.visibility") 0;
setAttr -lock true ($sel[$ii]+"ikhandle.v");

float $p1[]=`joint -q -p  ($basebn)`;
select -r ($basebn);
pickWalk -d down;
string $bn2[]=`ls -sl`;
float $p2[]=`joint -q -p  ($bn2[0])`;
float $p3[]=`joint -q -p  ($endbn)`;

/////////////////////////////////////////////////////////
if($segment>1){
string $selectbn="curve -d 1 -p  ";
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" -p "+($p2[0])+" "+$p2[1]+" "+$p2[2]+" -p ");
    select -r ($basebn);
    pickWalk -d down;
    pickWalk -d down;
    string $tempsel[]=`ls -sl`;
    string $curentjoint=$tempsel[0];
    
while($curentjoint != $endbn){
   float $p1[]=`joint -q -p  ($curentjoint)`;
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" -p ");
    pickWalk -d down;
    string $joint[]=`ls -sl`;
    $curentjoint=$joint[0];
}

   float $p1[]=`joint -q -p  ($endbn)`;
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" ;");
eval $selectbn;
}else{
  
string $selectbn="curve -d 1 -p  ";
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" -p "+($p2[0])+" "+$p2[1]+" "+$p2[2]+" -p ");

   float $p1[]=`joint -q -p  ($endbn)`;
    $selectbn+=(($p1[0])+" "+$p1[1]+" "+$p1[2]+" ;");
eval $selectbn;  
    
}

rename ($basebn+"lencurve");
arclen -ch 1;
string $curve[]=`ls -sl`;

string $shapeAA[]=`listRelatives -s ($curve[0])`;
string $infoA[]=`listConnections -s 0 -d 1 ($shapeAA[0]+".worldSpace[0]")`;
float $legUplen=`getAttr ($infoA[0]+".arcLength")`;

float $length=`getAttr ($disShape[0]+".distance")`;

delete ($basebn+"lencurve");

shadingNode -asUtility multiplyDivide -n ($basebn+"disMulF") ;
string $conN=`textField -q -tx ttgRigConName`;
int $exsitcon=`objExists ($conN)`;
if($exsitcon==1){
    connectAttr -f ($conN+".sy") ($basebn+"disMulF.input1X");
}else{
setAttr ($basebn+"disMulF.input1X") 1;}

setAttr ($basebn+"disMulF.input2X") $legUplen;

shadingNode -asUtility plusMinusAverage -n ($basebn+"plusMA");
setAttr ($basebn+"plusMA.operation") 2;

connectAttr -f ($disShape[0]+".distance")  ($basebn+"plusMA.input1D[0]");

shadingNode -asUtility plusMinusAverage -n ($basebn+"plusMAA");
setAttr ($basebn+"plusMAA.operation") 2;
connectAttr -force ($basebn+"disMulF.outputX") ($basebn+"plusMAA.input1D[0]");

shadingNode -asUtility multiplyDivide -n ($basebn+"disMulA") ;
shadingNode -asUtility condition -n ($basebn+"disCnd") ;
connectAttr -f ($basebn+"plusMA.output1D") ($basebn+"disMulA.input1X");

connectAttr -f ($basebn+"plusMAA.output1D") ($basebn+"disMulA.input2X");

setAttr ($basebn+"disMulA.operation") 2;

connectAttr -f ($basebn+"disMulA.outputX") ($basebn+"disCnd.firstTerm");
connectAttr -f ($basebn+"disMulA.outputX") ($basebn+"disCnd.colorIfTrueR");

connectAttr -f ($sel[$ii]+"Con.shortLimit")  ($basebn+"disCnd.secondTerm");
connectAttr -f ($sel[$ii]+"Con.shortLimit")  ($basebn+"disCnd.colorIfFalseR");

setAttr ($basebn+"disCnd.operation") 2;

shadingNode -asUtility condition -n ($basebn+"disclampCnd") ;
connectAttr -f ($basebn+"disCnd.outColorR")  ($basebn+"disclampCnd.firstTerm");
connectAttr -f ($basebn+"disCnd.outColorR")  ($basebn+"disclampCnd.colorIfTrueR");

setAttr ($basebn+"disclampCnd.operation") 4;

connectAttr -f ($sel[$ii]+"Con.strech")  ($basebn+"disclampCnd.secondTerm");
connectAttr -f ($sel[$ii]+"Con.strech")  ($basebn+"disclampCnd.colorIfFalseR");

select -r ($basebn);
for($i=1;$i<($segment);$i++){
select -add ($sel[$ii]+"legIkBn"+$i);
}
///////////////////
string $ikbn[]=`ls -sl`;

for($i=0;$i<size($ikbn);$i++){
    int $j=$i+1;
    string $chechb="gtchkb"+($i+1);
    int $strech=`checkBox -q -v $chechb`;
    if($strech==0){
       select -r $ikbn[$i];
      pickWalk -d down;
      string $enbn[]=`ls -sl`;
      float $segdis=`getAttr ($enbn[0]+".tx")`; 
      float $segdisa=abs($segdis);
      select -r $ikbn[$i];      
      addAttr -ln "length"  -at double -dv $segdisa;
      
      shadingNode -asUtility multiplyDivide -n ($ikbn[$i]+"disMulAB") ;

      connectAttr -force ($ikbn[$i]+".length") ($ikbn[$i]+"disMulAB.input2X");
      if($exsitcon==1){
        connectAttr -f ($conN+".sy") ($ikbn[$i]+"disMulAB.input1X");
      }else{
     setAttr ($ikbn[$i]+"disMulAB.input1X") 1;}      
     connectAttr -force   ($ikbn[$i]+"disMulAB.outputX") ($basebn+"plusMA.input1D["+$j+"]");
     connectAttr -force   ($ikbn[$i]+"disMulAB.outputX") ($basebn+"plusMAA.input1D["+$j+"]");
    }       
    if($strech==1){         
    connectAttr -f ($basebn+"disclampCnd.outColorR") ($ikbn[$i]+".scaleX");     
    }    
}
select -r ($basebn+"upDisLoc");
select -add ($basebn+"downDisLoc");
select -add ($basebn+"legDis");
group -n  ($basebn+"DisLocGrp");
setAttr($basebn+"DisLocGrp.visibility") 0;
setAttr -lock true ($basebn+"DisLocGrp.v");

if($ikfk==1&&$fk==1){
select -r ($sel[0]+"IKFK") ;
shadingNode -asUtility condition -n ($sel[$ii]+"IKFKshowIkCondition");
connectAttr -f ($sel[$ii]+"IKFK.ikfk") ($sel[$ii]+"IKFKshowIkCondition.firstTerm");
shadingNode -asUtility condition -n ($sel[$ii]+"IKFKshowFkCondition");
connectAttr -f ($sel[$ii]+"IKFK.ikfk") ($sel[$ii]+"IKFKshowFkCondition.firstTerm");
setAttr ($sel[$ii]+"IKFKshowFkCondition.secondTerm") 10;

connectAttr -f ($sel[$ii]+"IKFKshowFkCondition.outColorR") ($sel[$ii]+"legFkBnACon.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"polerConGrpA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"ConGrpA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowFkCondition.outColorR") ($sel[$ii]+"legFkBnA.visibility");
connectAttr -f ($sel[$ii]+"IKFKshowIkCondition.outColorR") ($sel[$ii]+"legIkBnA.visibility");
}

select -r ($sel[$ii]+"Con") ;
select -tgl ($sel[$ii]+"polerCon") ;
string $conik[]=`ls -sl`;
for($i=0;$i<size($conik);$i++){
    setAttr -lock true ( $conik[$i]+".sx");
 setAttr -lock true ( $conik[$i]+".sy");
 setAttr -lock true ( $conik[$i]+".sz");}
 setAttr -lock true ($sel[$ii]+"polerCon.rx");
 setAttr -lock true ($sel[$ii]+"polerCon.ry");
 setAttr -lock true ($sel[$ii]+"polerCon.rz");

select -r ($sel[$ii]+"ConGrpA");
select -add ($sel[$ii]+"polerConGrpA") ;
select -add ($elbowbn[0]+"PolerFixLocGrp");
group -n  ($sel[$ii]+"ikConGrp");

select -r ($sel[$ii]+"legIkBnADisLocGrp") ;
if($fk==1)select -add ($sel[$ii]+"IKFKGrp") ;
group -n  ($sel[$ii]+"DonotmoveConGrp");
}
print "......................IK CON DONW...........................";
}
////////////////////
//老船绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
///////////////////////////////////////
global proc ttgRigADVToolsProcWin(){
if(`window -ex ttgRigADVToolsProcWin`) deleteUI -window ttgRigADVToolsProcWin;
window -wh 420 300 -t "老船角色绑定-☆-肢体跟随绑定工具" ttgRigADVToolsProcWin;
scrollLayout gtmainBSL;

columnLayout -adj 1 -w 380 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com/archives/1150\"";
separator -style single  sep1;
rowColumnLayout -nc 3 -cw 1 188 -cw 2 4 -cw 3 188 ;;
button -l "ADV曲线控制器替换工具" -c "gtAdvReplaceConProcWin;" ;
text -l "";
button -l "ADV手掌控制器轴向工具" -c "gtAdvHandOrientProcWin;" ;
setParent..;
floatSliderGrp -l "上眼皮瞪眼：" -s 0.001 -f 1 -v 0.4 -min 0 -max 1  gtadvEyeUpLidFloat;
floatSliderGrp -l "下眼皮瞪眼：" -s 0.001 -f 1 -v 0.4 -min 0 -max 1  gtadvEyeDnLidFloat;

rowColumnLayout -nc 3 -cw 1 188 -cw 2 4 -cw 3 188 ;;
button -l "ADV眼皮瞪眼幅度工具" -c "ttgadvEyeLidDgreeProc;" ;
text -l "";
button -l "ADV嘴角簇层级工具" -c "ttgadvMouthConerClusterProc;" ;
text -l "" -h 2;
text -l "" -h 2;
text -l "" -h 2;
button -l "ADV眼睛次级驱动组工具" -c "gtAdvEyeReversConProc;" ;
text -l "";
button -l "ADV测试版文件" -c "ttgAdvTestFileProc" ;
setParent..;
setParent..;
separator -style single  sep2;
showWindow  ttgRigADVToolsProcWin;
}
///////////////
global proc gtAdvEyeReversConProc(){
string $sel[]=`ls -sl`;
for($i=0;$i<size($sel);$i++){
    select -r ($sel[$i]);
    group -n ($sel[$i]+"DriveGrp");    
    string $plusNod[]=`listConnections -s 0 -d 1 ($sel[$i]+".tx")`;
    string $type=`nodeType ($plusNod[0])`;
    if($type!="plusMinusAverage"){
    shadingNode -asUtility plusMinusAverage -n  ($sel[$i]+"revDrivePlus");
    connectAttr -f ($sel[$i]+"revDrivePlus.output3Dx") ($plusNod[0]+".translateX");
    connectAttr -f ($sel[$i]+"revDrivePlus.output3Dy") ($plusNod[0]+".translateY");
    connectAttr -f ($sel[$i]+"revDrivePlus.output3Dz") ($plusNod[0]+".translateZ");
    connectAttr -f ($sel[$i]+".translateX") ($sel[$i]+"revDrivePlus.input3D[0].input3Dx");
    connectAttr -f ($sel[$i]+".translateY") ($sel[$i]+"revDrivePlus.input3D[0].input3Dy");
    connectAttr -f ($sel[$i]+".translateZ") ($sel[$i]+"revDrivePlus.input3D[0].input3Dz");
    connectAttr -f ($sel[$i]+"DriveGrp.translate") ($sel[$i]+"revDrivePlus.input3D[1]");
    }else{
    connectAttr -force ($sel[$i]+"DriveGrp.translate") ($plusNod[0]+".input3D[2]"); 
    }     
    string $revNod[]=`listConnections -s 0 -d 1 ($sel[$i]+".translate")`;
    connectAttr -force ($sel[$i]+"DriveGrp.translate") ($revNod[0]+".input3D[2]");       
    string $conectNod[]=`listConnections -s 0 -d 1 ($sel[$i]+".rx")`;
    $type=`nodeType ($conectNod[0])`;
    if($type=="joint"){
    shadingNode -asUtility plusMinusAverage -n  ($sel[$i]+"RotateRevDrivePlus");
    connectAttr -f ($sel[$i]+"RotateRevDrivePlus.output3Dx") ($plusNod[0]+".rotateX");
    connectAttr -f ($sel[$i]+"RotateRevDrivePlus.output3Dy") ($plusNod[0]+".rotateY");
    connectAttr -f ($sel[$i]+"RotateRevDrivePlus.output3Dz") ($plusNod[0]+".rotateZ");
    connectAttr -f ($sel[$i]+".rotate") ($sel[$i]+"RotateRevDrivePlus.input3D[0].input3Dx");
    connectAttr -f ($sel[$i]+".rotate") ($sel[$i]+"RotateRevDrivePlus.input3D[0].input3Dy");
    connectAttr -f ($sel[$i]+".rotate") ($sel[$i]+"RotateRevDrivePlus.input3D[0].input3Dz");
    connectAttr -f ($sel[$i]+"DriveGrp.rotate") ($sel[$i]+"RotateRevDrivePlus.input3D[1]");
    }else{
    $plusNod=`listConnections  ($conectNod[0]+".output")`;        
    connectAttr -force ($sel[$i]+"DriveGrp.rotate") ($plusNod[0]+".input3D[2]"); 
    } 
   
    $plusNod=`listConnections -s 0 -d 1 ($sel[$i]+".sx")`;
    $type=`nodeType ($plusNod[0])`;
    if($type!="plusMinusAverage"){
    shadingNode -asUtility plusMinusAverage -n  ($sel[$i]+"ScaleRevDrivePlus"); 
    connectAttr -f ($sel[$i]+".scaleX") ($sel[$i]+"ScaleRevDrivePlus.input3D[0].input3Dx");
    connectAttr -f ($sel[$i]+".scaleY") ($sel[$i]+"ScaleRevDrivePlus.input3D[0].input3Dy");
    connectAttr -f ($sel[$i]+".scaleZ") ($sel[$i]+"ScaleRevDrivePlus.input3D[0].input3Dz");
    connectAttr -f ($sel[$i]+"DriveGrp.scale") ($sel[$i]+"ScaleRevDrivePlus.input3D[1]");
    setAttr ($sel[$i]+"ScaleRevDrivePlus.operation") 3;    
    connectAttr -f ($sel[$i]+"ScaleRevDrivePlus.output3Dx") ($plusNod[0]+".scaleX");
    connectAttr -f ($sel[$i]+"ScaleRevDrivePlus.output3Dy") ($plusNod[0]+".scaleY");
    connectAttr -f ($sel[$i]+"ScaleRevDrivePlus.output3Dz") ($plusNod[0]+".scaleZ");    
    }else{        
    connectAttr -force ($sel[$i]+"DriveGrp.scale") ($plusNod[0]+".input3D[2]");     
        }       
    }
}
///////////////////
global proc ttgadvMouthConerClusterProc(){
    string $clusterLu="upperLip3ClusterHandle_L";
    string $clusterLd="lowerLip3ClusterHandle_L";
    string $clusterRu="upperLip3ClusterHandle_R";
    string $clusterRd="lowerLip3ClusterHandle_R"; 
    string $parentR="LipCornerGrpR_R";
    string $parentL="LipCornerGrpR_L";     
    string $p[]=`listRelatives -p  $clusterLu`;     
    if($p[0]!=$parentL)parent $clusterLu $parentL;
    $p=`listRelatives -p  $clusterLd`;     
    if($p[0]!=$parentL)parent $clusterLd $parentL;      
    $p=`listRelatives -p  $clusterRu`;     
    if($p[0]!=$parentR)parent $clusterRu $parentR;     
    $p=`listRelatives -p  $clusterRd`;     
    if($p[0]!=$parentR)parent $clusterRd $parentR; 
}
///////////////
global proc ttgAdvTestFileProc(){
setAttr "FKIKArm_L.FKIKBlend" 10;
string $p[]=`listRelatives -p ("FKIKArm_L")`;
setAttr ($p[0]+".visibility") 0;
setAttr -lock true ($p[0]+".visibility");
delete FKShoulder_L ;

setAttr "FKIKArm_R.FKIKBlend" 0;
$p=`listRelatives -p ("FKIKArm_R")`;
setAttr ($p[0]+".visibility") 0;
setAttr -lock true ($p[0]+".visibility");
delete IKArm_R PoleArm_R ;

setAttr "FKIKLeg_L.FKIKBlend" 0;
$p=`listRelatives -p ("FKIKLeg_L")`;
setAttr ($p[0]+".visibility") 0;
setAttr -lock true ($p[0]+".visibility");
delete IKLeg_L PoleLeg_L ;

setAttr "FKIKLeg_R.FKIKBlend" 10;
$p=`listRelatives -p ("FKIKLeg_R")`;
setAttr ($p[0]+".visibility") 0;
setAttr -lock true ($p[0]+".visibility");
delete FKHip_R ;
}
/////////////////////////////
global proc ttgadvEyeLidDgreeProc(){
string $lidSetup="LidSetup";
float $dnvalue=`floatSliderGrp -q -v  gtadvEyeDnLidFloat`;
float $upvalue=`floatSliderGrp -q -v  gtadvEyeUpLidFloat`;
string $attrs[]={"lowerLid_R","lowerLid_L"};
for($i=0;$i<size($attrs);$i++){
string $inputCurve[]=`listConnections -s 1 -d 0 ($lidSetup+"."+$attrs[$i])`;
keyframe -index 0 -absolute -valueChange ($dnvalue*-1) $inputCurve[0];
}
$attrs={"upperLid_R","upperLid_L"};
for($i=0;$i<size($attrs);$i++){
string $inputCurve[]=`listConnections -s 1 -d 0 ($lidSetup+"."+$attrs[$i])`;
keyframe -index 0 -absolute -valueChange ($upvalue*-1) $inputCurve[0];
}
$attrs={"lowerLidFollow_R","lowerLidFollow_L"};
for($i=0;$i<size($attrs);$i++){
string $inputCurve[]=`listConnections -s 1 -d 0 ($lidSetup+"."+$attrs[$i])`;
keyframe -index 1 -absolute -valueChange ($dnvalue/0.3) $inputCurve[0];
}
$attrs={"upperLidFollow_R","upperLidFollow_L"};
for($i=0;$i<size($attrs);$i++){
string $inputCurve[]=`listConnections -s 1 -d 0 ($lidSetup+"."+$attrs[$i])`;
keyframe -index 1 -absolute -valueChange ($upvalue) $inputCurve[0];
    }        
}
//老船粒子替换烘焙动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////////////////////
global string $gtStart;
global string $gtEnd;
global string $gtEframe;
global string $gtSframe;
global string $gtpTypeOption;
global string $gtfTypeOption;
/////////////////////////////////////////////////
global proc gtParticleInstanceBakeWin()
{
global string $gtStart;
global string $gtEnd;
global string $gtEframe;
global string $gtSframe;
global string $gtpTypeOption;
global string $gtfTypeOption;
	if(`window -q -ex gtParticleInstanceBakeWin`)
	deleteUI gtParticleInstanceBakeWin;
	if(`windowPref -q -ex gtParticleInstanceBakeWin`)
	windowPref -r gtParticleInstanceBakeWin;
	window -title "老船角色绑定-☆-粒子替换烘焙动画工具" -s 1 -w 350 -h 200 gtParticleInstanceBakeWin; 
	columnLayout -adj 1 -w 240 gtBSColumlayout;
text -l "点击下方按钮↓↓↓↓↓" -h 25;
button -l "访 问 老 船 @ 动 画 吧" -bgc 0.3 0.2 0.1 -h 35  -c "showHelp -a \"http://www.animate8.com\"";
separator -style single  sep1;
	text -l "----------选择粒子物体，点击工具按钮-----------" -h 25  ;

	formLayout myUIFL;
	text -l "烘焙方式 :" -h 25 fRange;
	$gtSframe = `text -l "开始帧:" -en 0 -h 25`;
	$gtEframe = `text -l "结束帧:" -en 0 -h 25`;
	$gtStart = `textField -w 80 -h 25 -en 0 -tx 1`;
	$gtEnd = `textField -w 80 -h 25 -en 0 -tx 120`;
	$gtfTypeOption =`optionMenu -label "" -h 25 -changeCommand "gtsequence"`;
            	menuItem -label "当前帧";
            	menuItem -label "序列";
            	menuItem -label "时间滑条";

	separator -w 450 sep;
	button -l "烘焙粒子替换" -c "gtParticleInstanceBake" -w 115 -h 30 btnsIB;
	formLayout -e
		-af 	"fRange" 	"left"	30  -af	"fRange" "top"	5   -ap "fRange" right 0 30 
        -ac      $gtfTypeOption left 5 fRange -af $gtfTypeOption top 5 -af $gtfTypeOption right 60
        
		-af 	$gtSframe 	"left"	30 -ac	$gtSframe	"top" 5 $gtfTypeOption -ap $gtSframe right 0 25
		-ac 	$gtStart "left"	5 $gtSframe -ac	$gtStart	"top"	5 $gtfTypeOption   -ap $gtStart right 0 45
		
		-ac 	$gtEframe 	"left" 5 $gtStart -ac $gtEframe top 5  $gtfTypeOption    -ap $gtEframe right 0 65
				
		-ac 	$gtEnd  "left" 5 $gtEframe -ac	$gtEnd 	"top" 5  $gtfTypeOption -af $gtEnd right 30

		-af 	"sep" 	"left"	0 -ac	"sep"	"top" 5 $gtEnd -af sep right 0

		-af 	"btnsIB" 	"left"	10 -ac	"btnsIB"	"top"	5 sep -af btnsIB right 10 
			myUIFL;

	showWindow gtParticleInstanceBakeWin;
} 
/////////////////////////////////////////
global proc gtParticleInstanceBake()
{
	global string $gtStart;
	global string $gtEnd;
	global string $gtEframe;
	global string $gtSframe;
	global string $gtpTypeOption;
	global string $gtfTypeOption;
	float $startFrame;
	float $endFrame;
	
	string $selection[]		= 	`ls-sl`;
	string $particleName[] 	= 	`listRelatives -s $selection`;
	string $pName			=	$particleName[0];
	string $instancerName[]	=	`particleInstancer -q -name $selection[0]`;

	string $insName			=	$instancerName[0];
	string $objects[]		=	`particleInstancer -name $insName -q -object $pName`;
	int $count;
	$count 				=	`particle -ct -q $pName`;
	string $objectRotation		=	`particleInstancer -name $insName -q -rotation $pName`;
	string $objectRotationType	=	`particleInstancer -name $insName -q -rotationType $pName`;
	string $objectPosition		=	`particleInstancer -name $insName -q -position $pName`;
	string $objectIndex		=	`particleInstancer -name $insName -q -objectIndex $pName`;
	string $objectScale		=	`particleInstancer -name $insName -q -scale $pName`;
	string $objectAimDir		=	`particleInstancer -name $insName -q -aimDirection $pName`;
	string $objectAimPos		=	`particleInstancer -name $insName -q -aimPosition $pName`;
	string $objectAimAxis		=	`particleInstancer -name $insName -q -aimAxis $pName`;
	string $objectAimUpAxis	=	`particleInstancer -name $insName -q -aimUpAxis $pName`;
	string $objectAimWorldUp	=	`particleInstancer -name $insName -q -aimWorldUp $pName`;

	string $group			=	`group -w -n "BakedObjects" -em`;

	string $FrmRangeOpt = `optionMenu -q -v $gtfTypeOption`;
	
	if($FrmRangeOpt == "当前帧")
	{
		int $cFrame = `currentTime -q`;
		$startFrame		=	$cFrame;
		$endFrame		=	$cFrame;
	
	}
	else if($FrmRangeOpt == "序列")
	{
		$startFrame 	= `textField -q -tx $gtStart`;
		$endFrame	= `textField -q -tx $gtEnd`;
	}
	else if($FrmRangeOpt == "时间滑条")
	{
		$startFrame		=	`playbackOptions -q -min`;
		$endFrame		=	`playbackOptions -q -max`;
	}		
	string $DoubleAttrs[]; string $VectorAttrs[];
	float $pos[];float $s[]; int $indexN; float $rot[]; float $size[]; vector $AimDirection; vector $AimPosition; vector $AimAxis;
	vector $AimUpAxis; vector $AimWorldUp; vector $objAimDir; float $matrix[]; vector $ObjAimAxis; vector $ObjAimUp; vector $ObjAimWup;

	for ($f=$startFrame; $f<($endFrame+1); $f++)
	{
		currentTime $f;
		$count 		=	`particle -ct -q $pName`;
		for($i=0; $i<$count; $i++)
		{ 
			if (`particle -ct -q $pName`>0)
			{
				if(!`objExists ("Geometry"+$i)`)
				{
			
					$DoubleAttrs = `particle -q -ppd $pName`;
					$VectorAttrs = `particle -q -ppv $pName`;

					$pos	= `particle -at $objectPosition -or $i -q $pName`;

					if($objectIndex !="")
					{ 
						$s = `particle -at $objectIndex -or $i -q $pName`;
						$indexN = $s[0];
					}
					else
					{
						$indexN=0;
					}

					if($objectRotation !="")
					{
						$rot	= `particle -at $objectRotation -or $i -q $pName`;
					}
					if($objectScale !="")
					{
						$size	= `particle -at $objectScale -or $i -q $pName`;
					}
					else	
					{
						$size	= {1,1,1};
					}
					
					if($objectAimDir !="")
					{
						$AimDirection	= `particle -at $objectAimDir -or $i -q $pName`;
						$objAimDir = unit($AimDirection);
					}
					else
					{
						$AimDirection	= <<1,0,0>>;
					}
					if($objectAimPos !="")
					{
						$AimPosition	= `particle -at $objectAimPos -or $i -q $pName`;
					}
					else
					{
						$AimPosition	= <<0,0,0>>;
					}
					if($objectAimAxis !="")
					{
						$AimAxis	= `particle -at $objectAimAxis -or $i -q $pName`;
					}
					else
					{
						$AimAxis	= <<1,0,0>>;
					}
					if($objectAimUpAxis !="")
					{
						$AimUpAxis	= `particle -at $objectAimUpAxis -or $i -q $pName`;
					}
					else
					{
						$AimUpAxis	= <<0,1,0>>;
					}
					if($objectAimWorldUp !="")
					{
						$AimWorldUp	= `particle -at $objectAimWorldUp -or $i -q $pName`;
					}
					else
					{
						$AimWorldUp	= <<0,1,0>>;
					}
					$matrix = `getAttr ( $insName+".worldMatrix")`;
					$ObjAimAxis = pointMatrixMult ($AimAxis, $matrix); 
					$ObjAimUp = pointMatrixMult ($AimUpAxis, $matrix); 
					$ObjAimWup= pointMatrixMult ($AimWorldUp, $matrix);
					string $duplicate[]=`duplicate  -n ("Geometry"+$i) $objects[$indexN]`;
		
					if($objectRotation !="")
					{
						for($rotAttr in $DoubleAttrs)
						{
							if($rotAttr ==$objectRotation)
							{
								xform -ro $rot[0] $rot[0] $rot[0] $duplicate[0];
							}
						}
						for($rotAttr in $VectorAttrs)
						{
							if($rotAttr==$objectRotation)
							{
								xform -ro $rot[0] $rot[1] $rot[2] $duplicate[0];
							}
						}
					}
					if($objectRotation =="" && $objectAimDir !="")
					{
						xform -ws -t 0 0 0 $duplicate[0];
						xform -a -ws -t 0 0 0 -sh 0 0 0 $duplicate[0];
						xform -a -ws -t ($objAimDir.x) ($objAimDir.y) ($objAimDir.z) $group;
						aimConstraint -offset 0 0 0 -weight 1 -aimVector ($ObjAimAxis.x) ($ObjAimAxis.y) ($ObjAimAxis.z) 
						-upVector ($ObjAimUp.x) ($ObjAimUp.y) ($ObjAimUp.z) -worldUpType "vector" -worldUpVector ($ObjAimWup.x) ($ObjAimWup.y) ($ObjAimWup.z) $group $duplicate[0];
						aimConstraint -e -rm $group $duplicate[0]; 
					}
					if($objectRotation =="" && $objectAimDir =="" && $objectAimPos !="")
					{
						xform -ws -t 0 0 0 $duplicate[0];
						xform -a -ws -t $pos[0] $pos[1] $pos[2] -sh 0 0 0 $duplicate[0];
						xform -a -ws -t ($AimPosition.x) ($AimPosition.y) ($AimPosition.z) $group;
						aimConstraint -offset 0 0 0 -weight 1 -aimVector ($ObjAimAxis.x) ($ObjAimAxis.y) ($ObjAimAxis.z) 
						-upVector ($ObjAimUp.x) ($ObjAimUp.y) ($ObjAimUp.z) -worldUpType "vector" -worldUpVector ($AimWorldUp.x) ($AimWorldUp.y) ($AimWorldUp.z) $group $duplicate[0];
						aimConstraint -e -rm $group $duplicate[0]; 
					}

					if($objectScale !="")
					{
						for($scaleAttr in $DoubleAttrs)
						{
							if($scaleAttr ==$objectScale)
							{
								xform -s $size[0] $size[0] $size[0] $duplicate[0];
							}
						}
						for($scaleAttr in $VectorAttrs)
						{
							if($scaleAttr==$objectScale)
							{
								xform -s $size[0] $size[1] $size[2] $duplicate[0];
							}
						}
					}

					xform -a -ws -wd -t $pos[0] $pos[1] $pos[2] $duplicate[0];
					xform -ztp -wd -ws -cp -p 1 $duplicate[0];
					setKeyframe ($duplicate[0] + ".tx");
					setKeyframe ($duplicate[0] + ".ty");
					setKeyframe ($duplicate[0] + ".tz");
					setKeyframe ($duplicate[0] + ".rx");
					setKeyframe ($duplicate[0] + ".ry");
					setKeyframe ($duplicate[0] + ".rz");
					setKeyframe ($duplicate[0] + ".sx");
					setKeyframe ($duplicate[0] + ".sy");
					setKeyframe ($duplicate[0] + ".sz");
					setKeyframe -at "visibility" -t ($f-1) -v 0 $duplicate[0];
					setKeyframe -at "visibility" -v 1 $duplicate[0];

				clear $pos;
				clear $duplicate;
				clear $s;
				clear $rot;
				clear $size;
				clear $matrix;
				}

				else

				{	
					$pos	= `particle -at $objectPosition -or $i -q $pName`;
					$DoubleAttrs = `particle -q -ppd $pName`;
					$VectorAttrs = `particle -q -ppv $pName`;

					if($objectRotation !="")
					{
						$rot	= `particle -at $objectRotation -or $i -q $pName`;
					}
					if($objectScale !="")
					{
						$size	= `particle -at $objectScale -or $i -q $pName`;
					}
					else	
					{
						$size	= {1,1,1};
					}
					
					if($objectAimDir !="")
					{
						$AimDirection	= `particle -at $objectAimDir -or $i -q $pName`;
						$objAimDir = unit($AimDirection);
					}
					else
					{
						$AimDirection	= <<1,0,0>>;
					}
					if($objectAimPos !="")
					{
						$AimPosition	= `particle -at $objectAimPos -or $i -q $pName`;
					}
					else
					{
						$AimPosition	= <<0,0,0>>;
					}
					if($objectAimAxis !="")
					{
						$AimAxis	= `particle -at $objectAimAxis -or $i -q $pName`;
					}
					else
					{
						$AimAxis	= <<1,0,0>>;
					}
					if($objectAimUpAxis !="")
					{
						$AimUpAxis	= `particle -at $objectAimUpAxis -or $i -q $pName`;
					}
					else
					{
						$AimUpAxis	= <<0,1,0>>;
					}
					if($objectAimWorldUp !="")
					{
						$AimWorldUp	= `particle -at $objectAimWorldUp -or $i -q $pName`;
					}
					else
					{
						$AimWorldUp	= <<0,1,0>>;
					}
					$matrix = `getAttr ( $insName+".worldMatrix")`;
					$ObjAimAxis = pointMatrixMult ($AimAxis, $matrix); 
					$ObjAimUp = pointMatrixMult ($AimUpAxis, $matrix); 
					$ObjAimWup= pointMatrixMult ($AimWorldUp, $matrix);
					
					if($objectRotation !="")
					{
						for($rotAttr in $DoubleAttrs)
						{
							if($rotAttr ==$objectRotation)
							{
								xform -ro $rot[0] $rot[0] $rot[0]  ("Geometry"+$i);
								setKeyframe ("Geometry"+$i + ".rx");
								setKeyframe ("Geometry"+$i + ".ry");
								setKeyframe ("Geometry"+$i + ".rz");
							}
						}
						for($rotAttr in $VectorAttrs)
						{
							if($rotAttr==$objectRotation)
							{
								xform -ro $rot[0] $rot[1] $rot[2]  ("Geometry"+$i);
								setKeyframe ("Geometry"+$i + ".rx");
								setKeyframe ("Geometry"+$i + ".ry");
								setKeyframe ("Geometry"+$i + ".rz");
							}
						}
					} 
					if($objectRotation =="" && $objectAimDir !="")
					{
						xform -ws -t 0 0 0  ("Geometry"+$i);
						xform -a -ws -t 0 0 0 -ro 0 0 0  -sh 0 0 0  ("Geometry"+$i);
						xform -a -ws -s $size[0] $size[1] $size[2]("Geometry"+$i);
						xform -a -ws -t ($objAimDir.x) ($objAimDir.y) ($objAimDir.z) $group;
						aimConstraint -offset 0 0 0 -weight 1 -aimVector ($ObjAimAxis.x) ($ObjAimAxis.y) ($ObjAimAxis.z) 
						-upVector ($ObjAimUp.x) ($ObjAimUp.y) ($ObjAimUp.z) -worldUpType "vector" -worldUpVector ($AimWorldUp.x) ($AimWorldUp.y) ($AimWorldUp.z) $group  ("Geometry"+$i);
						setKeyframe ("Geometry"+$i + ".rx");
						setKeyframe ("Geometry"+$i + ".ry");
						setKeyframe ("Geometry"+$i + ".rz");
						aimConstraint -e -rm $group  ("Geometry"+$i); 
					}
					if($objectRotation =="" && $objectAimDir =="" && $objectAimPos !="")
					{
						xform -ws -t 0 0 0  ("Geometry"+$i);
						xform -a -ws -t $pos[0] $pos[1] $pos[2] -sh 0 0 0  ("Geometry"+$i);
						xform -a -ws -t ($AimPosition.x) ($AimPosition.y) ($AimPosition.z) $group;
						aimConstraint -offset 0 0 0 -weight 1 -aimVector ($ObjAimAxis.x) ($ObjAimAxis.y) ($ObjAimAxis.z) 
						-upVector ($ObjAimUp.x) ($ObjAimUp.y) ($ObjAimUp.z) -worldUpType "vector" -worldUpVector ($AimWorldUp.x) ($AimWorldUp.y) ($AimWorldUp.z) $group  ("Geometry"+$i);
						setKeyframe ("Geometry"+$i + ".rx");
						setKeyframe ("Geometry"+$i + ".ry");
						setKeyframe ("Geometry"+$i + ".rz");
						aimConstraint -e -rm $group  ("Geometry"+$i); 
					}

					if($objectScale !="")
					{
						for($scaleAttr in $DoubleAttrs)
						{
							if($scaleAttr ==$objectScale)
							{
								xform -s $size[0] $size[0] $size[0]  ("Geometry"+$i);
							}
						}
						for($scaleAttr in $VectorAttrs)
						{
							if($scaleAttr==$objectScale)
							{
								xform -s $size[0] $size[1] $size[2]  ("Geometry"+$i);
							}
						}
					}

				xform -ztp -wd -ws -cp -p 1  ("Geometry"+$i);
				xform -a -ws -wd -t $pos[0] $pos[1] $pos[2]  ("Geometry"+$i);
					setKeyframe ("Geometry"+$i + ".tx");
					setKeyframe ("Geometry"+$i + ".ty");
					setKeyframe ("Geometry"+$i + ".tz");

					setKeyframe ("Geometry"+$i + ".sx");
					setKeyframe ("Geometry"+$i + ".sy");
					setKeyframe ("Geometry"+$i + ".sz");
					setKeyframe ("Geometry"+$i + ".visibility");

				clear $pos;
				clear $s;
				clear $rot;
				clear $size;	
				clear $matrix;
				}

			}
		}
	}
	$count 		=	`particle -ct -q $pName`;
	for ($i=0; $i<$count; $i++)
	{
		xform -a -t 0 0 0 $group; 
		parent -a ("Geometry"+$i) $group;  
	}
	select -r $selection;
	gtclearInitialState;
	select -r $group;
}
///////////////////////////////////////////////
global proc gtsequence()
{
	global string $gtStart;
	global string $gtEnd;
	global string $gtEframe;
	global string $gtSframe;
	global string $gtpTypeOption;
	global string $gtfTypeOption;

	string $seq = `optionMenu -q -v $gtfTypeOption`;

	if($seq == "序列")
	{
		text -e -en 1 $gtSframe;
		text -e -en 1 $gtEframe;
		textField -e -en 1 $gtStart;
		textField -e -en 1 $gtEnd;
	}
	else
	{
		text -e -en 0 $gtSframe;
		text -e -en 0 $gtEframe;
		textField -e -en 0 $gtStart;
		textField -e -en 0 $gtEnd;
	}
}
//////////////////////////////////////////////
global proc gtclearInitialState()
{
	string $Dattrs[];
	string $Vattrs[];
	string $particle[] = `ls-sl`;
	string $pName[] = `listRelatives -s $particle[0]`;

	if(`objExists $pName[0]`)
	{
		$Dattrs = `particle -q -ppd $pName`;
		$Vattrs = `particle -q -ppv $pName`;
		for ($Dattr in $Dattrs)
		{
			if(`attributeQuery -ex -n $pName[0] ($Dattr+"0")`)
				{
				print ($Dattr+"\n");
				setAttr($pName[0] + "." + $Dattr + "0") -type "doubleArray" 0;
				}
		}
		
		for ($Vattr in $Vattrs)
		{
			if(`attributeQuery -ex -n $pName[0] ($Vattr + "0")`)
				setAttr($pName[0] + "." + $Vattr + "0") -type "vectorArray" 0;
		}
	
		setAttr ($pName[0] + ".nid0") 0;
		setAttr ($pName[0] + ".particleId0") -type "doubleArray" 0;		
		setAttr ($pName[0] + ".age0") -type "doubleArray" 0;
	}
	else
	{
		warning "请检查物体是否存在";
	}
}
//粒子替换贴图浮雕动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtTextureParticleWin(){
if(`window -ex gtTextureParticleWin`==1){ deleteUI -window gtTextureParticleWin;}
window -wh 450 250 -title "纹理粒子" gtTextureParticleWin;
columnLayout -adj 1 gtMaintColumnLay;
text -l "查看程序说明，了解更多应用细节\n老船动画吧：http://www.animate8.com/";
button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com\"";
text -l "粒子替换与贴图序列（MAYA2103/2014两个本版有BUG不能正常播放）\n---------请注意本程序需要手动完成一次载入文件纹理的操作---------\n程序会自动创建粒子、粒子替换，以及物体浮雕动画……" text1;
textFieldButtonGrp -cw3 80 300 70 -l ("序列贴图文件") -text "载入纹理序列" -bl "浏    览" -bc "gtTexGetDir;" gtTextField;
textFieldButtonGrp -cw3 80 300 70 -l ("粒子替换物体") -text "载入替换物体名" -bl "载    入" -bc "gtloadName" gtTextFielda;
textFieldButtonGrp -cw3 80 300 70 -l ("目标平面物体") -text "载入目标物体名" -bl "载    入" -bc "gtloadNameb" gtTextFieldb;

formLayout -h 130 gtform;

intFieldGrp -l "行/列数" -nf 2 -v1 30 -v2 30 gtIntFa;

	rowColumnLayout -nc 3 -cw 1 60 -cw 2 100  -cw 3 265 gtrow;
text -l "";
checkBox -l "创建浮雕物体" -v 0  gtObjCheck;
button -l "应用" -c "gtTextureParticle;" but1;

formLayout -e

-af gtIntFa left 3 -af gtIntFa top 5  -af gtIntFa right 3
-af gtrow left 3 -af gtrow right 3 -ac gtrow top 5 gtIntFa 

 gtform;
setParent..;
showWindow gtTextureParticleWin;
}
//////////////////////////////////////////////////////////////////////////////////////////
global proc gtTexGetDir(){
    string $filename[] = `fileDialog2 -fileMode 4 -caption "Import Image"`;
    if (1 == `size($filename)`)
    {
       gtCheckTexGetName($filename[0], "");
    }
}    
///////////////////////////////////////
global proc gtCheckTexGetName(string $dir,string $type){
textFieldButtonGrp -e -text ($dir)  gtTextField;
}
////////////////////////////
global proc gtloadName(){
string $sel[]=`ls -sl`;
textFieldButtonGrp -e -tx $sel[0] gtTextFielda;}
global proc gtloadNameb(){
string $sel[]=`ls -sl`;
textFieldButtonGrp -e -tx $sel[0] gtTextFieldb;}
///////////////////////////////////////////
global proc gtTextureParticle(){
string $filePath=`textFieldButtonGrp -q -tx gtTextField`;
string $instanser=`textFieldButtonGrp -q -tx gtTextFielda`;
string $plane=`textFieldButtonGrp -q -tx gtTextFieldb`;
int $objCheck=`checkBox -q -v gtObjCheck`;
int $cycle=10;
int $vv=`intFieldGrp -q -v1 gtIntFa`;
int $uu=`intFieldGrp -q -v2 gtIntFa`;
int $numP=$vv*$uu;
string $sel[]=`ls -sl`;
string $type="";

int $size=size($sel);
if($size==1){
string $shape[]=`listRelatives -s ($sel[0])`;
int $ss=size($shape);
if($ss==1){$type=`nodeType ($shape[0])`;}
}

string $particle;
if($size==0||$type!="particle"){
string $emit[]=`emitter -pos 0 0 0 -type omni -r 500 -sro 0 -nuv 1 -cye none -cyi 1 
-spd 2 -srn 2 -nsp 2 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0`;
string $part[]=`particle`;
connectDynamic -em ($emit[0]) ($part[0]);
$particle=$part[0];}
else{
$particle=$sel[0];
}

string $emit[]=`listConnections -s 0 -d 1 ($particle+".startTime")`;
setAttr ($emit[0]+".rate") 200;
//playbackOptions -e -min 1 -max 200;

string $fil=`shadingNode -asTexture file`;
string $placeM=`shadingNode -asUtility place2dTexture`;
connectAttr -f ($placeM+".coverage") ($fil+".coverage");
connectAttr -f ($placeM+".translateFrame") ($fil+".translateFrame");
connectAttr -f ($placeM+".rotateFrame") ($fil+".rotateFrame");
connectAttr -f ($placeM+".mirrorU") ($fil+".mirrorU");
connectAttr -f ($placeM+".mirrorV") ($fil+".mirrorV");
connectAttr -f ($placeM+".stagger") ($fil+".stagger");
connectAttr -f ($placeM+".wrapU") ($fil+".wrapU");
connectAttr -f ($placeM+".wrapV") ($fil+".wrapV");
connectAttr -f ($placeM+".repeatUV") ($fil+".repeatUV");
connectAttr -f ($placeM+".offset") ($fil+".offset");
connectAttr -f ($placeM+".rotateUV") ($fil+".rotateUV");
connectAttr -f ($placeM+".noiseUV") ($fil+".noiseUV");
connectAttr -f ($placeM+".vertexUvOne") ($fil+".vertexUvOne");
connectAttr -f ($placeM+".vertexUvTwo") ($fil+".vertexUvTwo");
connectAttr -f ($placeM+".vertexUvThree") ($fil+".vertexUvThree");
connectAttr -f ($placeM+".vertexCameraOne") ($fil+".vertexCameraOne");
connectAttr ($placeM+".outUV") ($fil+".uv");
connectAttr ($placeM+".outUvFilterSize") ($fil+".uvFilterSize");

setAttr -type "string"   ($fil+".fileTextureName")  ($filePath);

select -r $fil;
lockNode -l 1;
setAttr ($fil+".useFrameExtension") 1;

select -r ($particle);
select -add ($plane) ;
goal -w 1 -utr 0   -g ($plane)  ($particle);
string $pShap[]=`listRelatives -s ($particle)`;
addAttr -ln goalU -dt doubleArray ($pShap[0]);
addAttr -ln goalU0 -dt doubleArray ($pShap[0]);
addAttr -ln goalV -dt doubleArray ($pShap[0]);
addAttr -ln goalV0 -dt doubleArray ($pShap[0]);

float $bbX=`getAttr ($plane+".boundingBoxMinX")`;
float $bbMX=`getAttr ($plane+".boundingBoxMaxX")`;
float $rad=($bbMX-$bbX)/2.0;

circle -ch 0 -o on -nr 0 1 0 -r ($rad*1.3) -n ($plane+"Con");
group -n ($plane+"ConGrp");
select -r ($plane);
select -add ($plane+"ConGrp");
delete `parentConstraint`;
select -r ($plane);
select -add ($plane+"Con");
parent;

addAttr -ln "multiH"  -at double -dv 1 -k 1 ($plane+"Con");
addAttr -ln "cut"  -at bool -dv 0 -k 1 ($plane+"Con");
 if($objCheck==1)addAttr -ln "showObj"  -at bool -dv 1 -k 1 ($plane+"Con");
addAttr -ln "showInstance"  -at bool -dv 0 -k 1 ($plane+"Con");
addAttr -ln "showParticle"  -at bool -dv 0 -k 1 ($plane+"Con");

string $shape[]=`listRelatives -s ($plane+"Con")`;
setAttr ($shape[0]+".overrideEnabled") 1;
setAttr ($shape[0]+".overrideColor") 22;

int $u;
int $v;
if($uu>=$vv){
$u=$uu;
$v=$vv;}
else{
$u=$vv;
$v=$uu;}

select -cl;
group -em -n ($plane+"LocGrp");

global string $gMainProgressBar;
 progressBar -e -st ($plane+"创建物体浮雕：") -bp -ii 1 -min 0 -max ($u*$v) $gMainProgressBar;

     for($i=0;$i<($u*$v);$i++){
         if (`progressBar -q -ic $gMainProgressBar`)
		break;
	    progressBar -e -s 1 $gMainProgressBar;

       spaceLocator -p 0 0 0 -n ($plane+"Loc"+$i);
        select -r ($plane+"Loc"+$i);
       select -add ($plane+"LocGrp");
       parent;
}
	progressBar -e -ep $gMainProgressBar;

string $pExp="";
	$pExp+=($pShap[0]);
	$pExp+=".goalU=particleId%";
	$pExp+=($u);
	$pExp+="/";
	$pExp+=($u-1);
	$pExp+=".0;\r\n";
	$pExp+=($pShap[0]);
	$pExp+=".goalV=int(particleId/";
	$pExp+=($u);
	$pExp+=")/";
	$pExp+=($v-1);
	$pExp+=".0;";

dynExpression -s ($pExp) -c ($pShap[0]);
setAttr ($pShap[0]+".maxCount") ($u*$v);

addAttr -ln "scl0"  -dt vectorArray  ($pShap[0]);
addAttr -ln "scl"  -dt vectorArray  ($pShap[0]);

addAttr -ln "aimP0"  -dt vectorArray  ($pShap[0]);
addAttr -ln "aimP"  -dt vectorArray  ($pShap[0]);

string $instance=`particleInstancer  -addObject -object  $instanser -cycle None -cycleStep 1 
-cycleStepUnits Frames -levelOfDetail Geometry -rotationUnits Degrees 
-rotationOrder XYZ -position worldPosition -age age ($pShap[0])`;
connectAttr -f ($plane+"Con.showInstance") ($instance+".visibility");

string $ppExp="";
	$ppExp+="\nfloat $u=goalU;\n";
	$ppExp+="float $v=goalV;\n";
	$ppExp+="float $c[]=`colorAtPoint -o RGB -u $u -v $v ";
	$ppExp+=($fil);
	$ppExp+="`;\nfloat $cut="+$plane+"Con.cut;\n";
	$ppExp+="if($cut==0||$c[0]>0)\n";
	$ppExp+="scl=<<($c[0]*"+$plane+"Con.multiH)+1,1,1>>;\n";
	$ppExp+="else\n";
	$ppExp+="scl=<<0,0,0>>;\n";
	$ppExp+="int $id=particleId;\n";
	$ppExp+="float $p[]=`getAttr (\"";
	$ppExp+=($plane+"Loc");
	$ppExp+="\"+$id+\".translate\")`;\n";
	$ppExp+="aimP=<<$p[0],$p[1],$p[2]>>;\n";
dynExpression -s ($pExp+$ppExp) -c ($pShap[0]);
dynExpression -s ($ppExp) -rad ($pShap[0]);

particleInstancer -e -name $instance -scale scl ($pShap[0]);
particleInstancer -e -name $instance -aimPosition aimP ($pShap[0]);
for($i=0;$i<($numP/200*24+20);$i++){
    currentTime -e $i;
    }
saveInitialState $particle ;
 select -r $plane;
 gtTectureParticleAim;
setAttr ($plane+".visibility") 0;
setAttr -lock true ($plane+".visibility");
 
 if($objCheck==1){
     int $ex=`objExists ($plane+"ObjGrp")`;
     if($ex==0){
         select -cl;
         group -empty -n ($plane+"ObjGrp");
         select -r ($plane+"Con");
         select -add ($plane+"ObjGrp");
         parentConstraint;
         scaleConstraint;
     connectAttr -f ($plane+"Con.showObj") ($plane+"ObjGrp.visibility");        
     }
     
progressBar -e -st ($plane+"创建物体浮雕：") -bp -ii 1 -min 0 -max ($u*$v) $gMainProgressBar;

     for($i=0;$i<($u*$v);$i++){
         if (`progressBar -q -ic $gMainProgressBar`)
		break;
	    progressBar -e -s 1 $gMainProgressBar;
     
         select -r $instanser;
         duplicate -rr;
         rename ($plane+"Obj"+$i);
         float $objU[]=`getParticleAttr -at goalU ($pShap[0]+".pt["+$i+"]")`;
         float $objV[]=`getParticleAttr -at goalV ($pShap[0]+".pt["+$i+"]")`;
         float $pos[]=`getParticleAttr -at worldPosition ($pShap[0]+".pt["+$i+"]")`;

         addAttr -ln "objU"  -at double -dv $objU[0] ($plane+"Obj"+$i);
         addAttr -ln "objV"  -at double -dv $objV[0] ($plane+"Obj"+$i);
         addAttr -ln "pt"  -at long -dv $i ($plane+"Obj"+$i);
         setAttr -l true ($plane+"Obj"+$i+".pt");
         setAttr -l true ($plane+"Obj"+$i+".objV");
         setAttr -l true ($plane+"Obj"+$i+".objU");
         setAttr ($plane+"Obj"+$i+".t") -type float3 $pos[0] $pos[1] $pos[2];
         select -r ($plane);
         select -add ($plane+"Obj"+$i);
         delete`normalConstraint -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "vector" -worldUpVector 0 1 0`;
         select -r ($plane+"Obj"+$i);
         select -add  ($plane+"ObjGrp"); 
         parent; 
         string $ppExp="";
	$ppExp+="\nfloat $u="+$plane+"Obj"+$i+".objU;\n";
	$ppExp+="float $v="+$plane+"Obj"+$i+".objV;\n";
	$ppExp+="float $c[]=`colorAtPoint -o RGB -u $u -v $v ";
	$ppExp+=($fil);
	$ppExp+="`;\nfloat $cut="+$plane+"Con.cut;\n";
	$ppExp+="if($cut==0||$c[0]>0)\n";
	$ppExp+=$plane+"Obj"+$i+".sy=($c[0]*"+$plane+"Con.multiH+0.1);\n";
	$ppExp+="else\n";
	$ppExp+=$plane+"Obj"+$i+".sy=0;\n";
	$ppExp+="if("+$plane+"Obj"+$i+".sy<0.01)\n";	
	$ppExp+=$plane+"Obj"+$i+".v=0;\nelse\n";
	$ppExp+=$plane+"Obj"+$i+".v=1;\n";
		
	expression -s ($ppExp)  -o "" -ae 1 -uc all -n ($plane+"ObjExp"+$i);
     }
	progressBar -e -ep $gMainProgressBar;

   } else{
    setAttr  ($plane+"Con.showInstance") 1;  
   }
connectAttr -f ($plane+"Con.showParticle") ($particle+".visibility");
   select -r ($particle);
   $ex=`objExists ($plane+"ObjGrp")`;
   if($ex==1)
       select -add ($plane+"ObjGrp");
   select -add ($instance);
   select -add $instanser;
   select -add ($plane+"LocGrp");
   select -add ($plane+"ConGrp");
   select -add ($emit[0]);
   group -n ($plane+"Grp");
   select -r $fil;

ShowAttributeEditorOrChannelBox;
for($i=0;$i<10;$i++){
    currentTime -e $i;
    }
   currentTime -e 1;
}
///////////
global proc gtTectureParticleAim(){
string $sel[]=`ls -sl`;
string $part[]=`listConnections -d 1 -s 0 ($sel[0]+".worldSpace[0]")`;
string $shp[]=`listRelatives -fullPath -c -s $part[0]`;

string $loc=($sel[0]+"Loc");
int $count=`getAttr ($shp[0]+".count")`;
int $mcount=`getAttr ($shp[0]+".maxCount")`;
if($count!=$mcount) error "请将粒子全部播放出来！！！";
for($i=0;$i<$count;$i++){
float $pos[]=`getParticleAttr -at worldPosition ($shp[0]+".pt["+$i+"]")`;
setAttr ($loc+$i+".tx") $pos[0];
setAttr ($loc+$i+".ty") $pos[1];
setAttr ($loc+$i+".tz") $pos[2];
move -r 0 1 0 ($loc+$i);
select -r $sel[0];
select -add ($loc+$i);
parentConstraint -mo;
}
select -r ($loc+"0");
pickWalk -d up;
$sel=`ls -sl`;
setAttr ($sel[0]+".v") 0;
setAttr -lock true ($sel[0]+".tx");
setAttr -lock true ($sel[0]+".ty");
setAttr -lock true ($sel[0]+".tz");
setAttr -lock true ($sel[0]+".rx");
setAttr -lock true ($sel[0]+".ry");
setAttr -lock true ($sel[0]+".rz");
setAttr -lock true ($sel[0]+".v");
}
//多边形烘焙动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtBakeToBlendShapeWin(){
if(`window -ex gtBakeToBlendShapeWin`) deleteUI  -window gtBakeToBlendShapeWin;
window -wh 400 200 -title "老船动画吧-多边形烘焙动画工具" gtBakeToBlendShapeWin;
columnLayout   -w 400 mainColumnL;
text -l "老船绑定工具-老船动画吧：http://www.animate8.com/";
    button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 45 -w 366 -c "showHelp -a \"http://www.animate8.com\"";
    string $onc="intFieldGrp -e -en 1 gtIntFrameNum";
    string $ofc="intFieldGrp -e -en 0 gtIntFrameNum";
    
    radioButtonGrp -on1 $onc -on2 $ofc -cw3 140  100  100  -numberOfRadioButtons 2 -l "时间范围："  -la2 "指定帧数:" "时间滑条"  -sl 1 gtRangRad;   
	intFieldGrp -l "开始/结束帧"  -nf 2  -v1 1 -v2 100  gtIntFrameNum;
	intFieldGrp -l "烘焙数量"  -nf 1  -v1 1  gtIntObjNum;
     text -l "                           动力学解算物体，需要创建缓存";
	//intFieldGrp -l "动力学初始帧"  -nf 1  -v1 1  gtIntDynFrameNum;
	//button  -l "烘培多边形变形动画" -c "gtBakeGeoProc" -w 366 gtBnButb;
    separator -style double;	

	rowColumnLayout -nc 3 -cw 1 180 -cw 2 5 -cw 3 180 ;

	button  -l "逐帧混合变形烘焙动画" -c "gtBakeGeoProc" gtBnBut;
	text -l "";
	button  -l "中间帧混合变形烘焙动画" -c "gtBakeClothProc" gtBnButA;
	
	setParent..;
separator -style double;	
showWindow gtBakeToBlendShapeWin;
}
////////////////////////////////////////////
global proc gtBakeGeoProc()
{
    int $start=`intFieldGrp -q -v1 gtIntFrameNum`;
    int $end=`intFieldGrp -q -v2 gtIntFrameNum`;
    int $sl=`radioButtonGrp -q -sl gtRangRad`;
    int $objNum=`intFieldGrp -q -v1  gtIntObjNum`;
    if($objNum<1)error "烘焙数量不能小于:1";
    float $startFrame;
	float $endFrame;    
    if($sl==2){
    $startFrame = `playbackOptions -q -minTime`;
	$endFrame = `playbackOptions -q -maxTime`;
	}else{
    $startFrame = $start;
	$endFrame = $end;	    
	}
	float $frameRange = $endFrame - $startFrame;
	float $weightInc = (1/$frameRange);
	float $currentWeight;
	int $stepSize = ($frameRange / 999) +1;
    string $sel[] = `ls -sl`;
    
	int $ex=`objExists ($sel[0]+"BakeGrp")`;
	if($ex==0){
	    select -cl;
	    group -empty -n  ($sel[0]+"BakeGrp");
	}	
     
for ($origSurf in $sel)
{
    for($n=0;$n<$objNum;$n++){
   // $origSurf=$sel[0];   
	currentTime -e $startFrame;

	string $baseGeo[] = `duplicate $origSurf`;
	rename $baseGeo[0] ($origSurf + "_baked"+$n);

    currentTime -e $endFrame;

              
	string $endShape[] = `duplicate $origSurf`;
	select -r $endShape[0] ($origSurf + "_baked"+$n);

	string $blendOptions = ("blendShapeDeleteTarget " + 
					"\"" + "blendShape -ib -name " + 
					($origSurf + "_bakeBlend"+$n) + "\"");
	eval $blendOptions;			
    select -r  ($origSurf + "_baked"+$n);
    select -add  ($sel[0]+"BakeGrp");
    parent;
    
	int $j = 1;
    	currentTime -e $startFrame;    	    

	for ($i=($startFrame+1); $i<$endFrame+1; $i+=$stepSize)
	{     
	    currentTime -e $i; 
		$currentWeight = ($j*$weightInc);
		$currentWeight = ($currentWeight*1000);
		$currentWeight = trunc($currentWeight);
		$currentWeight = ($currentWeight/1000);
		$j+=$stepSize;

		string $tempShape[] = `duplicate $origSurf`;
		blendShape -e -ib -t ($origSurf + "_baked"+$n) 0
					 $tempShape[0] $currentWeight ($origSurf + "_bakeBlend"+$n);
		delete $tempShape[0];
	}
	currentTime -e $endFrame;
	setAttr ($origSurf + "_bakeBlend"+$n+"." + $endShape[0]) 1;	
	setKeyframe ($origSurf + "_bakeBlend"+$n+"." + $endShape[0]);
	currentTime -e $startFrame;
	setAttr ($origSurf + "_bakeBlend"+$n+"." + $endShape[0]) 0;	
	setKeyframe ($origSurf + "_bakeBlend"+$n+"." + $endShape[0]);
	string $curveA[]=`listConnections -s 1-d 0 ($origSurf + "_bakeBlend"+$n+"." + $endShape[0])`;

	keyTangent -itt linear -ott linear ($curveA[0]);
        }
	hide $origSurf;
	rename $origSurf ($origSurf + "_original");	
    }
	print ("烘焙 " + $origSurf +"完成\n");
}
/////////////////////////////

global proc gtBakeClothProc()
{
	string $frameNum ;
	string $temp[];
	string $clothObj[] = `ls -selection -transforms`;
	if ($clothObj[0] == "")error "请先选择物体，然后执行工具按钮";

	int $minTime;
	int $maxTime;
    int $start=`intFieldGrp -q -v1 gtIntFrameNum`;
    int $end=`intFieldGrp -q -v2 gtIntFrameNum`;
    int $sl=`radioButtonGrp -q -sl gtRangRad`;
    int $objNum=`intFieldGrp -q -v1  gtIntObjNum`;
    if($objNum<1)error "烘焙数量不能小于:1";
   
    if($sl==2){
    $minTime = `playbackOptions -q -minTime`;
	$maxTime = `playbackOptions -q -maxTime`;
	}else{
    $minTime = $start;
	$maxTime = $end;	    
	}
	
	int $index = 0;
	string $blendShape, $base, $target, $buf[];

	currentTime $minTime;
	refresh;
	string $nspace="";
	string $mayVer= `about -v`;
	for($a=0;$a<$objNum;$a++){	
	for ($obj in $clothObj){
	    //string $obj=$clothObj[0];
		if (!size(`listRelatives -shapes $obj`))
		{
			continue;
		}

		string $name = `match "[^|]+$" $obj`;

		if (($mayVer=="7.0.1")&&`referenceQuery -isNodeReferenced $obj`)
		{
			string $temp[];
			tokenize $obj ":" $temp;
			if (!`namespace -exists $temp[0]`)
			{
				namespace -add $temp[0];
			}
			$nspace = $temp[0];
			$buf = `duplicate $obj`;
			$base = `rename $buf[0] ($name + "_BAKED"+$a)`;
			$blendShape = $name + "_BlendShape"+$a;
			if (`objExists $blendShape`)
				delete $blendShape;
			blendShape -name $blendShape $base;

			hide $obj;
		}
		else
		{
			$buf = `duplicate $obj`;
			$base = `rename $buf[0] ($name + "_BAKED"+$a)`;
			$blendShape = $name + "BS"+$a;
			if (`objExists $blendShape`)
				delete $blendShape;
			blendShape -name $blendShape $base;

			hide $obj;
		}
	}

	for ($i=$minTime; $i<($maxTime+1); $i++)
	{
		currentTime $i;
		refresh;
		for ($each in $clothObj)
		{
			if (!size(`listRelatives -shapes $each`))
			{
				continue;
			}

			string $name = `match "[^|]+$" $each`;

			if (($mayVer=="7.0.1")&&`referenceQuery -isNodeReferenced $each`)
			{
				$buf = `duplicate $each`;
				$base = $each + "_BAKED"+$a;

				$target = `rename $buf[0] ($name + "_baked_frame_" + $i)`;
				$blendShape = $name + "_BlendShape"+$a;
				print ("\n $base "+$base);
				print ("\n $index "+$index);
				print ("\n $target "+$target);
				print ("\n $blendShape "+$blendShape);
																
				blendShape -edit -target $base $index $target 1.0 $blendShape;

				delete $target;
			}
			else
			{
				$buf = `duplicate $each`;
		
				$base = $each + "_BAKED"+$a;
				$target = `rename $buf[0] ($name + "baked_frame_" + $i)`;
				$blendShape = $name + "BS"+$a;
				blendShape -edit -target $base $index $target 1.0 $blendShape;

				delete $target;
			}
			if ($i != $minTime)
				setKeyframe -time ($i-1) -value 0 -inTangentType "flat" -outTangentType "flat" ($blendShape + "." + $target);
			setKeyframe -time $i -value 1 -inTangentType "flat" -outTangentType "flat" ($blendShape + "." + $target);
			if ($i != $maxTime)
				setKeyframe -time ($i+1) -value 0 -inTangentType "flat" -outTangentType "flat" ($blendShape + "." + $target);
		}
		$index ++;
		flushUndo;
	}
}
	flushUndo;
	refresh;
}
//粒子替换贴图浮雕动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
global proc gtfakeBrickProcWin(){
if(`window -ex gtfakeBrickProcWin`==1){ deleteUI -window gtfakeBrickProcWin;}
window -wh 350 200 -title "像素方块" gtfakeBrickProcWin;
columnLayout -adj 1 gtMaintColumnLay;
text -l "查看程序说明，了解更多应用细节\n老船动画吧：http://www.animate8.com/";
button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com\"";
floatSliderGrp -l "像素尺寸："  -f 1 -pre 5 -v 0.2  gtfloatSizeBox;
rowColumnLayout -nc 3 -cw 1 60 -cw 2 140  -cw 3 140;
text -l "";
checkBox -l "附着模型" -v 1  gtObjCheck;
checkBox -l "实体像素" -v 0  gtObjCheckshixin;
setParent..;
rowColumnLayout -nc 2 -cw 1 200 -cw 2 140;
text -l "---选择多边形物体---";
button -l "创建像素方块" -c "gtfakeBrickProc;" ;
setParent..;
showWindow gtfakeBrickProcWin;
}
//////////////////////  
proc gtfakeBrickProc(){
float $size=`floatSliderGrp -q -v gtfloatSizeBox`;
int $attach=`checkBox -q -v   gtObjCheck`;
int $shixin=`checkBox -q -v   gtObjCheckshixin`;

string $mesh[] = `ls -sl`;
//load plugin
//string $plug_path =`pluginInfo  -q -path nearestPointOnMesh`;
//if(!`pluginInfo -q -l $plug_path`)
//    loadPlugin $plug_path;
for($a=0;$a<size($mesh);$a++){   
string $mesh_shape[] = `listRelatives -s $mesh[$a]`;
// create nearest node    
string $nearestNodeList[] =` listConnections -type nearestPointOnMesh $mesh_shape[0]`;
string $nearestNode ;
if($nearestNodeList[0] == "")
    {
     $nearestNode = `createNode nearestPointOnMesh`;
    connectAttr -f ($mesh_shape[0]+".worldMesh[0]") ($nearestNode+".inMesh");
    }
else
    $nearestNode = $nearestNodeList[0];
  
int $ex=`objExists ($mesh[$a]+"BoxsGrp") `;
if($ex==0){
    select -cl;
    group -empty -n ($mesh[$a]+"BoxsGrp");
}
  
// boundingBox, xmin xmax ymin ymax zmin zmax
float $bounding[] = `polyEvaluate -boundingBox $mesh[$a]`;
int $num=($bounding[1]-$bounding[0])/$size;
string $boxs[];
clear ($boxs);
global string $gMainProgressBar;
global string $gSelect;
setToolTo $gSelect;
progressBar -e -st ("生成像素方块") -bp -ii 1 -min 0 -max ($num*3) $gMainProgressBar;			 			
for($i = $bounding[0]; $i <= $bounding[1]; $i += $size){
if (`progressBar -q -ic $gMainProgressBar`)
	break;
	progressBar -e -s 1 $gMainProgressBar;   
    for($j = $bounding[2]; $j <= $bounding[3]; $j += $size)
         for($k = $bounding[4]; $k <= $bounding[5]; $k += $size)  
         { 
            setAttr ($nearestNode+".inPositionX") $i;
            setAttr ($nearestNode+".inPositionY") $j;
            setAttr ($nearestNode+".inPositionZ") $k;
                        
            vector $normal_p = `getAttr ($nearestNode+".normal")`;           
            float $pos_p[] = `getAttr ($nearestNode+".position")`;     
            vector $normal_new = <<($i -$pos_p[0]), ($j -$pos_p[1]), ($k -$pos_p[2])>>;          
            float $dot = dot($normal_new, $normal_p);
            float $dis=1000000;
            if($shixin==0){
                $dis=mag(<<$pos_p[0],$pos_p[1],$pos_p[2]>>-<<$i,$j,$k>>);                        
            if($dis<$size){
            if($dot < 0){
                $normal_p = abs($normal_p);//some normal values are negative
                string $cube[] = `polyCube -w $size -h $size -d $size -ch 0`; 
                string $cube_shape[] = `listRelatives -s $cube[0]`;
                move -r $i $j $k $cube[0]; 
                //add prim attr
                addAttr -ln "rmanCmyColor"  -at double3  $cube_shape[0];
                addAttr -ln "rmanCmyColorX"  -at double -p rmanCmyColor  $cube_shape[0];
                addAttr -ln "rmanCmyColorY"  -at double -p rmanCmyColor  $cube_shape[0];
                addAttr -ln "rmanCmyColorZ"  -at double -p rmanCmyColor  $cube_shape[0];            
                setAttr -type double3 ($cube_shape[0]+".rmanCmyColor") ($normal_p.x) ($normal_p.y) ($normal_p.z);
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColor");
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColorX");
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColorY");
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColorZ");
                int $sizeb=size($boxs);
                $boxs[$sizeb]=$cube[0];
                parent $cube[0] ($mesh[$a]+"BoxsGrp"); 
                  }
              }
         }else{
 			if($dot < 0){
                $normal_p = abs($normal_p);//some normal values are negative
                string $cube[] = `polyCube -w $size -h $size -d $size -ch 0`; 
                string $cube_shape[] = `listRelatives -s $cube[0]`;
                move -r $i $j $k $cube[0]; 
                //add prim attr
                addAttr -ln "rmanCmyColor"  -at double3  $cube_shape[0];
                addAttr -ln "rmanCmyColorX"  -at double -p rmanCmyColor  $cube_shape[0];
                addAttr -ln "rmanCmyColorY"  -at double -p rmanCmyColor  $cube_shape[0];
                addAttr -ln "rmanCmyColorZ"  -at double -p rmanCmyColor  $cube_shape[0];            
                setAttr -type double3 ($cube_shape[0]+".rmanCmyColor") ($normal_p.x) ($normal_p.y) ($normal_p.z);
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColor");
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColorX");
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColorY");
                setAttr -e-keyable true ($cube_shape[0]+".rmanCmyColorZ");
                int $sizeb=size($boxs);
                $boxs[$sizeb]=$cube[0];
                parent $cube[0] ($mesh[$a]+"BoxsGrp"); 
                 }
             }	
         }        
     }
progressBar -e -ep $gMainProgressBar;	

if($attach==1){
string $plane=$mesh[$a];   
spaceLocator -p 0 0 0 -n ($plane+"SclLoc");
group -n ($plane+"SclLocGrp");
string $shapMN[]=`listRelatives -s ($plane)`;
string $type=`objectType  $shapMN[0]`;
$ex=`objExists ($plane+"follicleGrp")`;
if($ex==0){
select -cl;
group -empty -n ($plane+"follicleGrp");
setAttr ($plane+"follicleGrp.v") 0;
setAttr -lock true ($plane+"follicleGrp.v");
}       
string $cvs[];
$cvs=$boxs;
  
setToolTo $gSelect;
progressBar -e -st ("像素方块附着绑定") -bp -ii 1 -min 0 -max `size($cvs)` $gMainProgressBar;			 			
for($j=0;$j<size($cvs);$j++){
if (`progressBar -q -ic $gMainProgressBar`)
	break;
	progressBar -e -s 1 $gMainProgressBar;  
float $pos[]=`xform -q -ws -t ($cvs[$j])`;
spaceLocator -p 0 0 0 -n ($plane+"LocA"+$j);
group -n ($plane+"LocAGrp"+$j);        
setAttr -type float3 ($plane+"LocAGrp"+$j+".t") $pos[0]  $pos[1] $pos[2];      
parentConstraint ($plane+"LocA"+$j) $cvs[$j];
scaleConstraint ($plane+"LocA"+$j) $cvs[$j];

if($type=="mesh"){
createNode closestPointOnMesh -n ($plane+"cpom"+$j);
string $shape[]=`listRelatives -s $plane`;
connectAttr -f ($shape[0]+".outMesh") ($plane+"cpom"+$j+".inMesh");
setAttr -type float3 ($plane+"cpom"+$j+".inPosition") $pos[0]  $pos[1] $pos[2]; 
float $u=`getAttr ($plane+"cpom"+$j+".parameterU")`;
float $v=`getAttr ($plane+"cpom"+$j+".parameterV")`;

createNode follicle -n ($plane+"follicleShape"+$j);
select -r ($plane+"follicleShape"+$j);
pickWalk -d up;
rename ($plane+"follicle"+$j);
connectAttr -f ($shape[0]+".outMesh") ($plane+"follicleShape"+$j+".inputMesh");
connectAttr -f ($shape[0]+".worldMatrix[0]") ($plane+"follicleShape"+$j+".inputWorldMatrix");

connectAttr -f ($plane+"follicleShape"+$j+".outTranslate") ($plane+"follicle"+$j+".translate");
connectAttr -f ($plane+"follicleShape"+$j+".outRotate") ($plane+"follicle"+$j+".rotate");
setAttr  ($plane+"follicleShape"+$j+".parameterU") $u;
setAttr  ($plane+"follicleShape"+$j+".parameterV") $v;

parent ($plane+"follicle"+$j) ($plane+"follicleGrp");
delete ($plane+"cpom"+$j);
}else{   
createNode closestPointOnSurface -n ($plane+"cpom"+$j);
string $shape[]=`listRelatives -s $plane`;
connectAttr -f ($shape[0]+".worldSpace") ($plane+"cpom"+$j+".inputSurface");
setAttr -type float3 ($plane+"cpom"+$j+".inPosition") $pos[0]  $pos[1] $pos[2]; 

float $u=`getAttr ($plane+"cpom"+$j+".parameterU")`;
float $v=`getAttr ($plane+"cpom"+$j+".parameterV")`;

createNode follicle -n ($plane+"follicleShape"+$j);
select -r ($plane+"follicleShape"+$j);
pickWalk -d up;
rename ($plane+"follicle"+$j);
connectAttr -f ($shape[0]+".local") ($plane+"follicleShape"+$j+".inputSurface");
connectAttr -f ($shape[0]+".worldMatrix[0]") ($plane+"follicleShape"+$j+".inputWorldMatrix");

connectAttr -f ($plane+"follicleShape"+$j+".outTranslate") ($plane+"follicle"+$j+".translate");
connectAttr -f ($plane+"follicleShape"+$j+".outRotate") ($plane+"follicle"+$j+".rotate");

setAttr  ($plane+"follicleShape"+$j+".parameterU") $u;
setAttr  ($plane+"follicleShape"+$j+".parameterV") $v;

parent  ($plane+"follicle"+$j) ($plane+"follicleGrp");
delete ($plane+"cpom"+$j);
}    
scaleConstraint  ($plane+"SclLoc")   ($plane+"follicle"+$j);//缩放约束毛囊
parent  ($plane+"LocAGrp"+$j) ($plane+"follicle"+$j);
        }
progressBar -e -ep $gMainProgressBar;	
        }
    }
}
//粒子灯光动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////
global proc gtLiziLightsWin(){
if(`window -ex gtLiziLightsWin`) deleteUI -window gtLiziLightsWin;
if(`windowPref -ex gtLiziLightsWin`) windowPref -r gtLiziLightsWin;

window -wh 400 300 -title "老船角色绑定-☆☆☆☆☆-粒子灯光动画工具" gtLiziLightsWin;
 columnLayout -adj 1 mainColumnattr;
     text -l "查看程序说明，了解更多应用细节\n老船动画吧：http://www.animate8.com/";
button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com\"";
formLayout liziForm;
columnLayout -adj 1 liziCol;
intFieldGrp -l "粒子灯光数量" -nf 1 -v1 100 liziNum;
text -l "灯光颜色――红色";
floatFieldGrp -nf 2 -v1 0.1 -v2 1 -l "红色，最小和最大值"  redF;
text -l "灯光颜色――绿色";
floatFieldGrp -nf 2 -v1 0.1 -v2 1  -l "绿色，最小和最大值"  greenF;
text -l "灯光颜色――蓝色";
floatFieldGrp -nf 2 -v1 0.1 -v2 1 -l "蓝色，最小和最大值" blueF;
text -l "灯光亮度";
floatFieldGrp -nf 2 -v1 .5 -v2 1.5 -l "灯光，最小和最大值" intensF;
separator -style single  sep1;

floatFieldGrp -nf 1 -v1 1  -l "灯光强度缩放" intensFScale;
rowColumnLayout -nc 2 -cw 1 200 -cw 2 200;

button -c "gtLiziDeng;" -l "创建粒子灯光"  but1;
button -c "gtLiziDengBake;" -l "烘焙粒子灯光关键帧"  but2;
setParent..;

text -l "请选择粒子，点击工具按钮，烘焙灯光关键帧";

formLayout -e 
-af liziCol left 5 -af liziCol top 3 -af liziCol right 5 liziForm;
showWindow gtLiziLightsWin;
}
///////////////////////////
global proc gtLiziDeng(){

string $sel[]=`ls -sl`;

float $rmin=`floatFieldGrp -q -v1 redF`;
float $rmax=`floatFieldGrp -q -v2 redF`;
float $gmin=`floatFieldGrp -q -v1 greenF`;
float $gmax=`floatFieldGrp -q -v2 greenF`;
float $bmin=`floatFieldGrp -q -v1 blueF`;
float $bmax=`floatFieldGrp -q -v2 blueF`;
float $imin=`floatFieldGrp -q -v1 intensF`;
float $imax=`floatFieldGrp -q -v2 intensF`;
int $num=`intFieldGrp -q -v1 liziNum`;
float $inst=`floatFieldGrp -q -v1 intensFScale`;
addAttr -ln "part"  -at double $sel[0];

int $nnn=$num-1;
group -em -n ("liziLightGrp");
xform -os -piv 0 0 0;

for($i=0;$i<$num;$i++){
float $r=rand($rmin,$rmax);
float $g=rand($gmin,$gmax);
float $b=rand($bmin,$bmax);
float $indensity=rand($imin,$imax);
defaultPointLight(1, $r,$g,$b, 2, 0, 0,0,0, 1);
	rename ("liziLight"+$i);
	setAttr ("liziLight"+$i+".intensity") $indensity;
	setAttr ("liziLight"+$i+".v") 0;
addAttr -ln "inst"  -at double  ("liziLight"+$i);
addAttr -ln "part"  -at double  ("liziLight"+$i);
        connectAttr -f ($sel[0]+".part") ("liziLight"+$i+".part");

	setAttr ("liziLight"+$i+".inst") $indensity;
	setAttr -lock true ("liziLight"+$i+".inst");

select -r ("liziLight"+$i);
select -add ("liziLightGrp");
parent;
}

setAttr ($sel[0]+".maxCount") $num;
setAttr ($sel[0]+".lifespanMode") 3;

string $shape[]=`listRelatives -s $sel[0]`;
int $state=`objExists ($sel[0]+".intensity")`;
if($state!=1){
addAttr -ln "intensity"  -at double -dv $inst -k 1 $sel[0];
setAttr ($shape[0]+".particleRenderType") 7;
addAttr -ln radiusPP -dt doubleArray ($shape[0]);
addAttr -ln radiusPP0 -dt doubleArray ($shape[0]);
addAttr -ln "sizeMin"  -at double  -k 1 -dv 0.1 $sel[0];
addAttr -ln "sizeMax"  -at double  -k 1 -dv 0.5 $sel[0];  
addAttr -ln "lightHold"  -at bool  -k 1 -dv 0 $sel[0];
}

int $ex=`objExists ($shape[0]+".event")`;
if($ex==0){
  event -die 0 -count 0 $sel[0];  
}

shadingNode -asShader blinn -n ($sel[0]+"BlinnM");
select -r ($sel[0]);
hyperShade -assign ($sel[0]+"BlinnM");
setAttr ($sel[0]+"BlinnM.color") -type double3 0 0 0 ;
setAttr ($sel[0]+"BlinnM.transparency") -type double3 0.9 0.9 0.9 ;
setAttr ($sel[0]+"BlinnM.eccentricity") 0.1;
setAttr ($sel[0]+"BlinnM.specularRollOff") 0.5;
setAttr ($sel[0]+"BlinnM.specularColor") -type double3 1 1 1 ;

string $exp="";
	$exp+="if(";
	$exp+=($shape[0]);
	$exp+=".particleId>";
	$exp+=($nnn);
	$exp+=")";
	$exp+=($shape[0]);
	$exp+=".lifespanPP=0;\n";
	$exp+="if(";
	$exp+=($shape[0]);
	$exp+=".lifespanPP!=0){\n";
	$exp+="int $id=";
	$exp+=($shape[0]);
	$exp+=".particleId;\n";
	$exp+="vector $pos=";
	$exp+=($shape[0]);
	$exp+=".position;\n";
	$exp+="setAttr (\"liziLight\"+$id+\".tx\") ($pos.x);\n";
	$exp+="setAttr (\"liziLight\"+$id+\".ty\") ($pos.y);\n";
	$exp+="setAttr (\"liziLight\"+$id+\".tz\") ($pos.z);\n";
	$exp+="setAttr (\"liziLight\"+$id+\".v\") 1;\n}\n";
	$exp+="float $min="+$sel[0]+".sizeMin;\n";
	$exp+="float $max="+$sel[0]+".sizeMax;\n";
	$exp+="float $rad=rand($min,$max);\n";
	$exp+=$shape[0]+".radiusPP=$rad;\n";

dynExpression -s $exp -c $shape[0];

int $ex=`objExists ($shape[0]+".event")`;

string $expA="";
	$expA+="if(";
	$expA+=($shape[0]);
	$expA+=".lifespanPP!=0){\n";
	$expA+="vector $pos=";
	$expA+=($shape[0]);
	$expA+=".position;\n";
	$expA+="int $id=";
	$expA+=($shape[0]);
	$expA+=".particleId;\n";
	$expA+="setAttr (\"liziLight\"+$id+\".tx\") ($pos.x);\n";
	$expA+="setAttr (\"liziLight\"+$id+\".ty\") ($pos.y);\n";
	$expA+="setAttr (\"liziLight\"+$id+\".tz\") ($pos.z);\n";
	if($ex==1){
	$expA+="if(";
	$expA+=($shape[0]);
	$expA+=".event!=0){\n";
	$expA+="if("+$sel[0]+".lightHold==0)";	
	$expA+="setAttr (\"liziLight\"+$id+\".v\") 0;\n";
	$expA+=($shape[0]);
	$expA+=".lifespanPP=0;\n}";
	}
	$expA+="}\n";

dynExpression -s $expA -rad $shape[0];

string $expO="";
	$expO+="if(frame==1){\n";
	$expO+="for($i=0;$i<";
	$expO+=($num);
	$expO+=";$i++){\nsetAttr  (\"liziLight\"+$i+\".v\") 0;\n";
	$expO+="float $ins=`getAttr ";
	$expO+=($sel[0]);
	$expO+=".intensity`;\n";
	$expO+="float $inst=`getAttr (\"liziLight\"+$i+\".inst\")`;\n";
	$expO+="setAttr (\"liziLight\"+$i+\".intensity\") ($ins*$inst);}}";
expression -s $expO -ae 1 -uc all ;
}
////////////////////////
global proc gtLiziDengBake(){
    string $sel[]=`ls -sl`;
    string $lights[]=`listConnections -s 0 -d 1 ($sel[0]+".part")`;
    $startFrame		=	`playbackOptions -q -min`;
	$endFrame		=	`playbackOptions -q -max`;
	for($j=$startFrame;$j<$endFrame+1;$j++){
    currentTime -e $j;
    for($i=0;$i<size($lights);$i++){
        setKeyframe ($lights[$i]+".t");
        setKeyframe ($lights[$i]+".v");        
        }
    }
}
//属性移动动画工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////
global proc gtMoveUpDnAttrsProcWin(){
if(`window -ex gtMoveUpDnAttrsProcWin`) deleteUI -window gtMoveUpDnAttrsProcWin;
if(`windowPref -ex gtMoveUpDnAttrsProcWin`) windowPref -r gtMoveUpDnAttrsProcWin;
window -wh 310 150 -title "老船角色绑定-☆☆☆☆☆-属性移动绑定工具" gtMoveUpDnAttrsProcWin;
 columnLayout -adj 1 mainColumnattr;
     text -l "查看程序说明，了解更多应用细节\n老船动画吧：http://www.animate8.com/";
button -l "访 问 老 船 动 画 吧！" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com\"";
formLayout liziForm;
columnLayout -adj 1 liziCol;
separator -style single  sep1;
rowColumnLayout -nc 2 -cw 1 150 -cw 2 150;
text -l "----通道盒选择属性----";
button -c "gtMoveUpDnAttrsProc 1;" -l "上移选择属性"  ;
text -l "----通道盒选择属性----";
button -c "gtMoveUpDnAttrsProc 0;" -l "下移选择属性" ;
setParent..;
formLayout -e 
-af liziCol left 5 -af liziCol top 3 -af liziCol right 5 liziForm;
showWindow gtMoveUpDnAttrsProcWin;
}
//////////////
global proc gtMoveUpDnAttrsProc(int $updn){
string $objs[]=`ls -sl`;
string $attrs[]=`channelBox -q -sma mainChannelBox`;
int $ex;

for($j=0;$j<size($objs);$j++){
string $obj=$objs[$j];
    for($i=0;$i<size($attrs);$i++){
        string $attr=$attrs[$i];
        $ex=`objExists ($obj+"."+$attr)`;
        if($ex==0)continue;
        string $udAttrs[]=`listAttr -ud -u $obj`;

        int $index=-1;
        for($a=0;$a<size($udAttrs);$a++)
            if($attr==$udAttrs[$a])$index=$a;
        if($index==-1)continue;
        int $indexUp=$index-1;
        if($indexUp<0)$indexUp=$index;
        string $upAttr=$udAttrs[$indexUp];
        
        if($updn==1){        
        if($index==0)continue;
        deleteAttr ($obj+"."+$upAttr);
        undo;
        for($aa=($index+1);$aa<size($udAttrs);$aa++){
            deleteAttr ($obj+"."+$udAttrs[$aa]);
            undo;
            }
        }
        if($updn==0){ 
        deleteAttr ($obj+"."+$attr);
        undo;
        int $dnSize=size($attrs);
        for($aa=($index+$dnSize+1);$aa<size($udAttrs);$aa++){
            deleteAttr ($obj+"."+$udAttrs[$aa]);
            undo;
                }
            }
        }  
    }
}
///////////////////
//FK单关节控制器绑定工具
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtRemoveNameSpacesWin(){
if(`window -ex gtRemoveNameSpacesWin`) deleteUI  -window gtRemoveNameSpacesWin;
window -wh 300 150 -title "--老船角色绑定--" gtRemoveNameSpacesWin;
columnLayout -adj 1   mainColumnL;
 text -l "点击下方按钮↓↓↓↓↓";
button -l "访问老船@动画吧-查看工具应用视频" -bgc 0.3 0.2 0.1 -h 40  -c "showHelp -a \"http://www.animate8.com/archives/1087\"";	
	separator -style double;   
    text -l"--直接点击按钮即可--"  -h 30  ;
	button  -l "删 除 名 字 空 间" -c "gtRemoveNameSpaces" ;
    separator -style double;	
showWindow gtRemoveNameSpacesWin;
}
////////////////////
global proc gtRemoveNameSpaces (){
string $allObj[]=`ls -type transform`;
string $rootObjs[];
clear $rootObjs;
global string $gMainProgressBar;
global string $gSelect;
setToolTo $gSelect;
progressBar -e -st ("查找根物体...") -bp -ii 1 -min 0 -max `size($allObj)` $gMainProgressBar;	
for ($i=0;$i<size($allObj);$i++){
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    string $parent[]=`listRelatives -p $allObj[$i]`;
    int $ex=`objExists ($parent[0])`;
    if($ex==0){
    string $shape[]=`listRelatives -s $allObj[$i]`;
    $ex=`objExists ($shape[0])`;
    if($ex==1){
        string $type=`nodeType $shape[0]`;
        if($type!="camera"){
            int $size=size($rootObjs);
            $rootObjs[$size]=$allObj[$i];
            }
        }else{
            int $size=size($rootObjs);
            $rootObjs[$size]=$allObj[$i];  
        }    
    }
}
progressBar -e -ep $gMainProgressBar;
for($i=0;$i<size($rootObjs);$i++){
    string $rootObj=$rootObjs[$i];
    string $childsFName[]=`listRelatives -c -ad -fullPath $rootObj`;
    string $childsName[]=`listRelatives -c -ad $rootObj`;  
    string $tempString[]; 
   
setToolTo $gSelect;
progressBar -e -st ("删除名字空间...") -bp -ii 1 -min 0 -max `size($childsName)` $gMainProgressBar;	
for ($j=0;$j<size($childsName);$j++){
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    //print ($i+"\n");
    int $macth=`gmatch $childsName[$j] "*:*"`;
    if($macth==1){            
        int $numT=`tokenize $childsName[$j] ":" $tempString`;
        if($numT>=2){
            string $newName=$tempString[size($tempString)-1];
            rename $childsFName[$j] $newName;   
            }                              
        }
    } 
progressBar -e -ep $gMainProgressBar;
    
    $macth=`gmatch $rootObj "*:*"`;
    if($macth==1){            
        int $numT=`tokenize $rootObj ":" $tempString`;
        if($numT>=2){
            string $newName=$tempString[size($tempString)-1];
            rename $rootObj $newName;   
        }                              
    }     
}

string $meshs[]=`ls -type "mesh"`;
int $go=size($meshs);
if($go>0){
setToolTo $gSelect;
progressBar -e -st ("删除多边形名字空间...") -bp -ii 1 -min 0 -max `size($meshs)` $gMainProgressBar;		
for ($ii=0;$ii<size($meshs);$ii++){
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    string $tempString[];
    string $objc[]=`listRelatives -p -fullPath ($meshs[$ii])`;
    string $inputs[]=`listHistory $objc[0]`;

for ($i=0;$i<size($inputs);$i++){    
    int $macth=`gmatch $inputs[$i] "*:*"`;
    if ($macth==1){            
        int $numT=`tokenize $inputs[$i] ":" $tempString`;
        if($numT>=2)
            rename $inputs[$i] $tempString[size($tempString)-1];   
        }
    }  
}  
progressBar -e -ep $gMainProgressBar;
}

string $nurbss[]=`ls -type "nurbsSurface"`; 
$go=size($nurbss);
if($go>0){
setToolTo $gSelect;
progressBar -e -st ("删除多曲面名字空间...") -bp -ii 1 -min 0 -max `size($nurbss)` $gMainProgressBar;		
for ($ii=0;$ii<size($nurbss);$ii++){
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    string $tempString[];
    string $objc[]=`listRelatives -p -fullPath ($nurbss[$ii])`;
    string $inputs[]=`listHistory $objc[0]`;
    
for ($i=0;$i<size($inputs);$i++){    
    int $macth=`gmatch $inputs[$i] "*:*"`;
    if ($macth==1){            
        int $numT=`tokenize $inputs[$i] ":" $tempString`;
        if($numT>=2)
            rename $inputs[$i] $tempString[size($tempString)-1];   
        }
    }  
}     
progressBar -e -ep $gMainProgressBar;
}

$allObj=`ls -showNamespace -recursive true `;
setToolTo $gSelect;
progressBar -e -st ("删除多其他节点名字空间...") -bp -ii 1 -min 0 -max `size($allObj)` $gMainProgressBar;		
for ($ii=0;$ii<size($allObj);$ii++){
	if (`progressBar -q -ic $gMainProgressBar`)
		break;
	progressBar -e -s 1 $gMainProgressBar;
    string $tempString[];
    int $ex=`objExists $allObj[$ii]`;
    if($ex==1){
        int $macth=`gmatch $allObj[$ii] "*:*"`;
        if ($macth==1){            
            int $numT=`tokenize $allObj[$ii] ":" $tempString`;
                if($numT>=2)
                    rename $allObj[$ii] $tempString[size($tempString)-1];   
        }
    }  
}     
progressBar -e -ep $gMainProgressBar;

select -cl;     
}
////////////////////////////老船动画吧
////////////////////////////-2019-06-02-22500